(()=>{var e={"../../utils/dist/enums/ColorFormat.js":
/*!*********************************************!*\
  !*** ../../utils/dist/enums/ColorFormat.js ***!
  \*********************************************/(e,t)=>{"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ColorFormat=void 0,function(e){e.rgb="rgb",e.rgba="rgba",e.smartRgba="smartRgba",e.hex6="hex6",e.hex8="hex8",e.hashHex6="hashHex6",e.hashHex8="hashHex8",e.smartHashHex="smartHashHex",e.smartHex="smartHex",e.hsl="hsl",e.hsla="hsla",e.smartHsla="smartHsla",e.smartUIColor="smartUIColor",e.oklch="oklch",e.oklcha="oklcha",e.smartOklch="smartOklch"}(o||(t.ColorFormat=o={}))},"../../utils/dist/enums/StringCase.js":
/*!********************************************!*\
  !*** ../../utils/dist/enums/StringCase.js ***!
  \********************************************/(e,t)=>{"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.StringCase=void 0,function(e){e.camelCase="camelCase",e.capitalCase="capitalCase",e.constantCase="constantCase",e.dotCase="dotCase",e.trainCase="trainCase",e.noCase="noCase",e.kebabCase="kebabCase",e.pascalCase="pascalCase",e.pathCase="pathCase",e.sentenceCase="sentenceCase",e.snakeCase="snakeCase",e.flatCase="flatCase"}(o||(t.StringCase=o={}))},"../../utils/dist/helpers/CSSHelper.js":
/*!*********************************************!*\
  !*** ../../utils/dist/helpers/CSSHelper.js ***!
  \*********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CSSHelper=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),i=o(/*! ./ColorHelper */"../../utils/dist/helpers/ColorHelper.js");t.CSSHelper=class{static tokenToCSS(e,t,o){let n;switch(e.tokenType){case r.TokenType.color:n=this.colorTokenValueToCSS(e.value,t,o);break;case r.TokenType.border:n=this.borderTokenValueToCSS(e.value,t,o);break;case r.TokenType.gradient:n=this.gradientTokenValueToCSS(e.value,t,o);break;case r.TokenType.dimension:case r.TokenType.size:case r.TokenType.space:case r.TokenType.opacity:case r.TokenType.fontSize:case r.TokenType.lineHeight:case r.TokenType.letterSpacing:case r.TokenType.paragraphSpacing:case r.TokenType.borderWidth:case r.TokenType.radius:case r.TokenType.duration:case r.TokenType.zIndex:n=this.dimensionTokenValueToCSS(e.value,t,o);break;case r.TokenType.shadow:n=this.shadowTokenValueToCSS(e.value,t,o);break;case r.TokenType.fontWeight:n=this.fontWeightTokenValueToCSS(e.value,t,o);break;case r.TokenType.fontFamily:case r.TokenType.productCopy:case r.TokenType.string:n=this.stringTokenValueToCSS(e.value,t,o);break;case r.TokenType.textCase:case r.TokenType.textDecoration:case r.TokenType.visibility:n=this.optionTokenValueToCSS(e.value,t,o,e.tokenType);break;case r.TokenType.blur:n=this.blurTokenValueToCSS(e.value,t,o);break;case r.TokenType.typography:n=this.typographyTokenValueToCSS(e.value,t,o);break;default:throw new r.UnreachableCaseError(e.tokenType,"Unsupported token type for transformation to CSS:")}if(o.valueTransformer){const t=o.valueTransformer(n,e);if(void 0!==t)return t}return n}static colorTokenValueToCSS(e,t,o){return i.ColorHelper.formattedColorOrVariableName(e,t,o)}static borderTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(r)return o.tokenToVariableRef(r);const i=this.dimensionTokenValueToCSS(e.width,t,o),a=this.borderStyleToCSS(e.style),l=this.colorTokenValueToCSS(e.color,t,o);this.borderPositionToCSS(e.position);return`${i} ${a} ${l}`}static gradientTokenValueToCSS(e,t,o){return e.map((e=>this.gradientLayerToCSS(e,t,o))).join(", ")}static gradientLayerToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);const l=i.ColorHelper.roundToDecimals(e.to.x,o.decimals)-i.ColorHelper.roundToDecimals(e.from.x,o.decimals),s=i.ColorHelper.roundToDecimals(e.to.y,o.decimals)-i.ColorHelper.roundToDecimals(e.from.y,o.decimals),c=Math.atan2(s,l)*(180/Math.PI),u=()=>l>=0&&s>0||l>0&&s<=0||l<=0&&s<0?90+c:c-270;let p="";switch(e.type){case r.GradientType.linear:p=`linear-gradient(${u()}deg, `;break;case r.GradientType.radial:p="radial-gradient(circle, ";break;case r.GradientType.angular:p="conic-gradient(";break;default:p=`linear-gradient(${u()}deg, `}return`${p}${e.stops.map((e=>`${this.colorTokenValueToCSS(e.color,t,o)} ${i.ColorHelper.roundToDecimals(100*e.position,o.decimals)}%`)).join(", ")})`}static dimensionTokenValueToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);if(o.forceRemUnit&&e.unit===r.Unit.pixels){const t=o.remBase||16,r=e.measure/t;return`${i.ColorHelper.roundToDecimals(r,o.decimals)}rem`}return`${i.ColorHelper.roundToDecimals(e.measure,o.decimals)}${this.unitToCSS(e.unit)}`}static shadowTokenValueToCSS(e,t,o){return e.map((e=>this.shadowLayerToCSS(e,t,o))).join(", ")}static shadowLayerToCSS(e,t,o){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(a)return o.tokenToVariableRef(a);const l=e=>{if(o.forceRemUnit){const t=e/(o.remBase||16);return`${i.ColorHelper.roundToDecimals(t,o.decimals)}rem`}return`${e}px`};return`${e.type===r.ShadowType.inner?"inset ":""}${l(e.x)} ${l(e.y)} ${l(e.radius)} ${l(e.spread)} ${this.colorTokenValueToCSS({...e.color,...e.opacity&&{opacity:e.opacity}},t,o)}`}static fontWeightTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(r)return o.tokenToVariableRef(r);return`${this.normalizeTextWeight(e.text)}`}static normalizeTextWeight(e){const t=e.toLowerCase().trim(),o=parseInt(t);if(!isNaN(o))return o;switch(t){case"thin":case"hairline":return 100;case"extra light":case"extralight":case"ultra light":case"ultralight":return 200;case"light":return 300;case"normal":case"regular":case"book":default:return 400;case"medium":return 500;case"semi bold":case"semibold":case"demi bold":case"demibold":return 600;case"bold":return 700;case"extra bold":case"extrabold":case"ultra bold":case"ultrabold":return 800;case"black":case"heavy":return 900}}static stringTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`"${e.text}"`}static optionTokenValueToCSS(e,t,o,i){const a=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return a?o.tokenToVariableRef(a):i===r.TokenType.textCase?this.textCaseToCSS(e.value):i===r.TokenType.textDecoration?this.textDecorationToCSS(e.value):e.value.toLowerCase()}static blurTokenValueToCSS(e,t,o){const r=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);return r?o.tokenToVariableRef(r):`blur(${this.dimensionTokenValueToCSS(e.radius,t,o)})`}static typographyTokenValueToCSS(e,t,o){const i=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(i)return o.tokenToVariableRef(i);const a=(0,n.sureOptionalReference)(e.fontFamily.referencedTokenId,t,o.allowReferences),l=(0,n.sureOptionalReference)(e.fontWeight.referencedTokenId,t,o.allowReferences),s=(0,n.sureOptionalReference)(e.textDecoration.referencedTokenId,t,o.allowReferences),c=(0,n.sureOptionalReference)(e.textCase.referencedTokenId,t,o.allowReferences),u={fontFamily:a?o.tokenToVariableRef(a):e.fontFamily.text,fontWeight:l?o.tokenToVariableRef(l):this.normalizeTextWeight(e.fontWeight.text),textDecoration:s?o.tokenToVariableRef(s):e.textDecoration.value===r.TextDecoration.original?this.textDecorationToCSS(e.textDecoration.value):void 0,textCase:c?o.tokenToVariableRef(c):e.textCase.value===r.TextCase.original?this.textCaseToCSS(e.textCase.value):void 0,caps:e.textCase.value===r.TextCase.smallCaps,fontSize:this.dimensionTokenValueToCSS(e.fontSize,t,o),lineHeight:e.lineHeight?this.dimensionTokenValueToCSS(e.lineHeight,t,o):void 0},p=u.fontSize;return`${u.caps?"small-caps ":""}${u.fontWeight} ${u.lineHeight?`${p}/${u.lineHeight}`:p} ${a?u.fontFamily:`"${u.fontFamily}"`}`}static borderStyleToCSS(e){switch(e){case r.BorderStyle.dashed:return"dashed";case r.BorderStyle.dotted:return"dotted";case r.BorderStyle.solid:return"solid";case r.BorderStyle.groove:return"groove";default:return"solid"}}static borderPositionToCSS(e){switch(e){case r.BorderPosition.center:return"center";case r.BorderPosition.inside:return"inside";case r.BorderPosition.outside:default:return"outside"}}static unitToCSS(e){switch(e){case r.Unit.percent:return"%";case r.Unit.pixels:return"px";case r.Unit.rem:return"rem";case r.Unit.raw:return"";case r.Unit.ms:return"ms";default:return"px"}}static textCaseToCSS(e){switch(e){case r.TextCase.original:return"none";case r.TextCase.upper:return"uppercase";case r.TextCase.lower:return"lowercase";case r.TextCase.camel:return"capitalize";case r.TextCase.smallCaps:return"small-caps"}}static textDecorationToCSS(e){switch(e){case r.TextDecoration.original:return"none";case r.TextDecoration.underline:return"underline";case r.TextDecoration.strikethrough:return"line-through"}}}},"../../utils/dist/helpers/ColorHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/ColorHelper.js ***!
  \***********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorHelper=void 0;const r=o(/*! ../enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js"),n=o(/*! ./TokenHelper */"../../utils/dist/helpers/TokenHelper.js");class i{static formattedColorOrVariableName(e,t,o){let i,a=null,l=null;const s=(0,n.sureOptionalReference)(e.referencedTokenId,t,o.allowReferences);if(s)i=o.tokenToVariableRef(s);else{const r=(0,n.sureOptionalReference)(e.color.referencedTokenId,t,o.allowReferences);r&&(a=o.tokenToVariableRef(r));const i=(0,n.sureOptionalReference)(e.opacity.referencedTokenId,t,o.allowReferences);i&&(l=o.tokenToVariableRef(i))}if(i)return i;if(!i&&!a&&!l)return this.formattedColor(e,o.colorFormat,o.decimals);switch(o.colorFormat){case r.ColorFormat.rgb:case r.ColorFormat.rgba:case r.ColorFormat.smartRgba:return this.colorToRgb(o.colorFormat,this.normalizedIntColor(e),e.opacity.measure,o.decimals,a,l);default:return this.formattedColor(e,o.colorFormat,o.decimals)}}static formattedColor(e,t,o=3){switch(t){case r.ColorFormat.hex6:case r.ColorFormat.hex8:case r.ColorFormat.hashHex6:case r.ColorFormat.hashHex8:case r.ColorFormat.smartHex:case r.ColorFormat.smartHashHex:return this.colorToHex(t,this.normalizedIntColor(e),e.opacity.measure);case r.ColorFormat.rgb:case r.ColorFormat.rgba:case r.ColorFormat.smartRgba:return this.colorToRgb(t,this.normalizedIntColor(e),e.opacity.measure,o,null,null);case r.ColorFormat.hsl:case r.ColorFormat.hsla:case r.ColorFormat.smartHsla:return this.colorToHsl(t,this.normalizedFractionalColor(e),e.opacity.measure,o);case r.ColorFormat.smartUIColor:return this.colorToUIColor(this.normalizedIntColor(e),e.opacity.measure,o);case r.ColorFormat.oklch:case r.ColorFormat.oklcha:case r.ColorFormat.smartOklch:return this.colorToOklch(t,this.normalizedIntColor(e),e.opacity.measure,o);default:return this.colorToHex(r.ColorFormat.smartHashHex,this.normalizedIntColor(e),e.opacity.measure)}}static colorToRgb(e,t,o,n,i,a){let l;return l=e===r.ColorFormat.rgba||e===r.ColorFormat.smartRgba&&o<1?`rgba(${i||`${t.r}, ${t.g}, ${t.b}`}, ${a||this.roundToDecimals(o,n)})`:`rgb(${i||`${t.r}, ${t.g}, ${t.b}`})`,l}static colorToHex(e,t,o){let n=`${this.pHex(t.r)}${this.pHex(t.g)}${this.pHex(t.b)}`;return(e===r.ColorFormat.hex8||e===r.ColorFormat.hashHex8||e===r.ColorFormat.smartHex&&o<1||e===r.ColorFormat.smartHashHex&&o<1)&&(n+=`${this.pHex(Math.round(255*o))}`),e!==r.ColorFormat.hashHex6&&e!==r.ColorFormat.hashHex8&&e!==r.ColorFormat.smartHashHex||(n=`#${n}`),n}static colorToHsl(e,t,o,n){const i=Math.max(t.r,t.g,t.b),a=Math.min(t.r,t.g,t.b);let l,s=0,c=0,u=(i+a)/2;if(i===a)s=c=0;else{const e=i-a;switch(c=u>.5?e/(2-i-a):e/(i+a),i){case t.r:s=(t.g-t.b)/e+(t.g<t.b?6:0);break;case t.g:s=(t.b-t.r)/e+2;break;case t.b:s=(t.r-t.g)/e+4}s/=6}return l=e===r.ColorFormat.hsla||e===r.ColorFormat.smartHsla&&o<1?`hsla(${Math.round(360*s)}%, ${Math.round(100*c)}%, ${Math.round(100*u)}%, ${this.roundToDecimals(o,n)})`:`hsl(${Math.round(360*s)}%, ${Math.round(100*c)}%, ${Math.round(100*u)}%)`,l}static colorToUIColor(e,t,o=3){let r=`UIColor(rgb: 0x${this.pHex(e.r)}${this.pHex(e.g)}${this.pHex(e.b)})`;return t<1&&(r+=`.withAlphaComponent(${t})`),r}static normalizedIntColor(e){return{r:Math.round(e.color.r),g:Math.round(e.color.g),b:Math.round(e.color.b)}}static normalizedFractionalColor(e,t=3){return{r:this.roundToDecimals(e.color.r/255,t),g:i.roundToDecimals(e.color.g/255,t),b:i.roundToDecimals(e.color.b/255,t)}}static roundToDecimals(e,t,o=!1){const r=Math.pow(10,t),n=Math.round(e*r)/r;return o?Number(n.toFixed(t)):parseFloat(n.toFixed(t))}static pHex(e){return e.toString(16).padStart(2,"0")}static colorToOklch(e,t,o,n){const{l:i,c:a,h:l}=this.rgbToOklch(t.r,t.g,t.b);switch(e){case r.ColorFormat.oklcha:return`oklch(${i}% ${a} ${l} / ${this.roundToDecimals(100*o,n)}%)`;case r.ColorFormat.smartOklch:return o<1?`oklch(${i}% ${a} ${l} / ${this.roundToDecimals(100*o,n)}%)`:`oklch(${i}% ${a} ${l})`;case r.ColorFormat.oklch:default:return`oklch(${i}% ${a} ${l})`}}static rgbToOklch(e,t,o){const r=this.sRGBtoLinear(e/255),n=this.sRGBtoLinear(t/255),i=this.sRGBtoLinear(o/255),a=.4124564*r+.3575761*n+.1804375*i,l=.2126729*r+.7151522*n+.072175*i,s=.0193339*r+.119192*n+.9503041*i,c=.8189330101*a+.3618667424*l-.1288597137*s,u=.0329845436*a+.9293118715*l+.0361456387*s,p=.0482003018*a+.2643662691*l+.633851707*s,d=Math.cbrt(c),m=Math.cbrt(u),y=Math.cbrt(p),T=.2104542553*d+.793617785*m-.0040720468*y,f=1.9779984951*d-2.428592205*m+.4505937099*y,g=.0259040371*d+.7827717662*m-.808675766*y,S=Math.sqrt(f*f+g*g);let h=180*Math.atan2(g,f)/Math.PI;return h<0&&(h+=360),{l:this.roundToDecimals(100*T,2),c:this.roundToDecimals(S,3,!0),h:this.roundToDecimals(h,2)}}static sRGBtoLinear(e){return e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}}t.ColorHelper=i},"../../utils/dist/helpers/FileHelper.js":
/*!**********************************************!*\
  !*** ../../utils/dist/helpers/FileHelper.js ***!
  \**********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileHelper=void 0;const r=o(/*! @supernovaio/sdk-exporters */"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js");t.FileHelper=class{static createCopyRemoteFile({relativePath:e,fileName:t,url:o}){return{path:e,name:t,type:r.OutputFileType.copyRemoteUrl,url:o}}static createTextFile({relativePath:e,fileName:t,content:o}){return{path:e,name:t,type:r.OutputFileType.text,content:o}}static createBinaryFile({relativePath:e,fileName:t,data:o}){return{path:e,name:t,type:r.OutputFileType.binary,data:o}}}},"../../utils/dist/helpers/FileNameHelper.js":
/*!**************************************************!*\
  !*** ../../utils/dist/helpers/FileNameHelper.js ***!
  \**************************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileNameHelper=void 0;t.FileNameHelper=class{static ensureFileExtension(e,t){const o=t.startsWith(".")?t:`.${t}`;return e.toLowerCase().endsWith(o.toLowerCase())?e:e+o}static replaceFileExtension(e,t,o){const r=t.startsWith(".")?t:`.${t}`,n=o.startsWith(".")?o:`.${o}`;return e.replace(new RegExp(`${r}$`),n)}static getDefaultStyleFileName(e,t=".css"){const o=t.startsWith(".")?t:`.${t}`;return{Color:"color",Typography:"typography",Dimension:"dimension",Size:"size",Space:"space",Opacity:"opacity",FontSize:"font-size",LineHeight:"line-height",LetterSpacing:"letter-spacing",ParagraphSpacing:"paragraph-spacing",BorderWidth:"border-width",BorderRadius:"border-radius",Duration:"duration",ZIndex:"z-index",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"product-copy",FontFamily:"font-family",FontWeight:"font-weight",TextCase:"text-case",TextDecoration:"text-decoration",Visibility:"visibility",Blur:"blur"}[e]+o}}},"../../utils/dist/helpers/GeneralHelper.js":
/*!*************************************************!*\
  !*** ../../utils/dist/helpers/GeneralHelper.js ***!
  \*************************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GeneralHelper=void 0;t.GeneralHelper=class{static indent(e=2){return" ".repeat(Math.max(0,e))}static addDisclaimer(e,t){if(!e)return t;return`/**\n * ${e.replace(/\n/g,"\n * ")} \n */\n\n${t}`}}},"../../utils/dist/helpers/NamingHelper.js":
/*!************************************************!*\
  !*** ../../utils/dist/helpers/NamingHelper.js ***!
  \************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NamingHelper=void 0;const r=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js"),n=o(/*! change-case */"../../utils/node_modules/change-case/dist/index.js");class i{static applyFindReplace(e,t){if(!t)return e;const o=Object.entries(t).sort((([e],[t])=>t.length-e.length));let r=e;for(const[e,t]of o){const o=e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),n=new RegExp(`\\b${o}\\b|(?<=^|\\s)${o}(?=\\s|$)`,"gi");r=r.replace(n,t)}return r}static codeSafeVariableNameForToken(e,t,o,r,n,a=!0){let l=[];o&&(l.push(...o.path),o.isRoot||l.push(o.name));const s=e.name.split(/[\s-_]+/);if(l.length>0&&s.length>1&&s[0].toLowerCase()===l[l.length-1].toLowerCase()?l.push(s.slice(1).join(" ")):l.push(e.name),n){let e=l.join(" ");e=i.applyFindReplace(e,n),l=e.split(/\s+/).filter((e=>e.length>0)).map((e=>e.trim()))}return r&&r.length>0&&l.unshift(r),i.codeSafeVariableName(l,t,void 0,a)}static codeSafeVariableName(e,t,o,a=!1){let l="string"==typeof e?e:e.join(" ");if(l=i.applyFindReplace(l,o),l=l.replaceAll(/[^a-zA-Z0-9_-]/g,"_"),a){const e=(0,n.kebabCase)(l).split("-").filter((e=>e.length>0));l=e.filter(((t,o)=>0===o||t!==e[o-1])).join(" ")}switch(t){case r.StringCase.camelCase:l=(0,n.camelCase)(l);break;case r.StringCase.capitalCase:l=(0,n.capitalCase)(l);break;case r.StringCase.constantCase:l=(0,n.constantCase)(l);break;case r.StringCase.dotCase:l=(0,n.dotCase)(l);break;case r.StringCase.trainCase:l=(0,n.trainCase)(l);break;case r.StringCase.noCase:l=(0,n.noCase)(l);break;case r.StringCase.kebabCase:l=(0,n.kebabCase)(l);break;case r.StringCase.pascalCase:l=(0,n.pascalCase)(l);break;case r.StringCase.pathCase:l=(0,n.pathCase)(l);break;case r.StringCase.sentenceCase:l=(0,n.sentenceCase)(l);break;case r.StringCase.snakeCase:l=(0,n.snakeCase)(l);break;case r.StringCase.flatCase:l=(0,n.camelCase)(l).toLowerCase()}return t!==r.StringCase.snakeCase&&t!==r.StringCase.constantCase&&(l=l.replaceAll("_","")),l.match(/^[^a-zA-Z]/)&&(l="_"+l),l}static nameAsCSSVarReference(e){return`var(--${e})`}static nameAsCSSVarDeclaration(e){return`--${e}`}}t.NamingHelper=i},"../../utils/dist/helpers/ThemeHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/ThemeHelper.js ***!
  \***********************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThemeHelper=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),n=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js");t.ThemeHelper=class{static hasThemedTokens(e,t,o){const r=e.filter((e=>e.tokenType===t)),n=new Set(o.overriddenTokens.map((e=>e.id)));return r.some((e=>n.has(e.id)))}static filterThemedTokens(e,t){const o=new Set(t.overriddenTokens.map((e=>e.id)));return e.filter((e=>o.has(e.id)))}static getThemeIdentifier(e,t=n.StringCase.kebabCase){if("string"==typeof e)return e;const o=e.codeName||e.name;return r.NamingHelper.codeSafeVariableName(o,t)}static getThemeName(e){if("string"==typeof e)return e;const t=e.codeName||e.name;return r.NamingHelper.codeSafeVariableName(t,n.StringCase.capitalCase)}}},"../../utils/dist/helpers/TokenHelper.js":
/*!***********************************************!*\
  !*** ../../utils/dist/helpers/TokenHelper.js ***!
  \***********************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sureOptionalReference=function(e,t,o=!0){if(!e||!o)return null;const r=t.get(e);if(!r)throw new Error(`Trying to retrieve unknown referenced token ${e}`);return r}},"../../utils/dist/helpers/TokenNameTracker.js":
/*!****************************************************!*\
  !*** ../../utils/dist/helpers/TokenNameTracker.js ***!
  \****************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenNameTracker=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js");t.TokenNameTracker=class{constructor(){this.tokenNameMap=new Map,this.nameToTokenMap=new Map,this.hierarchyNameMap=new Map}reset(){this.tokenNameMap.clear(),this.nameToTokenMap.clear(),this.hierarchyNameMap.clear()}getSimpleTokenName(e,t,o=!1,n=[]){const i=`${n.join("/")}/${e.name}`;if(!o&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);let a=r.NamingHelper.codeSafeVariableName(e.name,t);this.hierarchyNameMap.has(i)||this.hierarchyNameMap.set(i,new Set);const l=this.hierarchyNameMap.get(i);return l.size>0&&!l.has(e.id)&&(a=`${a}_${l.size}`),l.add(e.id),o||(this.tokenNameMap.set(e.id,a),this.nameToTokenMap.set(a,e.id)),a}getTokenName(e,t,o,n,i=!1){if(!i&&this.tokenNameMap.has(e.id))return this.tokenNameMap.get(e.id);const a=t.find((t=>t.id===e.parentGroupId));let l=r.NamingHelper.codeSafeVariableNameForToken(e,o,a,n),s=1;for(;this.nameToTokenMap.has(l)&&this.nameToTokenMap.get(l)!==e.id;)l=`${l}_copy_${s++}`;return i||(this.tokenNameMap.set(e.id,l),this.nameToTokenMap.set(l,e.id)),l}}},"../../utils/dist/helpers/WriteTokenPropStore.js":
/*!*******************************************************!*\
  !*** ../../utils/dist/helpers/WriteTokenPropStore.js ***!
  \*******************************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WriteTokenPropStore=void 0;const r=o(/*! ./NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),n=o(/*! ../enums/StringCase */"../../utils/dist/enums/StringCase.js");t.WriteTokenPropStore=class{constructor(e,t){this.tokenPropertyWriteMap=new Map,this.sdk=e,this.target=t}storeValueForTokenProperty(e,t,o){let r=this.tokenPropertyWriteMap.get(t);r||(r=new Map,this.tokenPropertyWriteMap.set(t,r)),r.set(e,o)}async batchUpdateStoredTokenProperties(){if(0===this.tokenPropertyWriteMap.size)return;let e=await this.sdk.tokens.getTokenProperties(this.target);for(const[t,o]of this.tokenPropertyWriteMap){let i=e.find((e=>e.name===t));if(i||(await this.sdk.tokens.createTokenProperty(this.target,{type:"Generic",name:t,codeName:r.NamingHelper.codeSafeVariableName([t],n.StringCase.camelCase),columnWidth:200,description:"Variable name to use in code"}),e=await this.sdk.tokens.getTokenProperties(this.target),i=e.find((e=>e.name===t))),!i)throw new Error(`Failed to retrieve or create property ${t}.`);const a=Array.from(o).map((([e,t])=>({definitionId:i.id,targetElementId:e.id,value:t})));await this.sdk.bulkOperations.updateElementProperties(this.target,a)}}async writeTokenProperties(e,t,o){const r=e?.trim();if(r){for(const e of t){const t=o(e);this.storeValueForTokenProperty(e,r,t)}await this.batchUpdateStoredTokenProperties()}}}},"../../utils/dist/index.js":
/*!*********************************!*\
  !*** ../../utils/dist/index.js ***!
  \*********************************/function(e,t,o){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o);var n=Object.getOwnPropertyDescriptor(t,o);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,r,n)}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||r(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(/*! ./helpers/NamingHelper */"../../utils/dist/helpers/NamingHelper.js"),t),n(o(/*! ./helpers/ColorHelper */"../../utils/dist/helpers/ColorHelper.js"),t),n(o(/*! ./helpers/TokenHelper */"../../utils/dist/helpers/TokenHelper.js"),t),n(o(/*! ./helpers/CSSHelper */"../../utils/dist/helpers/CSSHelper.js"),t),n(o(/*! ./helpers/FileHelper */"../../utils/dist/helpers/FileHelper.js"),t),n(o(/*! ./helpers/ThemeHelper */"../../utils/dist/helpers/ThemeHelper.js"),t),n(o(/*! ./helpers/FileNameHelper */"../../utils/dist/helpers/FileNameHelper.js"),t),n(o(/*! ./helpers/GeneralHelper */"../../utils/dist/helpers/GeneralHelper.js"),t),n(o(/*! ./enums/StringCase */"../../utils/dist/enums/StringCase.js"),t),n(o(/*! ./enums/ColorFormat */"../../utils/dist/enums/ColorFormat.js"),t),n(o(/*! ./helpers/TokenNameTracker */"../../utils/dist/helpers/TokenNameTracker.js"),t),n(o(/*! ./helpers/WriteTokenPropStore */"../../utils/dist/helpers/WriteTokenPropStore.js"),t)},"../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js":
/*!*********************************************************************************************!*\
  !*** ../../utils/node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js ***!
  \*********************************************************************************************/(e,t)=>{(()=>{"use strict";var e={1:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.GradientType=void 0,function(e){e.linear="Linear",e.radial="Radial",e.angular="Angular"}(o||(t.GradientType=o={}))},306:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.default="Default",e.defaultBold="DefaultBold",e.defaultSemibold="DefaultSemibold",e.small="Small",e.smallBold="SmallBold",e.smallSemibold="SmallSemibold",e.custom="Custom"}(o||(t.DocsBlockTextPropertyStyle=o={}))},899:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScaleType=void 0,function(e){e.aspectFill="AspectFill",e.aspectFit="AspectFit"}(o||(t.AssetScaleType=o={}))},915:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScale=void 0,function(e){e.x1="x1",e.x2="x2",e.x3="x3",e.x4="x4"}(o||(t.AssetScale=o={}))},922:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextCase=void 0,function(e){e.original="Original",e.upper="Upper",e.lower="Lower",e.camel="Camel",e.smallCaps="SmallCaps"}(o||(t.TextCase=o={}))},934:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.IconSet=void 0,function(e){e.checkCircle="CheckCircle",e.crossCircle="CrossCircle",e.alert="Alert"}(o||(t.IconSet=o={}))},1160:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_POSITIONS=t.BorderPosition=void 0,function(e){e.inside="Inside",e.center="Center",e.outside="Outside"}(o||(t.BorderPosition=o={})),t.ALL_BORDER_POSITIONS=[o.inside,o.center,o.outside]},1233:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocsEntityType=o={}))},1255:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameAlignment=void 0,function(e){e.frameHeight="FrameHeight",e.center="Center"}(o||(t.FrameAlignment=o={}))},1423:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageAssetType=void 0,function(e){e.image="image",e.figmaFrame="figmaFrame"}(o||(t.DocumentationLegacyPageAssetType=o={}))},1601:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockThemeType=void 0,function(e){e.override="Override",e.comparison="Comparison"}(o||(t.DocumentationLegacyPageBlockThemeType=o={}))},1846:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockType=void 0,function(e){e.text="Text",e.heading="Heading",e.code="Code",e.unorderedList="UnorderedList",e.orderedList="OrderedList",e.quote="Quote",e.callout="Callout",e.divider="Divider",e.image="Image",e.token="Token",e.tokenList="TokenList",e.tokenGroup="TokenGroup",e.shortcuts="Shortcuts",e.link="Link",e.figmaEmbed="FigmaEmbed",e.youtubeEmbed="YoutubeEmbed",e.storybookEmbed="StorybookEmbed",e.genericEmbed="Embed",e.figmaFrames="FigmaFrames",e.custom="Custom",e.renderCode="RenderCode",e.componentAssets="ComponentAssets",e.column="Column",e.columnItem="ColumnItem",e.tabs="Tabs",e.tabItem="TabItem",e.table="Table",e.tableCell="TableCell",e.tableRow="TableRow"}(o||(t.DocumentationLegacyPageBlockType=o={}))},2123:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocumentationLegacyGroupBehavior=o={}))},2657:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockShortcut=t.DocumentationLegacyPageBlockShortcutType=void 0,function(e){e.external="External",e.internal="Internal"}(o||(t.DocumentationLegacyPageBlockShortcutType=o={})),t.DocumentationLegacyPageBlockShortcut=class{constructor(e){var t;e.url?this.type=o.external:this.type=o.internal,this.title=this.shortcutTitleFromModel(e,this.type),this.description=this.shortcutDescriptionFromModel(e,this.type),this.previewUrl=this.shortcutPreviewUrlFromModel(e),this.type===o.internal&&(null===(t=e.documentationItemPreview)||void 0===t?void 0:t.valid)&&e.documentationItemId?this.internalId=e.documentationItemId:(this.internalId=null,this.type===o.external&&e.url?this.externalUrl=e.url:this.externalUrl=null)}shortcutTitleFromModel(e,t){var r,n,i,a,l;let s=null;return e.title&&e.title.trim().length>0?s=e.title:t===o.internal?s=null!==(n=null===(r=e.documentationItemPreview)||void 0===r?void 0:r.title)&&void 0!==n?n:null:t===o.external&&(s=null!==(l=null!==(a=null===(i=e.urlPreview)||void 0===i?void 0:i.title)&&void 0!==a?a:e.url)&&void 0!==l?l:null),s&&0!==s.trim().length?s:null}shortcutDescriptionFromModel(e,t){var r;let n=null;return e.description&&e.description.trim().length>0?n=e.description:t===o.external&&(n=null===(r=e.urlPreview)||void 0===r?void 0:r.description),n&&0!==n.trim().length?n:null}shortcutPreviewUrlFromModel(e){var t,o,r,n,i;return null!==(i=null!==(r=null!==(t=e.assetUrl)&&void 0!==t?t:null===(o=e.asset)||void 0===o?void 0:o.url)&&void 0!==r?r:null===(n=e.urlPreview)||void 0===n?void 0:n.thumbnailUrl)&&void 0!==i?i:null}}},2674:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.RichTextSpanAttributeType=void 0,function(e){e.bold="Bold",e.italic="Italic",e.link="Link",e.strikethrough="Strikethrough",e.code="Code"}(o||(t.RichTextSpanAttributeType=o={}))},2802:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.PulsarExecutor=t.OutputFileType=void 0,function(e){e.copyRemoteUrl="copyRemoteUrl",e.text="text",e.binary="binary"}(o||(t.OutputFileType=o={})),function(e){e.supernova="supernova",e.local="local"}(r||(t.PulsarExecutor=r={}))},3607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionStatus=void 0,function(e){e.active="active",e.gracePeriod="gracePeriod",e.cancelled="cancelled",e.suspended="suspended"}(o||(t.WorkspaceSubscriptionStatus=o={}))},3718:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameLayout=void 0,function(e){e.c8="C8",e.c7="C7",e.c6="C6",e.c5="C5",e.c4="C4",e.c3="C3",e.c2="C2",e.c1="C1",e.c175="C1_75"}(o||(t.FrameLayout=o={}))},3733:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorSelectionType=void 0,function(e){e.entity="Entity",e.group="Group",e.entityAndGroup="EntityAndGroup"}(o||(t.DocsBlockBehaviorSelectionType=o={}))},3788:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DT_TOKEN_TYPES=t.tokenTypeIsReferencable=t.REFERENCABLE_TOKEN_TYPES=t.REPLACABLE_TOKEN_TYPES=t.tokenTypeIsNonPure=t.tokenTypeIsPure=t.PURE_TOKEN_TYPES=t.ALL_TOKEN_TYPES=t.MS_DIMENSION_TOKEN_TYPES=t.RAW_DIMENSION_TOKEN_TYPES=t.DIMENSION_TOKEN_TYPES=t.OPTION_TOKEN_TYPES=t.STRING_TOKEN_TYPES=t.TokenType=void 0,function(e){e.color="Color",e.typography="Typography",e.shadow="Shadow",e.border="Border",e.gradient="Gradient",e.blur="Blur",e.radius="BorderRadius",e.borderWidth="BorderWidth",e.duration="Duration",e.fontSize="FontSize",e.dimension="Dimension",e.letterSpacing="LetterSpacing",e.lineHeight="LineHeight",e.opacity="Opacity",e.paragraphSpacing="ParagraphSpacing",e.size="Size",e.space="Space",e.zIndex="ZIndex",e.textDecoration="TextDecoration",e.textCase="TextCase",e.visibility="Visibility",e.fontFamily="FontFamily",e.fontWeight="FontWeight",e.string="String",e.productCopy="ProductCopy"}(o||(t.TokenType=o={})),t.STRING_TOKEN_TYPES=[o.string,o.productCopy,o.fontFamily,o.fontWeight],t.OPTION_TOKEN_TYPES=[o.textCase,o.textDecoration,o.visibility],t.DIMENSION_TOKEN_TYPES=[o.dimension,o.size,o.space,o.opacity,o.fontSize,o.lineHeight,o.letterSpacing,o.paragraphSpacing,o.borderWidth,o.radius,o.duration,o.zIndex],t.RAW_DIMENSION_TOKEN_TYPES=[o.opacity,o.zIndex],t.MS_DIMENSION_TOKEN_TYPES=[o.duration],t.ALL_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES,o.color,o.gradient,o.border,o.radius,o.shadow,o.typography,o.blur],t.PURE_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.tokenTypeIsPure=e=>t.PURE_TOKEN_TYPES.includes(e),t.tokenTypeIsNonPure=e=>!(0,t.tokenTypeIsPure)(e),t.REPLACABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.REFERENCABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.textCase,o.textDecoration],t.tokenTypeIsReferencable=e=>t.REFERENCABLE_TOKEN_TYPES.includes(e),t.DT_TOKEN_TYPES=[o.color,o.shadow,o.gradient,o.typography,o.border,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.string,...t.OPTION_TOKEN_TYPES]},4068:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocsEntityGroupBehavior=o={}))},4290:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionProductCode=void 0,function(e){e.free="free",e.team="team",e.teamTest="team_test",e.company="company",e.enterprise="enterprise"}(o||(t.WorkspaceSubscriptionProductCode=o={}))},4379:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SupernovaError=void 0;class o extends Error{constructor(e,t,o,r,n,i,a){super(e),this.code=t,this.status=o,this.formErrors=r,this.requestId=n,this.serverTime=i,this.url=a}static fromNetworkResponse(e,t,r){var n,i,a;return new o(e.message,e.errorCode||e.reason||e.label||null,e.code||t,null!==(n=e.formErrors)&&void 0!==n?n:null,null!==(i=e.requestId)&&void 0!==i?i:null,null!==(a=e.serverTime)&&void 0!==a?a:null,r)}static fromNoNetworkResponse(e){return new o("No network or internet unreachable","NO_NETWORK",12163,null,(new Date).toISOString(),null,e)}static fromCode(e){return new o(e,e,null,null,null,null,null)}static fromMessage(e){return new o(e,null,null,null,null,null,null)}isFieldErrored(e){return void 0!==this.formErrors.find((t=>t.key===e))}errorForField(e){var t;return null!==(t=this.formErrors.find((t=>t.key===e)))&&void 0!==t?t:null}toString(){var e,t,o,r,n,i;return`\n    Error thrown: ${this.message}\n\n    Code: ${null!==(e=this.code)&&void 0!==e?e:"-"}\n\n    Status: ${null!==(t=this.status)&&void 0!==t?t:"-"}\n\n    Fields: ${JSON.stringify(this.formErrors,null,2)}\n\n    Request ID: ${null!==(o=this.requestId)&&void 0!==o?o:"-"}\n\n    Server time: ${null!==(r=this.serverTime)&&void 0!==r?r:"-"}\n\n    Network URL: ${null!==(n=this.url)&&void 0!==n?n:"-"}\n\n    Stack: ${null!==(i=this.stack)&&void 0!==i?i:"-"}\n    `}toHumanReadable(){return`${this.message}${this.requestId?` (request ${this.requestId})`:""}`}}t.SupernovaError=o},4546:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_STYLES=t.BorderStyle=void 0,function(e){e.dashed="Dashed",e.dotted="Dotted",e.solid="Solid",e.groove="Groove"}(o||(t.BorderStyle=o={})),t.ALL_BORDER_STYLES=[o.dashed,o.dotted,o.solid,o.groove]},4652:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.SourceType=void 0,function(e){e.figma="Figma",e.tokenStudio="TokenStudio",e.figmaVariablesPlugin="FigmaVariablesPlugin"}(o||(t.SourceType=o={}))},5102:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyCalloutType=void 0,function(e){e.info="Info",e.success="Success",e.warning="Warning",e.error="Error"}(o||(t.DocumentationLegacyCalloutType=o={}))},5503:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionPlanInterval=void 0,function(e){e.yearly="yearly",e.monthly="monthly"}(o||(t.WorkspaceSubscriptionPlanInterval=o={}))},5651:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorDataType=void 0,function(e){e.item="Item",e.token="Token",e.asset="Asset",e.component="Component",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockBehaviorDataType=o={}))},5673:(e,t)=>{var o;function r(e){switch(e.type){case o.documentationItem:return`@page:${e.documentationItemId}`;case o.pageHeading:return`@page:${e.documentationItemId}#${e.pageHeadingId}`;case o.url:return e.url;default:return}}Object.defineProperty(t,"__esModule",{value:!0}),t.linkAttributeToDocsLink=t.docsLinkToLinkAttributes=t.docsLinkToUrl=t.DocsLinkRefType=void 0,function(e){e.documentationItem="DocumentationItem",e.pageHeading="PageHeading",e.url="Url"}(o||(t.DocsLinkRefType=o={})),t.docsLinkToUrl=r,t.docsLinkToLinkAttributes=function(e){const t=r(e);if(t)return{href:t,target:e.openInNewTab?"_blank":"_self"}},t.linkAttributeToDocsLink=function(e,t){if(!e)return;const r="_blank"===t;if(e.startsWith("@page:")){if(e.includes("#")){const[t,n]=e.replace("@page:","").split("#");return{type:o.pageHeading,documentationItemId:t,pageHeadingId:n,openInNewTab:r}}return{type:o.documentationItem,documentationItemId:e.replace("@page:",""),openInNewTab:r}}return{type:o.url,url:e,openInNewTab:r}}},5695:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainErrorCode=void 0,function(e){e.generalError="GeneralError",e.dnsNotConfigured="DNSNotConfigured",e.maintenance="Maintenance"}(o||(t.CustomDomainErrorCode=o={}))},5883:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockItemPropertyOptionRenderingStyle=o={}))},5963:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockOptionRenderingStyle=o={}))},6141:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.VisibilityType=void 0,function(e){e.visible="Visible",e.hidden="Hidden"}(o||(t.VisibilityType=o={}))},6192:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.BlurType=void 0,function(e){e.layer="Layer",e.background="Background"}(o||(t.BlurType=o={}))},6298:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryAuthType=void 0,function(e){e.basic="Basic",e.bearer="Bearer"}(o||(t.WorkspaceNPMRegistryAuthType=o={}))},6644:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockRichTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.default="Default"}(o||(t.DocsBlockRichTextPropertyStyle=o={}))},6839:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyType=void 0,function(e){e.richText="RichText",e.multiRichText="MultiRichText",e.text="Text",e.richTextEditor="RichTextEditor",e.boolean="Boolean",e.number="Number",e.singleSelect="SingleSelect",e.multiSelect="MultiSelect",e.image="Image",e.token="Token",e.tokenType="TokenType",e.tokenProperty="TokenProperty",e.component="Component",e.componentProperty="ComponentProperty",e.asset="Asset",e.assetProperty="AssetProperty",e.embedURL="EmbedURL",e.url="URL",e.markdown="Markdown",e.code="Code",e.codeSandbox="CodeSandbox",e.table="Table",e.divider="Divider",e.storybook="Storybook",e.color="Color",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockItemPropertyType=o={}))},7040:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextDecoration=void 0,function(e){e.original="None",e.underline="Underline",e.strikethrough="Strikethrough"}(o||(t.TextDecoration=o={}))},7291:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutWidth=void 0,function(e){e.c1="1",e.c2="2",e.c3="3",e.c4="4",e.c5="5",e.c6="6",e.c7="7",e.c8="8",e.c9="9",e.c10="10",e.c11="11",e.c12="12"}(o||(t.DocsBlockItemVariantLayoutWidth=o={}))},7379:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyItemType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocumentationLegacyItemType=o={}))},7476:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.TextAlignment=t.Alignment=void 0,function(e){e.left="Left",e.center="Center",e.stretch="Stretch"}(o||(t.Alignment=o={})),function(e){e.left="Left",e.center="Center",e.right="Right"}(r||(t.TextAlignment=r={}))},7479:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyTextStyle=void 0,function(e){e.small="Small",e.regular="Regular",e.bold="Bold"}(o||(t.DocsBlockItemPropertyTextStyle=o={}))},7737:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainState=void 0,function(e){e.initial="Initial",e.domainSetupInProgress="DomainSetupInProgress",e.domainSetupFailed="DomainSetupFailed",e.domainSetupsSucces="DomainSetupSuccess",e.sslSetupInProgress="SSLSetupInProgress",e.sslSetupFailed="SSLSetupFailed",e.sslSetupSuccess="SSLSetupSuccess"}(o||(t.CustomDomainState=o={}))},7968:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryType=void 0,function(e){e.npmJS="NPMJS",e.gitHub="GitHub",e.azureDevOps="AzureDevOps",e.artifactory="Artifactory",e.custom="Custom"}(o||(t.WorkspaceNPMRegistryType=o={}))},7971:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsSectionType=void 0,function(e){e.plain="Plain",e.tabs="Tabs"}(o||(t.DocsSectionType=o={}))},8042:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ImportWarningType=void 0,function(e){e.UnsupportedFill="UnsupportedFill",e.UnsupportedStroke="UnsupportedStroke",e.UnsupportedEffect="UnsupportedEffect",e.StyleNotApplied="StyleNotApplied",e.NoPublishedStyles="NoPublishedStyles",e.NoPublishedComponents="NoPublishedComponents",e.NoPublishedAssets="NoPublishedAssets",e.NoVersionFound="NoVersionFound",e.ComponentHasNoThumbnail="ComponentHasNoThumbnail",e.DuplicateImportedStyleId="DuplicateImportedStyleId",e.DuplicateImportedStylePath="DuplicateImportedStylePath",e.NoPublishedElements="NoPublishedElements",e.NoUnpublishedStyles="NoUnpublishedStyles"}(o||(t.ImportWarningType=o={}))},8061:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyRichTextStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.ol="OL",e.ul="UL"}(o||(t.DocsBlockItemPropertyRichTextStyle=o={}))},8095:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutType=void 0,function(e){e.column="Column",e.row="Row"}(o||(t.DocsBlockItemVariantLayoutType=o={}))},8607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.MS_UNITS=t.PX_UNITS=t.RAW_UNITS=t.LINE_HEIGHT_UNITS=t.SIZE_UNITS=t.Unit=void 0,function(e){e.pixels="Pixels",e.percent="Percent",e.rem="Rem",e.ms="Ms",e.raw="Raw"}(o||(t.Unit=o={})),t.SIZE_UNITS=[o.pixels,o.percent,o.rem],t.LINE_HEIGHT_UNITS=[o.pixels,o.percent,o.rem,o.raw],t.RAW_UNITS=[o.raw],t.PX_UNITS=[o.pixels],t.MS_UNITS=[o.ms]},8738:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetFormat=void 0,function(e){e.png="png",e.pdf="pdf",e.svg="svg"}(o||(t.AssetFormat=o={}))},8890:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockImagePropertyAspectRatio=void 0,function(e){e.auto="Auto",e.square="Square",e.landscape="Landscape",e.portrait="Portrait",e.wide="Wide"}(o||(t.DocsBlockImagePropertyAspectRatio=o={}))},9125:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ShadowType=void 0,function(e){e.drop="Drop",e.inner="Inner"}(o||(t.ShadowType=o={}))},9133:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionColor=void 0,function(e){e.green="Green",e.red="Red",e.yellow="Yellow",e.blue="Blue",e.purple="Purple",e.orange="Orange",e.pink="Pink",e.teal="Teal",e.grey="Grey",e.lightGrey="LightGrey",e.cyan="Cyan",e.fuchsia="Fuchsia"}(o||(t.DocsBlockOptionColor=o={}))},9377:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemEntityType=void 0,function(e){e.token="Token",e.tokenGroup="TokenGroup",e.asset="Asset",e.assetGroup="AssetGroup",e.component="Component",e.componentGroup="ComponentGroup"}(o||(t.DocsBlockItemEntityType=o={}))},9478:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.convertRemoteToUserRole=t.UserRole=void 0;const r=o(4379);var n;!function(e){e.owner="Owner",e.admin="Admin",e.creator="Creator",e.contributor="Contributor",e.billing="Billing",e.viewer="Viewer"}(n||(t.UserRole=n={})),t.convertRemoteToUserRole=e=>{switch(e){case"Owner":return n.owner;case"Admin":return n.admin;case"Creator":return n.creator;case"Contributor":return n.contributor;case"Billing":return n.billing;case"Viewer":return n.viewer;default:throw r.SupernovaError.fromMessage(`Unknown role: ${e}`)}}},9896:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyHeadingType=void 0,function(e){e[e.h1=1]="h1",e[e.h2=2]="h2",e[e.h3=3]="h3"}(o||(t.DocumentationLegacyHeadingType=o={}))},9932:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.docsImageRefToUrl=t.DocsImageRefType=void 0,function(e){e.resource="Resource",e.figmaNode="FigmaNode"}(o||(t.DocsImageRefType=o={})),t.docsImageRefToUrl=function(e,t,r){var n;if(e)switch(e.type){case o.resource:return null===(n=e.resource)||void 0===n?void 0:n.url;case o.figmaNode:if(!e.figmaNode||!e.figmaNode.sourceId||!e.figmaNode.frameReferenceId)return;return t.resources.getFigmaFrameHostedUrl({designSystemId:r.dsId,versionId:r.versionId},e.figmaNode.frameReferenceId);default:return}}}},o={};function r(t){var n=o[t];if(void 0!==n)return n.exports;var i=o[t]={exports:{}};return e[t](i,i.exports,r),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.TokenType=e.TextDecoration=e.TextCase=e.ShadowType=e.RichTextSpanAttributeType=e.GradientType=e.FrameLayout=e.FrameAlignment=e.IconSet=e.SourceType=e.DocsImageRefType=e.DocsLinkRefType=e.DocsSectionType=e.DocsEntityType=e.DocsEntityGroupBehavior=e.DocsBlockTextPropertyStyle=e.DocsBlockRichTextPropertyStyle=e.DocsBlockOptionColor=e.DocsBlockOptionRenderingStyle=e.DocsBlockItemVariantLayoutWidth=e.DocsBlockItemVariantLayoutType=e.DocsBlockItemPropertyType=e.DocsBlockItemPropertyTextStyle=e.DocsBlockItemPropertyRichTextStyle=e.DocsBlockItemPropertyOptionRenderingStyle=e.DocsBlockItemEntityType=e.DocsBlockImagePropertyAspectRatio=e.DocsBlockBehaviorSelectionType=e.DocsBlockBehaviorDataType=e.DocumentationLegacyPageBlockShortcutType=e.DocumentationLegacyPageBlockThemeType=e.DocumentationLegacyPageBlockType=e.DocumentationLegacyPageAssetType=e.DocumentationLegacyItemType=e.DocumentationLegacyHeadingType=e.DocumentationLegacyGroupBehavior=e.DocumentationLegacyCalloutType=e.BorderStyle=e.BorderPosition=e.BlurType=e.AssetScaleType=e.AssetScale=e.AssetFormat=e.Alignment=e.ALL_TOKEN_TYPES=e.ALL_BORDER_STYLES=e.ALL_BORDER_POSITIONS=e.OPTION_TOKEN_TYPES=e.STRING_TOKEN_TYPES=e.DIMENSION_TOKEN_TYPES=void 0,e.PulsarExecutor=e.OutputFileType=e.CustomDomainState=e.CustomDomainErrorCode=e.ImportWarningType=e.WorkspaceNPMRegistryType=e.WorkspaceNPMRegistryAuthType=e.WorkspaceSubscriptionStatus=e.WorkspaceSubscriptionProductCode=e.WorkspaceSubscriptionPlanInterval=e.VisibilityType=e.UserRole=e.Unit=void 0;var t=r(3788);Object.defineProperty(e,"DIMENSION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.DIMENSION_TOKEN_TYPES}}),Object.defineProperty(e,"STRING_TOKEN_TYPES",{enumerable:!0,get:function(){return t.STRING_TOKEN_TYPES}}),Object.defineProperty(e,"OPTION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.OPTION_TOKEN_TYPES}});var o=r(1160);Object.defineProperty(e,"ALL_BORDER_POSITIONS",{enumerable:!0,get:function(){return o.ALL_BORDER_POSITIONS}});var i=r(4546);Object.defineProperty(e,"ALL_BORDER_STYLES",{enumerable:!0,get:function(){return i.ALL_BORDER_STYLES}});var a=r(3788);Object.defineProperty(e,"ALL_TOKEN_TYPES",{enumerable:!0,get:function(){return a.ALL_TOKEN_TYPES}});var l=r(7476);Object.defineProperty(e,"Alignment",{enumerable:!0,get:function(){return l.Alignment}});var s=r(8738);Object.defineProperty(e,"AssetFormat",{enumerable:!0,get:function(){return s.AssetFormat}});var c=r(915);Object.defineProperty(e,"AssetScale",{enumerable:!0,get:function(){return c.AssetScale}});var u=r(899);Object.defineProperty(e,"AssetScaleType",{enumerable:!0,get:function(){return u.AssetScaleType}});var p=r(6192);Object.defineProperty(e,"BlurType",{enumerable:!0,get:function(){return p.BlurType}});var d=r(1160);Object.defineProperty(e,"BorderPosition",{enumerable:!0,get:function(){return d.BorderPosition}});var m=r(4546);Object.defineProperty(e,"BorderStyle",{enumerable:!0,get:function(){return m.BorderStyle}});var y=r(5102);Object.defineProperty(e,"DocumentationLegacyCalloutType",{enumerable:!0,get:function(){return y.DocumentationLegacyCalloutType}});var T=r(2123);Object.defineProperty(e,"DocumentationLegacyGroupBehavior",{enumerable:!0,get:function(){return T.DocumentationLegacyGroupBehavior}});var f=r(9896);Object.defineProperty(e,"DocumentationLegacyHeadingType",{enumerable:!0,get:function(){return f.DocumentationLegacyHeadingType}});var g=r(7379);Object.defineProperty(e,"DocumentationLegacyItemType",{enumerable:!0,get:function(){return g.DocumentationLegacyItemType}});var S=r(1423);Object.defineProperty(e,"DocumentationLegacyPageAssetType",{enumerable:!0,get:function(){return S.DocumentationLegacyPageAssetType}});var h=r(1846);Object.defineProperty(e,"DocumentationLegacyPageBlockType",{enumerable:!0,get:function(){return h.DocumentationLegacyPageBlockType}});var b=r(1601);Object.defineProperty(e,"DocumentationLegacyPageBlockThemeType",{enumerable:!0,get:function(){return b.DocumentationLegacyPageBlockThemeType}});var v=r(2657);Object.defineProperty(e,"DocumentationLegacyPageBlockShortcutType",{enumerable:!0,get:function(){return v.DocumentationLegacyPageBlockShortcutType}});var P=r(5651);Object.defineProperty(e,"DocsBlockBehaviorDataType",{enumerable:!0,get:function(){return P.DocsBlockBehaviorDataType}});var k=r(3733);Object.defineProperty(e,"DocsBlockBehaviorSelectionType",{enumerable:!0,get:function(){return k.DocsBlockBehaviorSelectionType}});var O=r(8890);Object.defineProperty(e,"DocsBlockImagePropertyAspectRatio",{enumerable:!0,get:function(){return O.DocsBlockImagePropertyAspectRatio}});var C=r(9377);Object.defineProperty(e,"DocsBlockItemEntityType",{enumerable:!0,get:function(){return C.DocsBlockItemEntityType}});var _=r(5883);Object.defineProperty(e,"DocsBlockItemPropertyOptionRenderingStyle",{enumerable:!0,get:function(){return _.DocsBlockItemPropertyOptionRenderingStyle}});var I=r(8061);Object.defineProperty(e,"DocsBlockItemPropertyRichTextStyle",{enumerable:!0,get:function(){return I.DocsBlockItemPropertyRichTextStyle}});var N=r(7479);Object.defineProperty(e,"DocsBlockItemPropertyTextStyle",{enumerable:!0,get:function(){return N.DocsBlockItemPropertyTextStyle}});var D=r(6839);Object.defineProperty(e,"DocsBlockItemPropertyType",{enumerable:!0,get:function(){return D.DocsBlockItemPropertyType}});var x=r(8095);Object.defineProperty(e,"DocsBlockItemVariantLayoutType",{enumerable:!0,get:function(){return x.DocsBlockItemVariantLayoutType}});var E=r(7291);Object.defineProperty(e,"DocsBlockItemVariantLayoutWidth",{enumerable:!0,get:function(){return E.DocsBlockItemVariantLayoutWidth}});var j=r(5963);Object.defineProperty(e,"DocsBlockOptionRenderingStyle",{enumerable:!0,get:function(){return j.DocsBlockOptionRenderingStyle}});var B=r(9133);Object.defineProperty(e,"DocsBlockOptionColor",{enumerable:!0,get:function(){return B.DocsBlockOptionColor}});var R=r(6644);Object.defineProperty(e,"DocsBlockRichTextPropertyStyle",{enumerable:!0,get:function(){return R.DocsBlockRichTextPropertyStyle}});var L=r(306);Object.defineProperty(e,"DocsBlockTextPropertyStyle",{enumerable:!0,get:function(){return L.DocsBlockTextPropertyStyle}});var F=r(4068);Object.defineProperty(e,"DocsEntityGroupBehavior",{enumerable:!0,get:function(){return F.DocsEntityGroupBehavior}});var M=r(1233);Object.defineProperty(e,"DocsEntityType",{enumerable:!0,get:function(){return M.DocsEntityType}});var A=r(7971);Object.defineProperty(e,"DocsSectionType",{enumerable:!0,get:function(){return A.DocsSectionType}});var w=r(5673);Object.defineProperty(e,"DocsLinkRefType",{enumerable:!0,get:function(){return w.DocsLinkRefType}});var H=r(9932);Object.defineProperty(e,"DocsImageRefType",{enumerable:!0,get:function(){return H.DocsImageRefType}});var U=r(4652);Object.defineProperty(e,"SourceType",{enumerable:!0,get:function(){return U.SourceType}});var $=r(934);Object.defineProperty(e,"IconSet",{enumerable:!0,get:function(){return $.IconSet}});var W=r(1255);Object.defineProperty(e,"FrameAlignment",{enumerable:!0,get:function(){return W.FrameAlignment}});var V=r(3718);Object.defineProperty(e,"FrameLayout",{enumerable:!0,get:function(){return V.FrameLayout}});var G=r(1);Object.defineProperty(e,"GradientType",{enumerable:!0,get:function(){return G.GradientType}});var Y=r(2674);Object.defineProperty(e,"RichTextSpanAttributeType",{enumerable:!0,get:function(){return Y.RichTextSpanAttributeType}});var K=r(9125);Object.defineProperty(e,"ShadowType",{enumerable:!0,get:function(){return K.ShadowType}});var z=r(922);Object.defineProperty(e,"TextCase",{enumerable:!0,get:function(){return z.TextCase}});var q=r(7040);Object.defineProperty(e,"TextDecoration",{enumerable:!0,get:function(){return q.TextDecoration}});var J=r(3788);Object.defineProperty(e,"TokenType",{enumerable:!0,get:function(){return J.TokenType}});var Z=r(8607);Object.defineProperty(e,"Unit",{enumerable:!0,get:function(){return Z.Unit}});var X=r(9478);Object.defineProperty(e,"UserRole",{enumerable:!0,get:function(){return X.UserRole}});var Q=r(6141);Object.defineProperty(e,"VisibilityType",{enumerable:!0,get:function(){return Q.VisibilityType}});var ee=r(5503);Object.defineProperty(e,"WorkspaceSubscriptionPlanInterval",{enumerable:!0,get:function(){return ee.WorkspaceSubscriptionPlanInterval}});var te=r(4290);Object.defineProperty(e,"WorkspaceSubscriptionProductCode",{enumerable:!0,get:function(){return te.WorkspaceSubscriptionProductCode}});var oe=r(3607);Object.defineProperty(e,"WorkspaceSubscriptionStatus",{enumerable:!0,get:function(){return oe.WorkspaceSubscriptionStatus}});var re=r(6298);Object.defineProperty(e,"WorkspaceNPMRegistryAuthType",{enumerable:!0,get:function(){return re.WorkspaceNPMRegistryAuthType}});var ne=r(7968);Object.defineProperty(e,"WorkspaceNPMRegistryType",{enumerable:!0,get:function(){return ne.WorkspaceNPMRegistryType}});var ie=r(8042);Object.defineProperty(e,"ImportWarningType",{enumerable:!0,get:function(){return ie.ImportWarningType}});var ae=r(5695);Object.defineProperty(e,"CustomDomainErrorCode",{enumerable:!0,get:function(){return ae.CustomDomainErrorCode}});var le=r(7737);Object.defineProperty(e,"CustomDomainState",{enumerable:!0,get:function(){return le.CustomDomainState}});var se=r(2802);Object.defineProperty(e,"OutputFileType",{enumerable:!0,get:function(){return se.OutputFileType}}),Object.defineProperty(e,"PulsarExecutor",{enumerable:!0,get:function(){return se.PulsarExecutor}})})();var i=t;for(var a in n)i[a]=n[a];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})()},"../../utils/node_modules/change-case/dist/index.js":
/*!**********************************************************!*\
  !*** ../../utils/node_modules/change-case/dist/index.js ***!
  \**********************************************************/(e,t,o)=>{"use strict";o.r(t),o.d(t,{camelCase:()=>d,capitalCase:()=>T,constantCase:()=>f,dotCase:()=>g,kebabCase:()=>S,noCase:()=>p,pascalCase:()=>m,pascalSnakeCase:()=>y,pathCase:()=>h,sentenceCase:()=>b,snakeCase:()=>v,split:()=>c,splitSeparateNumbers:()=>u,trainCase:()=>P});const r=/([\p{Ll}\d])(\p{Lu})/gu,n=/(\p{Lu})([\p{Lu}][\p{Ll}])/gu,i=/(\d)\p{Ll}|(\p{L})\d/u,a=/[^\p{L}\d]+/giu,l="$1\0$2",s="";function c(e){let t=e.trim();t=t.replace(r,l).replace(n,l),t=t.replace(a,"\0");let o=0,i=t.length;for(;"\0"===t.charAt(o);)o++;if(o===i)return[];for(;"\0"===t.charAt(i-1);)i--;return t.slice(o,i).split(/\0/g)}function u(e){const t=c(e);for(let e=0;e<t.length;e++){const o=t[e],r=i.exec(o);if(r){const n=r.index+(r[1]??r[2]).length;t.splice(e,1,o.slice(0,n),o.slice(n))}}return t}function p(e,t){const[o,r,n]=I(e,t);return o+r.map(k(t?.locale)).join(t?.delimiter??" ")+n}function d(e,t){const[o,r,n]=I(e,t),i=k(t?.locale),a=O(t?.locale),l=t?.mergeAmbiguousCharacters?C(i,a):_(i,a);return o+r.map(((e,t)=>0===t?i(e):l(e,t))).join(t?.delimiter??"")+n}function m(e,t){const[o,r,n]=I(e,t),i=k(t?.locale),a=O(t?.locale),l=t?.mergeAmbiguousCharacters?C(i,a):_(i,a);return o+r.map(l).join(t?.delimiter??"")+n}function y(e,t){return T(e,{delimiter:"_",...t})}function T(e,t){const[o,r,n]=I(e,t),i=k(t?.locale),a=O(t?.locale);return o+r.map(C(i,a)).join(t?.delimiter??" ")+n}function f(e,t){const[o,r,n]=I(e,t);return o+r.map(O(t?.locale)).join(t?.delimiter??"_")+n}function g(e,t){return p(e,{delimiter:".",...t})}function S(e,t){return p(e,{delimiter:"-",...t})}function h(e,t){return p(e,{delimiter:"/",...t})}function b(e,t){const[o,r,n]=I(e,t),i=k(t?.locale),a=O(t?.locale),l=C(i,a);return o+r.map(((e,t)=>0===t?l(e):i(e))).join(t?.delimiter??" ")+n}function v(e,t){return p(e,{delimiter:"_",...t})}function P(e,t){return T(e,{delimiter:"-",...t})}function k(e){return!1===e?e=>e.toLowerCase():t=>t.toLocaleLowerCase(e)}function O(e){return!1===e?e=>e.toUpperCase():t=>t.toLocaleUpperCase(e)}function C(e,t){return o=>`${t(o[0])}${e(o.slice(1))}`}function _(e,t){return(o,r)=>{const n=o[0];return(r>0&&n>="0"&&n<="9"?"_"+n:t(n))+e(o.slice(1))}}function I(e,t={}){const o=t.split??(t.separateNumbers?u:c),r=t.prefixCharacters??s,n=t.suffixCharacters??s;let i=0,a=e.length;for(;i<e.length;){const t=e.charAt(i);if(!r.includes(t))break;i++}for(;a>i;){const t=a-1,o=e.charAt(t);if(!n.includes(o))break;a=t}return[e.slice(0,i),o(e.slice(i,a)),e.slice(a)]}},"./config.ts":
/*!*******************!*\
  !*** ./config.ts ***!
  \*******************/(e,t)=>{"use strict";var o,r,n,i;Object.defineProperty(t,"__esModule",{value:!0}),t.TokenNameStructure=t.TokenSortOrder=t.FileStructure=t.ThemeExportStyle=void 0,function(e){e.ApplyDirectly="applyDirectly",e.SeparateFiles="separateFiles",e.MergedTheme="mergedTheme",e.NestedThemes="nestedThemes"}(o||(t.ThemeExportStyle=o={})),function(e){e.SeparateByType="separateByType",e.SingleFile="singleFile"}(r||(t.FileStructure=r={})),function(e){e.Default="default",e.Alphabetical="alphabetical"}(n||(t.TokenSortOrder=n={})),function(e){e.PathAndName="pathAndName",e.NameOnly="nameOnly",e.CollectionPathAndName="collectionPathAndName"}(i||(t.TokenNameStructure=i={}))},"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js ***!
  \***********************************************************************************/(e,t)=>{(()=>{"use strict";var e={4379:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SupernovaError=void 0;class o extends Error{constructor(e,t,o,r,n,i,a){super(e),this.code=t,this.status=o,this.formErrors=r,this.requestId=n,this.serverTime=i,this.url=a}static fromNetworkResponse(e,t,r){var n,i,a;return new o(e.message,e.errorCode||e.reason||e.label||null,e.code||t,null!==(n=e.formErrors)&&void 0!==n?n:null,null!==(i=e.requestId)&&void 0!==i?i:null,null!==(a=e.serverTime)&&void 0!==a?a:null,r)}static fromNoNetworkResponse(e){return new o("No network or internet unreachable","NO_NETWORK",12163,null,(new Date).toISOString(),null,e)}static fromCode(e){return new o(e,e,null,null,null,null,null)}static fromMessage(e){return new o(e,null,null,null,null,null,null)}isFieldErrored(e){return void 0!==this.formErrors.find((t=>t.key===e))}errorForField(e){var t;return null!==(t=this.formErrors.find((t=>t.key===e)))&&void 0!==t?t:null}toString(){var e,t,o,r,n,i;return`\n    Error thrown: ${this.message}\n\n    Code: ${null!==(e=this.code)&&void 0!==e?e:"-"}\n\n    Status: ${null!==(t=this.status)&&void 0!==t?t:"-"}\n\n    Fields: ${JSON.stringify(this.formErrors,null,2)}\n\n    Request ID: ${null!==(o=this.requestId)&&void 0!==o?o:"-"}\n\n    Server time: ${null!==(r=this.serverTime)&&void 0!==r?r:"-"}\n\n    Network URL: ${null!==(n=this.url)&&void 0!==n?n:"-"}\n\n    Stack: ${null!==(i=this.stack)&&void 0!==i?i:"-"}\n    `}toHumanReadable(){return`${this.message}${this.requestId?` (request ${this.requestId})`:""}`}}t.SupernovaError=o},9932:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.docsImageRefToUrl=t.DocsImageRefType=void 0,function(e){e.resource="Resource",e.figmaNode="FigmaNode"}(o||(t.DocsImageRefType=o={})),t.docsImageRefToUrl=function(e,t,r){var n;if(e)switch(e.type){case o.resource:return null===(n=e.resource)||void 0===n?void 0:n.url;case o.figmaNode:if(!e.figmaNode||!e.figmaNode.sourceId||!e.figmaNode.frameReferenceId)return;return t.resources.getFigmaFrameHostedUrl({designSystemId:r.dsId,versionId:r.versionId},e.figmaNode.frameReferenceId);default:return}}},5673:(e,t)=>{var o;function r(e){switch(e.type){case o.documentationItem:return`@page:${e.documentationItemId}`;case o.pageHeading:return`@page:${e.documentationItemId}#${e.pageHeadingId}`;case o.url:return e.url;default:return}}Object.defineProperty(t,"__esModule",{value:!0}),t.linkAttributeToDocsLink=t.docsLinkToLinkAttributes=t.docsLinkToUrl=t.DocsLinkRefType=void 0,function(e){e.documentationItem="DocumentationItem",e.pageHeading="PageHeading",e.url="Url"}(o||(t.DocsLinkRefType=o={})),t.docsLinkToUrl=r,t.docsLinkToLinkAttributes=function(e){const t=r(e);if(t)return{href:t,target:e.openInNewTab?"_blank":"_self"}},t.linkAttributeToDocsLink=function(e,t){if(!e)return;const r="_blank"===t;if(e.startsWith("@page:")){if(e.includes("#")){const[t,n]=e.replace("@page:","").split("#");return{type:o.pageHeading,documentationItemId:t,pageHeadingId:n,openInNewTab:r}}return{type:o.documentationItem,documentationItemId:e.replace("@page:",""),openInNewTab:r}}return{type:o.url,url:e,openInNewTab:r}}},2657:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockShortcut=t.DocumentationLegacyPageBlockShortcutType=void 0,function(e){e.external="External",e.internal="Internal"}(o||(t.DocumentationLegacyPageBlockShortcutType=o={})),t.DocumentationLegacyPageBlockShortcut=class{constructor(e){var t;e.url?this.type=o.external:this.type=o.internal,this.title=this.shortcutTitleFromModel(e,this.type),this.description=this.shortcutDescriptionFromModel(e,this.type),this.previewUrl=this.shortcutPreviewUrlFromModel(e),this.type===o.internal&&(null===(t=e.documentationItemPreview)||void 0===t?void 0:t.valid)&&e.documentationItemId?this.internalId=e.documentationItemId:(this.internalId=null,this.type===o.external&&e.url?this.externalUrl=e.url:this.externalUrl=null)}shortcutTitleFromModel(e,t){var r,n,i,a,l;let s=null;return e.title&&e.title.trim().length>0?s=e.title:t===o.internal?s=null!==(n=null===(r=e.documentationItemPreview)||void 0===r?void 0:r.title)&&void 0!==n?n:null:t===o.external&&(s=null!==(l=null!==(a=null===(i=e.urlPreview)||void 0===i?void 0:i.title)&&void 0!==a?a:e.url)&&void 0!==l?l:null),s&&0!==s.trim().length?s:null}shortcutDescriptionFromModel(e,t){var r;let n=null;return e.description&&e.description.trim().length>0?n=e.description:t===o.external&&(n=null===(r=e.urlPreview)||void 0===r?void 0:r.description),n&&0!==n.trim().length?n:null}shortcutPreviewUrlFromModel(e){var t,o,r,n,i;return null!==(i=null!==(r=null!==(t=e.assetUrl)&&void 0!==t?t:null===(o=e.asset)||void 0===o?void 0:o.url)&&void 0!==r?r:null===(n=e.urlPreview)||void 0===n?void 0:n.thumbnailUrl)&&void 0!==i?i:null}}},7476:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.TextAlignment=t.Alignment=void 0,function(e){e.left="Left",e.center="Center",e.stretch="Stretch"}(o||(t.Alignment=o={})),function(e){e.left="Left",e.center="Center",e.right="Right"}(r||(t.TextAlignment=r={}))},8738:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetFormat=void 0,function(e){e.png="png",e.pdf="pdf",e.svg="svg"}(o||(t.AssetFormat=o={}))},915:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScale=void 0,function(e){e.x1="x1",e.x2="x2",e.x3="x3",e.x4="x4"}(o||(t.AssetScale=o={}))},899:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.AssetScaleType=void 0,function(e){e.aspectFill="AspectFill",e.aspectFit="AspectFit"}(o||(t.AssetScaleType=o={}))},6192:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.BlurType=void 0,function(e){e.layer="Layer",e.background="Background"}(o||(t.BlurType=o={}))},1160:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_POSITIONS=t.BorderPosition=void 0,function(e){e.inside="Inside",e.center="Center",e.outside="Outside"}(o||(t.BorderPosition=o={})),t.ALL_BORDER_POSITIONS=[o.inside,o.center,o.outside]},4546:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ALL_BORDER_STYLES=t.BorderStyle=void 0,function(e){e.dashed="Dashed",e.dotted="Dotted",e.solid="Solid",e.groove="Groove"}(o||(t.BorderStyle=o={})),t.ALL_BORDER_STYLES=[o.dashed,o.dotted,o.solid,o.groove]},8042:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ImportWarningType=void 0,function(e){e.UnsupportedFill="UnsupportedFill",e.UnsupportedStroke="UnsupportedStroke",e.UnsupportedEffect="UnsupportedEffect",e.StyleNotApplied="StyleNotApplied",e.NoPublishedStyles="NoPublishedStyles",e.NoPublishedComponents="NoPublishedComponents",e.NoPublishedAssets="NoPublishedAssets",e.NoVersionFound="NoVersionFound",e.ComponentHasNoThumbnail="ComponentHasNoThumbnail",e.DuplicateImportedStyleId="DuplicateImportedStyleId",e.DuplicateImportedStylePath="DuplicateImportedStylePath",e.NoPublishedElements="NoPublishedElements",e.NoUnpublishedStyles="NoUnpublishedStyles"}(o||(t.ImportWarningType=o={}))},5695:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainErrorCode=void 0,function(e){e.generalError="GeneralError",e.dnsNotConfigured="DNSNotConfigured",e.maintenance="Maintenance"}(o||(t.CustomDomainErrorCode=o={}))},7737:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDomainState=void 0,function(e){e.initial="Initial",e.domainSetupInProgress="DomainSetupInProgress",e.domainSetupFailed="DomainSetupFailed",e.domainSetupsSucces="DomainSetupSuccess",e.sslSetupInProgress="SSLSetupInProgress",e.sslSetupFailed="SSLSetupFailed",e.sslSetupSuccess="SSLSetupSuccess"}(o||(t.CustomDomainState=o={}))},5651:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorDataType=void 0,function(e){e.item="Item",e.token="Token",e.asset="Asset",e.component="Component",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockBehaviorDataType=o={}))},3733:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockBehaviorSelectionType=void 0,function(e){e.entity="Entity",e.group="Group",e.entityAndGroup="EntityAndGroup"}(o||(t.DocsBlockBehaviorSelectionType=o={}))},8890:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockImagePropertyAspectRatio=void 0,function(e){e.auto="Auto",e.square="Square",e.landscape="Landscape",e.portrait="Portrait",e.wide="Wide"}(o||(t.DocsBlockImagePropertyAspectRatio=o={}))},9377:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemEntityType=void 0,function(e){e.token="Token",e.tokenGroup="TokenGroup",e.asset="Asset",e.assetGroup="AssetGroup",e.component="Component",e.componentGroup="ComponentGroup"}(o||(t.DocsBlockItemEntityType=o={}))},5883:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockItemPropertyOptionRenderingStyle=o={}))},8061:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyRichTextStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.ol="OL",e.ul="UL"}(o||(t.DocsBlockItemPropertyRichTextStyle=o={}))},7479:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyTextStyle=void 0,function(e){e.small="Small",e.regular="Regular",e.bold="Bold"}(o||(t.DocsBlockItemPropertyTextStyle=o={}))},6839:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemPropertyType=void 0,function(e){e.richText="RichText",e.multiRichText="MultiRichText",e.text="Text",e.richTextEditor="RichTextEditor",e.boolean="Boolean",e.number="Number",e.singleSelect="SingleSelect",e.multiSelect="MultiSelect",e.image="Image",e.token="Token",e.tokenType="TokenType",e.tokenProperty="TokenProperty",e.component="Component",e.componentProperty="ComponentProperty",e.asset="Asset",e.assetProperty="AssetProperty",e.embedURL="EmbedURL",e.url="URL",e.markdown="Markdown",e.code="Code",e.codeSandbox="CodeSandbox",e.table="Table",e.divider="Divider",e.storybook="Storybook",e.color="Color",e.figmaNode="FigmaNode",e.figmaComponent="FigmaComponent"}(o||(t.DocsBlockItemPropertyType=o={}))},8095:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutType=void 0,function(e){e.column="Column",e.row="Row"}(o||(t.DocsBlockItemVariantLayoutType=o={}))},7291:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockItemVariantLayoutWidth=void 0,function(e){e.c1="1",e.c2="2",e.c3="3",e.c4="4",e.c5="5",e.c6="6",e.c7="7",e.c8="8",e.c9="9",e.c10="10",e.c11="11",e.c12="12"}(o||(t.DocsBlockItemVariantLayoutWidth=o={}))},9133:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionColor=void 0,function(e){e.green="Green",e.red="Red",e.yellow="Yellow",e.blue="Blue",e.purple="Purple",e.orange="Orange",e.pink="Pink",e.teal="Teal",e.grey="Grey",e.lightGrey="LightGrey",e.cyan="Cyan",e.fuchsia="Fuchsia"}(o||(t.DocsBlockOptionColor=o={}))},5963:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockOptionRenderingStyle=void 0,function(e){e.segmentedControl="SegmentedControl",e.toggleButton="ToggleButton",e.select="Select",e.checkbox="Checkbox"}(o||(t.DocsBlockOptionRenderingStyle=o={}))},6644:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockRichTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.quote="Quote",e.callout="Callout",e.default="Default"}(o||(t.DocsBlockRichTextPropertyStyle=o={}))},306:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsBlockTextPropertyStyle=void 0,function(e){e.title1="Title1",e.title2="Title2",e.title3="Title3",e.title4="Title4",e.title5="Title5",e.default="Default",e.defaultBold="DefaultBold",e.defaultSemibold="DefaultSemibold",e.small="Small",e.smallBold="SmallBold",e.smallSemibold="SmallSemibold",e.custom="Custom"}(o||(t.DocsBlockTextPropertyStyle=o={}))},4068:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocsEntityGroupBehavior=o={}))},1233:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsEntityType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocsEntityType=o={}))},7971:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocsSectionType=void 0,function(e){e.plain="Plain",e.tabs="Tabs"}(o||(t.DocsSectionType=o={}))},5102:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyCalloutType=void 0,function(e){e.info="Info",e.success="Success",e.warning="Warning",e.error="Error"}(o||(t.DocumentationLegacyCalloutType=o={}))},2123:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyGroupBehavior=void 0,function(e){e.group="Group",e.tabs="Tabs"}(o||(t.DocumentationLegacyGroupBehavior=o={}))},9896:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyHeadingType=void 0,function(e){e[e.h1=1]="h1",e[e.h2=2]="h2",e[e.h3=3]="h3"}(o||(t.DocumentationLegacyHeadingType=o={}))},7379:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyItemType=void 0,function(e){e.group="Group",e.page="Page"}(o||(t.DocumentationLegacyItemType=o={}))},1423:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageAssetType=void 0,function(e){e.image="image",e.figmaFrame="figmaFrame"}(o||(t.DocumentationLegacyPageAssetType=o={}))},1601:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockThemeType=void 0,function(e){e.override="Override",e.comparison="Comparison"}(o||(t.DocumentationLegacyPageBlockThemeType=o={}))},1846:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationLegacyPageBlockType=void 0,function(e){e.text="Text",e.heading="Heading",e.code="Code",e.unorderedList="UnorderedList",e.orderedList="OrderedList",e.quote="Quote",e.callout="Callout",e.divider="Divider",e.image="Image",e.token="Token",e.tokenList="TokenList",e.tokenGroup="TokenGroup",e.shortcuts="Shortcuts",e.link="Link",e.figmaEmbed="FigmaEmbed",e.youtubeEmbed="YoutubeEmbed",e.storybookEmbed="StorybookEmbed",e.genericEmbed="Embed",e.figmaFrames="FigmaFrames",e.custom="Custom",e.renderCode="RenderCode",e.componentAssets="ComponentAssets",e.column="Column",e.columnItem="ColumnItem",e.tabs="Tabs",e.tabItem="TabItem",e.table="Table",e.tableCell="TableCell",e.tableRow="TableRow"}(o||(t.DocumentationLegacyPageBlockType=o={}))},1255:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameAlignment=void 0,function(e){e.frameHeight="FrameHeight",e.center="Center"}(o||(t.FrameAlignment=o={}))},3718:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.FrameLayout=void 0,function(e){e.c8="C8",e.c7="C7",e.c6="C6",e.c5="C5",e.c4="C4",e.c3="C3",e.c2="C2",e.c1="C1",e.c175="C1_75"}(o||(t.FrameLayout=o={}))},1:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.GradientType=void 0,function(e){e.linear="Linear",e.radial="Radial",e.angular="Angular"}(o||(t.GradientType=o={}))},934:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.IconSet=void 0,function(e){e.checkCircle="CheckCircle",e.crossCircle="CrossCircle",e.alert="Alert"}(o||(t.IconSet=o={}))},2674:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.RichTextSpanAttributeType=void 0,function(e){e.bold="Bold",e.italic="Italic",e.link="Link",e.strikethrough="Strikethrough",e.code="Code"}(o||(t.RichTextSpanAttributeType=o={}))},9125:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.ShadowType=void 0,function(e){e.drop="Drop",e.inner="Inner"}(o||(t.ShadowType=o={}))},4652:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.SourceType=void 0,function(e){e.figma="Figma",e.tokenStudio="TokenStudio",e.figmaVariablesPlugin="FigmaVariablesPlugin"}(o||(t.SourceType=o={}))},922:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextCase=void 0,function(e){e.original="Original",e.upper="Upper",e.lower="Lower",e.camel="Camel",e.smallCaps="SmallCaps"}(o||(t.TextCase=o={}))},7040:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.TextDecoration=void 0,function(e){e.original="None",e.underline="Underline",e.strikethrough="Strikethrough"}(o||(t.TextDecoration=o={}))},3788:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.DT_TOKEN_TYPES=t.tokenTypeIsReferencable=t.REFERENCABLE_TOKEN_TYPES=t.REPLACABLE_TOKEN_TYPES=t.tokenTypeIsNonPure=t.tokenTypeIsPure=t.PURE_TOKEN_TYPES=t.ALL_TOKEN_TYPES=t.MS_DIMENSION_TOKEN_TYPES=t.RAW_DIMENSION_TOKEN_TYPES=t.DIMENSION_TOKEN_TYPES=t.OPTION_TOKEN_TYPES=t.STRING_TOKEN_TYPES=t.TokenType=void 0,function(e){e.color="Color",e.typography="Typography",e.shadow="Shadow",e.border="Border",e.gradient="Gradient",e.blur="Blur",e.radius="BorderRadius",e.borderWidth="BorderWidth",e.duration="Duration",e.fontSize="FontSize",e.dimension="Dimension",e.letterSpacing="LetterSpacing",e.lineHeight="LineHeight",e.opacity="Opacity",e.paragraphSpacing="ParagraphSpacing",e.size="Size",e.space="Space",e.zIndex="ZIndex",e.textDecoration="TextDecoration",e.textCase="TextCase",e.visibility="Visibility",e.fontFamily="FontFamily",e.fontWeight="FontWeight",e.string="String",e.productCopy="ProductCopy"}(o||(t.TokenType=o={})),t.STRING_TOKEN_TYPES=[o.string,o.productCopy,o.fontFamily,o.fontWeight],t.OPTION_TOKEN_TYPES=[o.textCase,o.textDecoration,o.visibility],t.DIMENSION_TOKEN_TYPES=[o.dimension,o.size,o.space,o.opacity,o.fontSize,o.lineHeight,o.letterSpacing,o.paragraphSpacing,o.borderWidth,o.radius,o.duration,o.zIndex],t.RAW_DIMENSION_TOKEN_TYPES=[o.opacity,o.zIndex],t.MS_DIMENSION_TOKEN_TYPES=[o.duration],t.ALL_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES,o.color,o.gradient,o.border,o.radius,o.shadow,o.typography,o.blur],t.PURE_TOKEN_TYPES=[...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.tokenTypeIsPure=e=>t.PURE_TOKEN_TYPES.includes(e),t.tokenTypeIsNonPure=e=>!(0,t.tokenTypeIsPure)(e),t.REPLACABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,...t.STRING_TOKEN_TYPES,...t.OPTION_TOKEN_TYPES],t.REFERENCABLE_TOKEN_TYPES=[o.color,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.textCase,o.textDecoration],t.tokenTypeIsReferencable=e=>t.REFERENCABLE_TOKEN_TYPES.includes(e),t.DT_TOKEN_TYPES=[o.color,o.shadow,o.gradient,o.typography,o.border,...t.DIMENSION_TOKEN_TYPES,o.fontFamily,o.fontWeight,o.string,...t.OPTION_TOKEN_TYPES]},8607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.MS_UNITS=t.PX_UNITS=t.RAW_UNITS=t.LINE_HEIGHT_UNITS=t.SIZE_UNITS=t.Unit=void 0,function(e){e.pixels="Pixels",e.percent="Percent",e.rem="Rem",e.ms="Ms",e.raw="Raw"}(o||(t.Unit=o={})),t.SIZE_UNITS=[o.pixels,o.percent,o.rem],t.LINE_HEIGHT_UNITS=[o.pixels,o.percent,o.rem,o.raw],t.RAW_UNITS=[o.raw],t.PX_UNITS=[o.pixels],t.MS_UNITS=[o.ms]},9478:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.convertRemoteToUserRole=t.UserRole=void 0;const r=o(4379);var n;!function(e){e.owner="Owner",e.admin="Admin",e.creator="Creator",e.contributor="Contributor",e.billing="Billing",e.viewer="Viewer"}(n||(t.UserRole=n={})),t.convertRemoteToUserRole=e=>{switch(e){case"Owner":return n.owner;case"Admin":return n.admin;case"Creator":return n.creator;case"Contributor":return n.contributor;case"Billing":return n.billing;case"Viewer":return n.viewer;default:throw r.SupernovaError.fromMessage(`Unknown role: ${e}`)}}},6141:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.VisibilityType=void 0,function(e){e.visible="Visible",e.hidden="Hidden"}(o||(t.VisibilityType=o={}))},6298:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryAuthType=void 0,function(e){e.basic="Basic",e.bearer="Bearer"}(o||(t.WorkspaceNPMRegistryAuthType=o={}))},7968:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceNPMRegistryType=void 0,function(e){e.npmJS="NPMJS",e.gitHub="GitHub",e.azureDevOps="AzureDevOps",e.artifactory="Artifactory",e.custom="Custom"}(o||(t.WorkspaceNPMRegistryType=o={}))},5503:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionPlanInterval=void 0,function(e){e.yearly="yearly",e.monthly="monthly"}(o||(t.WorkspaceSubscriptionPlanInterval=o={}))},4290:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionProductCode=void 0,function(e){e.free="free",e.team="team",e.teamTest="team_test",e.company="company",e.enterprise="enterprise"}(o||(t.WorkspaceSubscriptionProductCode=o={}))},3607:(e,t)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceSubscriptionStatus=void 0,function(e){e.active="active",e.gracePeriod="gracePeriod",e.cancelled="cancelled",e.suspended="suspended"}(o||(t.WorkspaceSubscriptionStatus=o={}))},2802:(e,t)=>{var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.PulsarExecutor=t.OutputFileType=void 0,function(e){e.copyRemoteUrl="copyRemoteUrl",e.text="text",e.binary="binary"}(o||(t.OutputFileType=o={})),function(e){e.supernova="supernova",e.local="local"}(r||(t.PulsarExecutor=r={}))}},o={};function r(t){var n=o[t];if(void 0!==n)return n.exports;var i=o[t]={exports:{}};return e[t](i,i.exports,r),i.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.TokenType=e.TextDecoration=e.TextCase=e.ShadowType=e.RichTextSpanAttributeType=e.GradientType=e.FrameLayout=e.FrameAlignment=e.IconSet=e.SourceType=e.DocsImageRefType=e.DocsLinkRefType=e.DocsSectionType=e.DocsEntityType=e.DocsEntityGroupBehavior=e.DocsBlockTextPropertyStyle=e.DocsBlockRichTextPropertyStyle=e.DocsBlockOptionColor=e.DocsBlockOptionRenderingStyle=e.DocsBlockItemVariantLayoutWidth=e.DocsBlockItemVariantLayoutType=e.DocsBlockItemPropertyType=e.DocsBlockItemPropertyTextStyle=e.DocsBlockItemPropertyRichTextStyle=e.DocsBlockItemPropertyOptionRenderingStyle=e.DocsBlockItemEntityType=e.DocsBlockImagePropertyAspectRatio=e.DocsBlockBehaviorSelectionType=e.DocsBlockBehaviorDataType=e.DocumentationLegacyPageBlockShortcutType=e.DocumentationLegacyPageBlockThemeType=e.DocumentationLegacyPageBlockType=e.DocumentationLegacyPageAssetType=e.DocumentationLegacyItemType=e.DocumentationLegacyHeadingType=e.DocumentationLegacyGroupBehavior=e.DocumentationLegacyCalloutType=e.BorderStyle=e.BorderPosition=e.BlurType=e.AssetScaleType=e.AssetScale=e.AssetFormat=e.Alignment=e.ALL_TOKEN_TYPES=e.ALL_BORDER_STYLES=e.ALL_BORDER_POSITIONS=e.OPTION_TOKEN_TYPES=e.STRING_TOKEN_TYPES=e.DIMENSION_TOKEN_TYPES=void 0,e.PulsarExecutor=e.OutputFileType=e.CustomDomainState=e.CustomDomainErrorCode=e.ImportWarningType=e.WorkspaceNPMRegistryType=e.WorkspaceNPMRegistryAuthType=e.WorkspaceSubscriptionStatus=e.WorkspaceSubscriptionProductCode=e.WorkspaceSubscriptionPlanInterval=e.VisibilityType=e.UserRole=e.Unit=void 0;var t=r(3788);Object.defineProperty(e,"DIMENSION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.DIMENSION_TOKEN_TYPES}}),Object.defineProperty(e,"STRING_TOKEN_TYPES",{enumerable:!0,get:function(){return t.STRING_TOKEN_TYPES}}),Object.defineProperty(e,"OPTION_TOKEN_TYPES",{enumerable:!0,get:function(){return t.OPTION_TOKEN_TYPES}});var o=r(1160);Object.defineProperty(e,"ALL_BORDER_POSITIONS",{enumerable:!0,get:function(){return o.ALL_BORDER_POSITIONS}});var i=r(4546);Object.defineProperty(e,"ALL_BORDER_STYLES",{enumerable:!0,get:function(){return i.ALL_BORDER_STYLES}});var a=r(3788);Object.defineProperty(e,"ALL_TOKEN_TYPES",{enumerable:!0,get:function(){return a.ALL_TOKEN_TYPES}});var l=r(7476);Object.defineProperty(e,"Alignment",{enumerable:!0,get:function(){return l.Alignment}});var s=r(8738);Object.defineProperty(e,"AssetFormat",{enumerable:!0,get:function(){return s.AssetFormat}});var c=r(915);Object.defineProperty(e,"AssetScale",{enumerable:!0,get:function(){return c.AssetScale}});var u=r(899);Object.defineProperty(e,"AssetScaleType",{enumerable:!0,get:function(){return u.AssetScaleType}});var p=r(6192);Object.defineProperty(e,"BlurType",{enumerable:!0,get:function(){return p.BlurType}});var d=r(1160);Object.defineProperty(e,"BorderPosition",{enumerable:!0,get:function(){return d.BorderPosition}});var m=r(4546);Object.defineProperty(e,"BorderStyle",{enumerable:!0,get:function(){return m.BorderStyle}});var y=r(5102);Object.defineProperty(e,"DocumentationLegacyCalloutType",{enumerable:!0,get:function(){return y.DocumentationLegacyCalloutType}});var T=r(2123);Object.defineProperty(e,"DocumentationLegacyGroupBehavior",{enumerable:!0,get:function(){return T.DocumentationLegacyGroupBehavior}});var f=r(9896);Object.defineProperty(e,"DocumentationLegacyHeadingType",{enumerable:!0,get:function(){return f.DocumentationLegacyHeadingType}});var g=r(7379);Object.defineProperty(e,"DocumentationLegacyItemType",{enumerable:!0,get:function(){return g.DocumentationLegacyItemType}});var S=r(1423);Object.defineProperty(e,"DocumentationLegacyPageAssetType",{enumerable:!0,get:function(){return S.DocumentationLegacyPageAssetType}});var h=r(1846);Object.defineProperty(e,"DocumentationLegacyPageBlockType",{enumerable:!0,get:function(){return h.DocumentationLegacyPageBlockType}});var b=r(1601);Object.defineProperty(e,"DocumentationLegacyPageBlockThemeType",{enumerable:!0,get:function(){return b.DocumentationLegacyPageBlockThemeType}});var v=r(2657);Object.defineProperty(e,"DocumentationLegacyPageBlockShortcutType",{enumerable:!0,get:function(){return v.DocumentationLegacyPageBlockShortcutType}});var P=r(5651);Object.defineProperty(e,"DocsBlockBehaviorDataType",{enumerable:!0,get:function(){return P.DocsBlockBehaviorDataType}});var k=r(3733);Object.defineProperty(e,"DocsBlockBehaviorSelectionType",{enumerable:!0,get:function(){return k.DocsBlockBehaviorSelectionType}});var O=r(8890);Object.defineProperty(e,"DocsBlockImagePropertyAspectRatio",{enumerable:!0,get:function(){return O.DocsBlockImagePropertyAspectRatio}});var C=r(9377);Object.defineProperty(e,"DocsBlockItemEntityType",{enumerable:!0,get:function(){return C.DocsBlockItemEntityType}});var _=r(5883);Object.defineProperty(e,"DocsBlockItemPropertyOptionRenderingStyle",{enumerable:!0,get:function(){return _.DocsBlockItemPropertyOptionRenderingStyle}});var I=r(8061);Object.defineProperty(e,"DocsBlockItemPropertyRichTextStyle",{enumerable:!0,get:function(){return I.DocsBlockItemPropertyRichTextStyle}});var N=r(7479);Object.defineProperty(e,"DocsBlockItemPropertyTextStyle",{enumerable:!0,get:function(){return N.DocsBlockItemPropertyTextStyle}});var D=r(6839);Object.defineProperty(e,"DocsBlockItemPropertyType",{enumerable:!0,get:function(){return D.DocsBlockItemPropertyType}});var x=r(8095);Object.defineProperty(e,"DocsBlockItemVariantLayoutType",{enumerable:!0,get:function(){return x.DocsBlockItemVariantLayoutType}});var E=r(7291);Object.defineProperty(e,"DocsBlockItemVariantLayoutWidth",{enumerable:!0,get:function(){return E.DocsBlockItemVariantLayoutWidth}});var j=r(5963);Object.defineProperty(e,"DocsBlockOptionRenderingStyle",{enumerable:!0,get:function(){return j.DocsBlockOptionRenderingStyle}});var B=r(9133);Object.defineProperty(e,"DocsBlockOptionColor",{enumerable:!0,get:function(){return B.DocsBlockOptionColor}});var R=r(6644);Object.defineProperty(e,"DocsBlockRichTextPropertyStyle",{enumerable:!0,get:function(){return R.DocsBlockRichTextPropertyStyle}});var L=r(306);Object.defineProperty(e,"DocsBlockTextPropertyStyle",{enumerable:!0,get:function(){return L.DocsBlockTextPropertyStyle}});var F=r(4068);Object.defineProperty(e,"DocsEntityGroupBehavior",{enumerable:!0,get:function(){return F.DocsEntityGroupBehavior}});var M=r(1233);Object.defineProperty(e,"DocsEntityType",{enumerable:!0,get:function(){return M.DocsEntityType}});var A=r(7971);Object.defineProperty(e,"DocsSectionType",{enumerable:!0,get:function(){return A.DocsSectionType}});var w=r(5673);Object.defineProperty(e,"DocsLinkRefType",{enumerable:!0,get:function(){return w.DocsLinkRefType}});var H=r(9932);Object.defineProperty(e,"DocsImageRefType",{enumerable:!0,get:function(){return H.DocsImageRefType}});var U=r(4652);Object.defineProperty(e,"SourceType",{enumerable:!0,get:function(){return U.SourceType}});var $=r(934);Object.defineProperty(e,"IconSet",{enumerable:!0,get:function(){return $.IconSet}});var W=r(1255);Object.defineProperty(e,"FrameAlignment",{enumerable:!0,get:function(){return W.FrameAlignment}});var V=r(3718);Object.defineProperty(e,"FrameLayout",{enumerable:!0,get:function(){return V.FrameLayout}});var G=r(1);Object.defineProperty(e,"GradientType",{enumerable:!0,get:function(){return G.GradientType}});var Y=r(2674);Object.defineProperty(e,"RichTextSpanAttributeType",{enumerable:!0,get:function(){return Y.RichTextSpanAttributeType}});var K=r(9125);Object.defineProperty(e,"ShadowType",{enumerable:!0,get:function(){return K.ShadowType}});var z=r(922);Object.defineProperty(e,"TextCase",{enumerable:!0,get:function(){return z.TextCase}});var q=r(7040);Object.defineProperty(e,"TextDecoration",{enumerable:!0,get:function(){return q.TextDecoration}});var J=r(3788);Object.defineProperty(e,"TokenType",{enumerable:!0,get:function(){return J.TokenType}});var Z=r(8607);Object.defineProperty(e,"Unit",{enumerable:!0,get:function(){return Z.Unit}});var X=r(9478);Object.defineProperty(e,"UserRole",{enumerable:!0,get:function(){return X.UserRole}});var Q=r(6141);Object.defineProperty(e,"VisibilityType",{enumerable:!0,get:function(){return Q.VisibilityType}});var ee=r(5503);Object.defineProperty(e,"WorkspaceSubscriptionPlanInterval",{enumerable:!0,get:function(){return ee.WorkspaceSubscriptionPlanInterval}});var te=r(4290);Object.defineProperty(e,"WorkspaceSubscriptionProductCode",{enumerable:!0,get:function(){return te.WorkspaceSubscriptionProductCode}});var oe=r(3607);Object.defineProperty(e,"WorkspaceSubscriptionStatus",{enumerable:!0,get:function(){return oe.WorkspaceSubscriptionStatus}});var re=r(6298);Object.defineProperty(e,"WorkspaceNPMRegistryAuthType",{enumerable:!0,get:function(){return re.WorkspaceNPMRegistryAuthType}});var ne=r(7968);Object.defineProperty(e,"WorkspaceNPMRegistryType",{enumerable:!0,get:function(){return ne.WorkspaceNPMRegistryType}});var ie=r(8042);Object.defineProperty(e,"ImportWarningType",{enumerable:!0,get:function(){return ie.ImportWarningType}});var ae=r(5695);Object.defineProperty(e,"CustomDomainErrorCode",{enumerable:!0,get:function(){return ae.CustomDomainErrorCode}});var le=r(7737);Object.defineProperty(e,"CustomDomainState",{enumerable:!0,get:function(){return le.CustomDomainState}});var se=r(2802);Object.defineProperty(e,"OutputFileType",{enumerable:!0,get:function(){return se.OutputFileType}}),Object.defineProperty(e,"PulsarExecutor",{enumerable:!0,get:function(){return se.PulsarExecutor}})})();var i=t;for(var a in n)i[a]=n[a];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})()},"./src/constants/defaults.ts":
/*!***********************************!*\
  !*** ./src/constants/defaults.ts ***!
  \***********************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_TOKEN_PREFIXES=t.DEFAULT_STYLE_FILE_NAMES=void 0,t.DEFAULT_STYLE_FILE_NAMES={Color:"color.json",Typography:"typography.json",Dimension:"dimension.json",Size:"size.json",Space:"space.json",Opacity:"opacity.json",FontSize:"font-size.json",LineHeight:"line-height.json",LetterSpacing:"letter-spacing.json",ParagraphSpacing:"paragraph-spacing.json",BorderWidth:"border-width.json",BorderRadius:"border-radius.json",Duration:"duration.json",ZIndex:"z-index.json",Shadow:"shadow.json",Border:"border.json",Gradient:"gradient.json",String:"string.json",ProductCopy:"product-copy.json",FontFamily:"font-family.json",FontWeight:"font-weight.json",TextCase:"text-case.json",TextDecoration:"text-decoration.json",Visibility:"visibility.json",Blur:"blur.json"},t.DEFAULT_TOKEN_PREFIXES={Color:"color",Typography:"typography",Dimension:"dimension",Size:"size",Space:"space",Opacity:"opacity",FontSize:"fontSize",LineHeight:"lineHeight",LetterSpacing:"letterSpacing",ParagraphSpacing:"paragraphSpacing",BorderWidth:"borderWidth",BorderRadius:"borderRadius",Duration:"duration",ZIndex:"zIndex",Shadow:"shadow",Border:"border",Gradient:"gradient",String:"string",ProductCopy:"productCopy",FontFamily:"fontFamily",FontWeight:"fontWeight",TextCase:"textCase",TextDecoration:"textDecoration",Visibility:"visibility",Blur:"blur"}},"./src/content/token.ts":
/*!******************************!*\
  !*** ./src/content/token.ts ***!
  \******************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTokenPrefix=function(e,t=!1){if(!n.exportConfiguration.useTokenTypePrefixes&&!t)return"";return n.exportConfiguration.customizeTokenPrefixes?n.exportConfiguration.tokenPrefixes[e].trim():i.DEFAULT_TOKEN_PREFIXES[e]},t.tokenObjectKeyName=s,t.resetTokenNameTracking=function(){(0,l.resetNameTracking)()},t.convertedToken=function(e,t,o,i=[]){const l=s(e,o,!1,i),c=r.CSSHelper.tokenToCSS(e,t,{allowReferences:n.exportConfiguration.useReferences,decimals:n.exportConfiguration.colorPrecision,colorFormat:n.exportConfiguration.colorFormat,forceRemUnit:n.exportConfiguration.forceRemUnit,remBase:n.exportConfiguration.remBase,tokenToVariableRef:e=>s(e,o,!1,i)}),u=" ".repeat(n.exportConfiguration.indent),p=(0,a.formatTokenValue)(c);return n.exportConfiguration.showDescriptions&&e.description?`${u}// ${e.description.trim()}\n${u}${l}: ${p},`:`${u}${l}: ${p},`};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../constants/defaults */"./src/constants/defaults.ts"),a=o(/*! ../utils/value-formatter */"./src/utils/value-formatter.ts"),l=o(/*! ../utils/token-hierarchy */"./src/utils/token-hierarchy.ts");function s(e,t,o=!1,i=[]){let a=null;if("collectionPathAndName"===n.exportConfiguration.tokenNameStructure&&e.collectionId){const t=i.find((t=>t.persistentId===e.collectionId));a=t?.name??null}const l="nameOnly"!==n.exportConfiguration.tokenNameStructure?t.find((t=>t.id===e.parentGroupId)):null;return r.NamingHelper.codeSafeVariableNameForToken(e,n.exportConfiguration.tokenNameStyle,l??null,["",a].filter(Boolean).join("-"))}},"./src/files/style-file.ts":
/*!*********************************!*\
  !*** ./src/files/style-file.ts ***!
  \*********************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.styleOutputFile=function(e,t,o,p="",d,m=[]){if(!n.exportConfiguration.exportBaseValues&&!p&&n.exportConfiguration.exportThemesAs!==c.ThemeExportStyle.NestedThemes)return null;let y=t.filter((t=>t.tokenType===e));if(p&&d&&n.exportConfiguration.exportOnlyThemedTokens&&(y=r.ThemeHelper.filterThemedTokens(y,d),0===y.length))return null;const T=function(e,t,o,a=[],p){if((0,i.resetTokenNameTracking)(),!n.exportConfiguration.generateEmptyFiles&&0===e.length)return null;const d=new Map((p||e).map((e=>[e.id,e])));let m=[...e];"alphabetical"===n.exportConfiguration.tokenSortOrder&&m.sort(((e,o)=>{const r=(0,i.tokenObjectKeyName)(e,t,!0,a),n=(0,i.tokenObjectKeyName)(o,t,!0,a);return r.localeCompare(n)}));const y={};n.exportConfiguration.showGeneratedFileDisclaimer&&(y._comment=n.exportConfiguration.disclaimer);return m.forEach((e=>{(0,i.tokenObjectKeyName)(e,t,!0,a);const p=r.CSSHelper.tokenToCSS(e,d,{allowReferences:n.exportConfiguration.useReferences,decimals:n.exportConfiguration.colorPrecision,colorFormat:n.exportConfiguration.colorFormat,forceRemUnit:n.exportConfiguration.forceRemUnit,remBase:n.exportConfiguration.remBase,tokenToVariableRef:e=>{const t=(0,i.getTokenPrefix)(e.tokenType),o=(e.tokenPath||[]).filter((e=>e&&e.trim().length>0)).map((e=>s.NamingHelper.codeSafeVariableName(e,n.exportConfiguration.tokenNameStyle))),r=(0,l.processTokenName)(e,o);let u=[];switch(t&&u.push(t),n.exportConfiguration.tokenNameStructure){case c.TokenNameStructure.NameOnly:u.push(r);break;case c.TokenNameStructure.CollectionPathAndName:if(e.collectionId){const t=a.find((t=>t.persistentId===e.collectionId));if(t){const e=s.NamingHelper.codeSafeVariableName(t.name,n.exportConfiguration.tokenNameStyle);u.push(e)}}u.push(...o,r);break;case c.TokenNameStructure.PathAndName:u.push(...o,r)}return n.exportConfiguration.globalNamePrefix&&u.unshift(s.NamingHelper.codeSafeVariableName(n.exportConfiguration.globalNamePrefix,n.exportConfiguration.tokenNameStyle)),`{${u.join(".")}}`}}),m=(e.tokenPath||[]).slice(1),T=(0,l.createHierarchicalStructure)(m,e.name,u(p,e,o),e,a,{includeTypePrefix:!1});Object.assign(y,(0,l.deepMerge)(y,T))})),y}(y,o,d,m,t);if(!T)return null;const f=JSON.stringify(T,null,n.exportConfiguration.indent);return r.FileHelper.createTextFile({relativePath:p?`./${p}`:n.exportConfiguration.baseStyleFilePath,fileName:n.exportConfiguration.customizeStyleFileNames?r.FileNameHelper.ensureFileExtension(n.exportConfiguration.styleFileNames[e],".json"):a.DEFAULT_STYLE_FILE_NAMES[e],content:f})},t.combinedStyleOutputFile=function(e,t,o="",a,p=[]){if(!n.exportConfiguration.exportBaseValues&&!o&&n.exportConfiguration.exportThemesAs!==c.ThemeExportStyle.NestedThemes)return null;const d=[...e];if(o&&a&&n.exportConfiguration.exportOnlyThemedTokens&&0===(e=r.ThemeHelper.filterThemedTokens(e,a)).length)return null;const m=function(e,t,o,a=[],p){if((0,i.resetTokenNameTracking)(),!n.exportConfiguration.generateEmptyFiles&&0===e.length)return null;const d=new Map((p||e).map((e=>[e.id,e])));let m=[...e];"alphabetical"===n.exportConfiguration.tokenSortOrder&&m.sort(((e,o)=>{const r=(0,i.tokenObjectKeyName)(e,t,!0,a),n=(0,i.tokenObjectKeyName)(o,t,!0,a);return r.localeCompare(n)}));const y={};n.exportConfiguration.showGeneratedFileDisclaimer&&(y._comment=n.exportConfiguration.disclaimer);y._lastUpdated=(new Date).toISOString(),console.log("Collections:",a.map((e=>({id:e.persistentId,name:e.name}))));const T=new Map;return m.forEach((e=>{let t="primitive";if(e.tokenPath&&e.tokenPath.length>0)t=e.tokenPath[0].toLowerCase();else if(e.collectionId){const o=a.find((t=>t.persistentId===e.collectionId));o&&(t=o.name.toLowerCase())}T.has(t)||T.set(t,[]),T.get(t).push(e)})),T.forEach(((e,p)=>{const m={};e.forEach((e=>{(0,i.tokenObjectKeyName)(e,t,!0,a);const p=r.CSSHelper.tokenToCSS(e,d,{allowReferences:n.exportConfiguration.useReferences,decimals:n.exportConfiguration.colorPrecision,colorFormat:n.exportConfiguration.colorFormat,forceRemUnit:n.exportConfiguration.forceRemUnit,remBase:n.exportConfiguration.remBase,tokenToVariableRef:e=>{const t=(0,i.getTokenPrefix)(e.tokenType),o=(e.tokenPath||[]).filter((e=>e&&e.trim().length>0)).map((e=>s.NamingHelper.codeSafeVariableName(e,n.exportConfiguration.tokenNameStyle))),r=(0,l.processTokenName)(e,o);let u=[];switch(t&&u.push(t),n.exportConfiguration.tokenNameStructure){case c.TokenNameStructure.NameOnly:u.push(r);break;case c.TokenNameStructure.CollectionPathAndName:if(e.collectionId){const t=a.find((t=>t.persistentId===e.collectionId));if(t){const e=s.NamingHelper.codeSafeVariableName(t.name,n.exportConfiguration.tokenNameStyle);u.push(e)}}u.push(...o,r);break;case c.TokenNameStructure.PathAndName:u.push(...o,r)}return n.exportConfiguration.globalNamePrefix&&u.unshift(s.NamingHelper.codeSafeVariableName(n.exportConfiguration.globalNamePrefix,n.exportConfiguration.tokenNameStyle)),`{${u.join(".")}}`}}),y=(e.tokenPath||[]).slice(1),T=(0,l.createHierarchicalStructure)(y,e.name,u(p,e,o),e,a,{includeTypePrefix:!1});Object.assign(m,(0,l.deepMerge)(m,T))})),y[p]=m})),y}(e,t,a,p,d);if(!m)return null;const y=JSON.stringify(m,null,n.exportConfiguration.indent),T=o?`tokens.${o}.json`:"tokens.json";return r.FileHelper.createTextFile({relativePath:"./",fileName:T,content:y})};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../content/token */"./src/content/token.ts"),a=o(/*! ../constants/defaults */"./src/constants/defaults.ts"),l=o(/*! ../utils/token-hierarchy */"./src/utils/token-hierarchy.ts"),s=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),c=o(/*! ../../config */"./config.ts");function u(e,t,o){return e.replace(/['"]/g,"")}},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exportConfiguration=void 0;const r=o(/*! @supernovaio/sdk-exporters */"./node_modules/@supernovaio/sdk-exporters/build/supernova-sdk-typescript.js"),n=o(/*! ../config */"./config.ts"),i=o(/*! ./files/style-file */"./src/files/style-file.ts"),a=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),l=o(/*! ./utils/token-hierarchy */"./src/utils/token-hierarchy.ts");function s(e){return e.filter((e=>null!==e))}t.exportConfiguration=Pulsar.exportConfig(),Pulsar.export((async(e,o)=>{const c={designSystemId:o.dsId,versionId:o.versionId};let u=await e.tokens.getTokens(c),p=await e.tokens.getTokenGroups(c),d=await e.tokens.getTokenCollections(c);if(o.brandId){const t=(await e.brands.getBrands(c)).find((e=>e.id===o.brandId||e.idInVersion===o.brandId));if(!t)throw new Error(`Unable to find brand ${o.brandId}.`);u=u.filter((e=>e.brandId===t.id)),p=p.filter((e=>e.brandId===t.id))}if(o.themeIds&&o.themeIds.length>0){const m=await e.tokens.getTokenThemes(c),y=o.themeIds.map((e=>{const t=m.find((t=>t.id===e||t.idInVersion===e));if(!t)throw new Error(`Unable to find theme ${e}`);return t}));switch(t.exportConfiguration.exportThemesAs){case n.ThemeExportStyle.NestedThemes:if(t.exportConfiguration.fileStructure===n.FileStructure.SingleFile){return s([(0,i.combinedStyleOutputFile)(u,p,"",void 0,d)])}const o=Object.values(r.TokenType).map((o=>{const r=t.exportConfiguration.exportBaseValues?(0,i.styleOutputFile)(o,u,p,"",void 0,d):null,n=y.map((r=>{const n=e.tokens.computeTokensByApplyingThemes(u,u,[r]),a=t.exportConfiguration.exportBaseValues;t.exportConfiguration.exportBaseValues=!1;const l=(0,i.styleOutputFile)(o,n,p,"",r,d);return t.exportConfiguration.exportBaseValues=a,l}));return[r,...n].reduce(((e,o)=>{if(!o)return e;if(!e)return o;const r=(0,l.deepMerge)(JSON.parse(e.content),JSON.parse(o.content));return{...o,content:JSON.stringify(r,null,t.exportConfiguration.indent)}}),null)}));return s(o);case n.ThemeExportStyle.SeparateFiles:if(t.exportConfiguration.fileStructure===n.FileStructure.SingleFile){const o=y.map((t=>{const o=e.tokens.computeTokensByApplyingThemes(u,u,[t]),r=a.ThemeHelper.getThemeIdentifier(t,a.StringCase.camelCase);return(0,i.combinedStyleOutputFile)(o,p,r,t,d)}));return s([t.exportConfiguration.exportBaseValues?(0,i.combinedStyleOutputFile)(u,p,"",void 0,d):null,...o])}const c=y.flatMap((t=>{const o=e.tokens.computeTokensByApplyingThemes(u,u,[t]),n=a.ThemeHelper.getThemeIdentifier(t,a.StringCase.camelCase);return Object.values(r.TokenType).map((e=>(0,i.styleOutputFile)(e,o,p,n,t,d)))}));return s([...t.exportConfiguration.exportBaseValues?Object.values(r.TokenType).map((e=>(0,i.styleOutputFile)(e,u,p,"",void 0,d))):[],...c]);case n.ThemeExportStyle.MergedTheme:if(t.exportConfiguration.fileStructure===n.FileStructure.SingleFile){const o=t.exportConfiguration.exportBaseValues?(0,i.combinedStyleOutputFile)(u,p,"",void 0,d):null,r=e.tokens.computeTokensByApplyingThemes(u,u,y);return s([o,(0,i.combinedStyleOutputFile)(r,p,"themed",y[0],d)])}const m=t.exportConfiguration.exportBaseValues?Object.values(r.TokenType).map((e=>(0,i.styleOutputFile)(e,u,p,"",void 0,d))):[],T=e.tokens.computeTokensByApplyingThemes(u,u,y);return s([...m,...Object.values(r.TokenType).map((e=>(0,i.styleOutputFile)(e,T,p,"themed",y[0],d)))]);case n.ThemeExportStyle.ApplyDirectly:u=e.tokens.computeTokensByApplyingThemes(u,u,y)}}if(t.exportConfiguration.fileStructure===n.FileStructure.SingleFile){return s([t.exportConfiguration.exportBaseValues?(0,i.combinedStyleOutputFile)(u,p,"",void 0,d):null])}return s(t.exportConfiguration.exportBaseValues?Object.values(r.TokenType).map((e=>(0,i.styleOutputFile)(e,u,p,"",void 0,d))):[])}))},"./src/utils/token-hierarchy.ts":
/*!**************************************!*\
  !*** ./src/utils/token-hierarchy.ts ***!
  \**************************************/(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resetNameTracking=function(){a.reset()},t.processTokenName=function(e,t=[],o=[]){let r=a.getSimpleTokenName(e,n.exportConfiguration.tokenNameStyle,!1,t);r.startsWith("_")&&(r=r.slice(1));return r},t.createHierarchicalStructure=function(e,t,o,l,s=[],c={includeTypePrefix:!0}){let u=null;if("collectionPathAndName"===n.exportConfiguration.tokenNameStructure&&l.collectionId){const e=s.find((e=>e.persistentId===l.collectionId));u=e?.name??null}const p=[];if(c.includeTypePrefix){const e=r.NamingHelper.codeSafeVariableName((0,i.getTokenPrefix)(l.tokenType),n.exportConfiguration.tokenNameStyle);e&&p.push(e)}u&&p.push(r.NamingHelper.codeSafeVariableName(u,n.exportConfiguration.tokenNameStyle));const d=[];u&&d.push(u);if("nameOnly"!==n.exportConfiguration.tokenNameStructure){const t=(e||[]).filter((e=>e&&e.trim().length>0)).map((e=>r.NamingHelper.codeSafeVariableName(e,n.exportConfiguration.tokenNameStyle)));d.push(...t)}if("nameOnly"!==n.exportConfiguration.tokenNameStructure){const t=(e||[]).filter((e=>e&&e.trim().length>0)).map((e=>r.NamingHelper.codeSafeVariableName(e,n.exportConfiguration.tokenNameStyle)));p.push(...t)}const m=a.getSimpleTokenName(l,n.exportConfiguration.tokenNameStyle,!1,d);return p.push(m.replace(/^_/,"")),p.reduceRight(((e,t)=>({[t]:e})),o)},t.deepMerge=function e(t,o){if(!t)return o;if(!o)return t;const r={...t},n=o.description||t.description;delete r.description,delete o.description,Object.keys(o).forEach((n=>{o[n]&&"object"==typeof o[n]&&!Array.isArray(o[n])?r[n]=n in t?e(t[n],o[n]):o[n]:r[n]=o[n]})),n&&(r.description=n);return r};const r=o(/*! @supernovaio/export-utils */"../../utils/dist/index.js"),n=o(/*! .. */"./src/index.ts"),i=o(/*! ../content/token */"./src/content/token.ts"),a=new r.TokenNameTracker},"./src/utils/value-formatter.ts":
/*!**************************************!*\
  !*** ./src/utils/value-formatter.ts ***!
  \**************************************/(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatTokenValue=function(e){e.startsWith("${")&&e.endsWith("}")&&(e=e.slice(2,-1));return`{ "value": "${e=e.replace(/['"]/g,"")}" }`}}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,o),i.exports}o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};o("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFvQnp2QixFQUFLM0wsSUFDSCxvQkFBWDI3QixRQUEwQkEsT0FBT0MsYUFDMUM5N0IsT0FBT0MsZUFBZUMsRUFBUzI3QixPQUFPQyxZQUFhLENBQUUzN0IsTUFBTyxXQUU3REgsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sR0FBTyxFQ0ZwQ203QixFQUFvQixpQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1wcmltZS1zdHlsZS1kaWN0aW9uYXJ5Ly4uLy4uL3V0aWxzL2Rpc3QvZW51bXMvQ29sb3JGb3JtYXQuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXByaW1lLXN0eWxlLWRpY3Rpb25hcnkvLi4vLi4vdXRpbHMvZGlzdC9lbnVtcy9TdHJpbmdDYXNlLmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1wcmltZS1zdHlsZS1kaWN0aW9uYXJ5Ly4uLy4uL3V0aWxzL2Rpc3QvaGVscGVycy9DU1NIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXByaW1lLXN0eWxlLWRpY3Rpb25hcnkvLi4vLi4vdXRpbHMvZGlzdC9oZWxwZXJzL0NvbG9ySGVscGVyLmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1wcmltZS1zdHlsZS1kaWN0aW9uYXJ5Ly4uLy4uL3V0aWxzL2Rpc3QvaGVscGVycy9GaWxlSGVscGVyLmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1wcmltZS1zdHlsZS1kaWN0aW9uYXJ5Ly4uLy4uL3V0aWxzL2Rpc3QvaGVscGVycy9GaWxlTmFtZUhlbHBlci5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItcHJpbWUtc3R5bGUtZGljdGlvbmFyeS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvR2VuZXJhbEhlbHBlci5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItcHJpbWUtc3R5bGUtZGljdGlvbmFyeS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvTmFtaW5nSGVscGVyLmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1wcmltZS1zdHlsZS1kaWN0aW9uYXJ5Ly4uLy4uL3V0aWxzL2Rpc3QvaGVscGVycy9UaGVtZUhlbHBlci5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItcHJpbWUtc3R5bGUtZGljdGlvbmFyeS8uLi8uLi91dGlscy9kaXN0L2hlbHBlcnMvVG9rZW5IZWxwZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXByaW1lLXN0eWxlLWRpY3Rpb25hcnkvLi4vLi4vdXRpbHMvZGlzdC9oZWxwZXJzL1Rva2VuTmFtZVRyYWNrZXIuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXByaW1lLXN0eWxlLWRpY3Rpb25hcnkvLi4vLi4vdXRpbHMvZGlzdC9oZWxwZXJzL1dyaXRlVG9rZW5Qcm9wU3RvcmUuanMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXByaW1lLXN0eWxlLWRpY3Rpb25hcnkvLi4vLi4vdXRpbHMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItcHJpbWUtc3R5bGUtZGljdGlvbmFyeS8uLi8uLi91dGlscy9ub2RlX21vZHVsZXMvQHN1cGVybm92YWlvL3Nkay1leHBvcnRlcnMvYnVpbGQvc3VwZXJub3ZhLXNkay10eXBlc2NyaXB0LmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1wcmltZS1zdHlsZS1kaWN0aW9uYXJ5Ly4uLy4uL3V0aWxzL25vZGVfbW9kdWxlcy9jaGFuZ2UtY2FzZS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1wcmltZS1zdHlsZS1kaWN0aW9uYXJ5Ly4vY29uZmlnLnRzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1wcmltZS1zdHlsZS1kaWN0aW9uYXJ5Ly4vbm9kZV9tb2R1bGVzL0BzdXBlcm5vdmFpby9zZGstZXhwb3J0ZXJzL2J1aWxkL3N1cGVybm92YS1zZGstdHlwZXNjcmlwdC5qcyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItcHJpbWUtc3R5bGUtZGljdGlvbmFyeS8uL3NyYy9jb25zdGFudHMvZGVmYXVsdHMudHMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXByaW1lLXN0eWxlLWRpY3Rpb25hcnkvLi9zcmMvY29udGVudC90b2tlbi50cyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItcHJpbWUtc3R5bGUtZGljdGlvbmFyeS8uL3NyYy9maWxlcy9zdHlsZS1maWxlLnRzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1wcmltZS1zdHlsZS1kaWN0aW9uYXJ5Ly4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1wcmltZS1zdHlsZS1kaWN0aW9uYXJ5Ly4vc3JjL3V0aWxzL3Rva2VuLWhpZXJhcmNoeS50cyIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItcHJpbWUtc3R5bGUtZGljdGlvbmFyeS8uL3NyYy91dGlscy92YWx1ZS1mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXByaW1lLXN0eWxlLWRpY3Rpb25hcnkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXByaW1lLXN0eWxlLWRpY3Rpb25hcnkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0BzdXBlcm5vdmFpby9leHBvcnRlci1wcmltZS1zdHlsZS1kaWN0aW9uYXJ5L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQHN1cGVybm92YWlvL2V4cG9ydGVyLXByaW1lLXN0eWxlLWRpY3Rpb25hcnkvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9Ac3VwZXJub3ZhaW8vZXhwb3J0ZXItcHJpbWUtc3R5bGUtZGljdGlvbmFyeS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbG9yRm9ybWF0ID0gdm9pZCAwO1xudmFyIENvbG9yRm9ybWF0O1xuKGZ1bmN0aW9uIChDb2xvckZvcm1hdCkge1xuICAgIC8qKiBFeGFtcGxlOiByZ2IoMjU1LCAwLCAwKSAqL1xuICAgIENvbG9yRm9ybWF0W1wicmdiXCJdID0gXCJyZ2JcIjtcbiAgICAvKiogRXhhbXBsZTogcmdiYSgyNTUsIDAsIDAsIDEpICovXG4gICAgQ29sb3JGb3JtYXRbXCJyZ2JhXCJdID0gXCJyZ2JhXCI7XG4gICAgLyoqIEF1dG9tYXRpY2FsbHkgY2hvb3NlIGJldHdlZW4gcmdiKCkgYW5kIHJnYmEoKSAqL1xuICAgIENvbG9yRm9ybWF0W1wic21hcnRSZ2JhXCJdID0gXCJzbWFydFJnYmFcIjtcbiAgICAvKiogSEVYIC0gZmZmZmZmICovXG4gICAgQ29sb3JGb3JtYXRbXCJoZXg2XCJdID0gXCJoZXg2XCI7XG4gICAgLyoqIEhFWEEgLSBmZmZmZmYwMCAqL1xuICAgIENvbG9yRm9ybWF0W1wiaGV4OFwiXSA9IFwiaGV4OFwiO1xuICAgIC8qKiBFeGFtcGxlOiAjZmYwMDAwICovXG4gICAgQ29sb3JGb3JtYXRbXCJoYXNoSGV4NlwiXSA9IFwiaGFzaEhleDZcIjtcbiAgICAvKiogRXhhbXBsZTogI2ZmMDAwMGZmICovXG4gICAgQ29sb3JGb3JtYXRbXCJoYXNoSGV4OFwiXSA9IFwiaGFzaEhleDhcIjtcbiAgICAvKiogQXV0b21hdGljYWxseSBjaG9vc2UgYmV0d2VlbiAjUlJHR0JCIGFuZCAjUlJHR0JCQUEgKi9cbiAgICBDb2xvckZvcm1hdFtcInNtYXJ0SGFzaEhleFwiXSA9IFwic21hcnRIYXNoSGV4XCI7XG4gICAgLyoqIFNlbGVjdHMgYmV0d2VlbiBoZXggYW5kIGhleGEgbW9kZXMgYmFzZWQgb24gbm9uLW9wYXF1ZSBhbHBoYSAqL1xuICAgIENvbG9yRm9ybWF0W1wic21hcnRIZXhcIl0gPSBcInNtYXJ0SGV4XCI7XG4gICAgLyoqIEV4YW1wbGU6IGhzbCgwLCAxMDAlLCA1MCUpICovXG4gICAgQ29sb3JGb3JtYXRbXCJoc2xcIl0gPSBcImhzbFwiO1xuICAgIC8qKiBFeGFtcGxlOiBoc2xhKDAsIDEwMCUsIDUwJSwgMSkgKi9cbiAgICBDb2xvckZvcm1hdFtcImhzbGFcIl0gPSBcImhzbGFcIjtcbiAgICAvKiogQXV0b21hdGljYWxseSBjaG9vc2UgYmV0d2VlbiBoc2woKSBhbmQgaHNsYSgpICovXG4gICAgQ29sb3JGb3JtYXRbXCJzbWFydEhzbGFcIl0gPSBcInNtYXJ0SHNsYVwiO1xuICAgIC8qKiBpT1MgVUlDb2xvciBjcmVhdGVkIGFzIFVJQ29sb3IocmdiOiAweDAwMDAwMCkud2l0aEFscGhhQ29tcG9uZW50KDAuNSkuIEFscGhhIGNvbXBvbmVudCB3aWxsIGJlIG9tbWl0ZWQgaWYgZnVsbHkgb3BhcXVlICovXG4gICAgQ29sb3JGb3JtYXRbXCJzbWFydFVJQ29sb3JcIl0gPSBcInNtYXJ0VUlDb2xvclwiO1xuICAgIC8qKiBFeGFtcGxlOiBva2xjaCgwLjYgMC4xNSAzMCkgKi9cbiAgICBDb2xvckZvcm1hdFtcIm9rbGNoXCJdID0gXCJva2xjaFwiO1xuICAgIC8qKiBFeGFtcGxlOiBva2xjaCgwLjYgMC4xNSAzMCAvIDEpICovXG4gICAgQ29sb3JGb3JtYXRbXCJva2xjaGFcIl0gPSBcIm9rbGNoYVwiO1xuICAgIC8qKiBBdXRvbWF0aWNhbGx5IGNob29zZSBiZXR3ZWVuIG9rbGNoKCkgYW5kIG9rbGNoKCkgd2l0aCBhbHBoYSAqL1xuICAgIENvbG9yRm9ybWF0W1wic21hcnRPa2xjaFwiXSA9IFwic21hcnRPa2xjaFwiO1xufSkoQ29sb3JGb3JtYXQgfHwgKGV4cG9ydHMuQ29sb3JGb3JtYXQgPSBDb2xvckZvcm1hdCA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyaW5nQ2FzZSA9IHZvaWQgMDtcbi8qKlxuICogRW51bSByZXByZXNlbnRpbmcgZGlmZmVyZW50IHN0cmluZyBjYXNlIGZvcm1hdHMgdXNlZCBmb3IgbmFtaW5nIHRva2VucyBhbmQgdmFyaWFibGVzXG4gKiBFeGFtcGxlcyBhcmUgc2hvd24gZm9yIHRoZSBpbnB1dDogXCJoZWxsbyB3b3JsZCBleGFtcGxlIDEyM1wiXG4gKi9cbnZhciBTdHJpbmdDYXNlO1xuKGZ1bmN0aW9uIChTdHJpbmdDYXNlKSB7XG4gICAgLyoqIEV4YW1wbGU6IFwiaGVsbG9Xb3JsZEV4YW1wbGUxMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJjYW1lbENhc2VcIl0gPSBcImNhbWVsQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcIkhlbGxvIFdvcmxkIEV4YW1wbGUgMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wiY2FwaXRhbENhc2VcIl0gPSBcImNhcGl0YWxDYXNlXCI7XG4gICAgLyoqIEV4YW1wbGU6IFwiSEVMTE9fV09STERfRVhBTVBMRV8xMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJjb25zdGFudENhc2VcIl0gPSBcImNvbnN0YW50Q2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcImhlbGxvLndvcmxkLmV4YW1wbGUuMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wiZG90Q2FzZVwiXSA9IFwiZG90Q2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcIkhlbGxvLVdvcmxkLUV4YW1wbGUtMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1widHJhaW5DYXNlXCJdID0gXCJ0cmFpbkNhc2VcIjtcbiAgICAvKiogRXhhbXBsZTogXCJoZWxsbyB3b3JsZCBleGFtcGxlIDEyM1wiICovXG4gICAgU3RyaW5nQ2FzZVtcIm5vQ2FzZVwiXSA9IFwibm9DYXNlXCI7XG4gICAgLyoqIEV4YW1wbGU6IFwiaGVsbG8td29ybGQtZXhhbXBsZS0xMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJrZWJhYkNhc2VcIl0gPSBcImtlYmFiQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcIkhlbGxvV29ybGRFeGFtcGxlMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wicGFzY2FsQ2FzZVwiXSA9IFwicGFzY2FsQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcImhlbGxvL3dvcmxkL2V4YW1wbGUvMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wicGF0aENhc2VcIl0gPSBcInBhdGhDYXNlXCI7XG4gICAgLyoqIEV4YW1wbGU6IFwiSGVsbG8gd29ybGQgZXhhbXBsZSAxMjNcIiAqL1xuICAgIFN0cmluZ0Nhc2VbXCJzZW50ZW5jZUNhc2VcIl0gPSBcInNlbnRlbmNlQ2FzZVwiO1xuICAgIC8qKiBFeGFtcGxlOiBcImhlbGxvX3dvcmxkX2V4YW1wbGVfMTIzXCIgKi9cbiAgICBTdHJpbmdDYXNlW1wic25ha2VDYXNlXCJdID0gXCJzbmFrZUNhc2VcIjtcbiAgICAvKiogRXhhbXBsZTogXCJoZWxsb3dvcmxkZXhhbXBsZTEyM1wiICovXG4gICAgU3RyaW5nQ2FzZVtcImZsYXRDYXNlXCJdID0gXCJmbGF0Q2FzZVwiO1xufSkoU3RyaW5nQ2FzZSB8fCAoZXhwb3J0cy5TdHJpbmdDYXNlID0gU3RyaW5nQ2FzZSA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ1NTSGVscGVyID0gdm9pZCAwO1xuY29uc3Qgc2RrX2V4cG9ydGVyc18xID0gcmVxdWlyZShcIkBzdXBlcm5vdmFpby9zZGstZXhwb3J0ZXJzXCIpO1xuY29uc3QgVG9rZW5IZWxwZXJfMSA9IHJlcXVpcmUoXCIuL1Rva2VuSGVscGVyXCIpO1xuY29uc3QgQ29sb3JIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL0NvbG9ySGVscGVyXCIpO1xuLyoqIEEgdXRpbGl0eSBjbGFzcyB0byBoZWxwIHdpdGggdHJhbnNmb3JtYXRpb24gb2YgdG9rZW5zIGFuZCBTdXBlcm5vdmEgdG9rZW4tbGlrZSB2YWx1ZXMgdG8gdmFyaW91cyBmb3JtYXRzICovXG5jbGFzcyBDU1NIZWxwZXIge1xuICAgIHN0YXRpYyB0b2tlblRvQ1NTKHRva2VuLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgLyoqIFVzZSBzdWJyb3V0aW5lcyB0byBjb252ZXJ0IHNwZWNpZmljIHRva2VuIHR5cGVzIHRvIGRpZmZlcmVudCBjc3MgcmVwcmVzZW50YXRpb25zLiBNYW55IHRva2VucyBhcmUgb2YgdGhlIHNhbWUgdHlwZSAqL1xuICAgICAgICBsZXQgY3NzVmFsdWU7XG4gICAgICAgIHN3aXRjaCAodG9rZW4udG9rZW5UeXBlKSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuY29sb3I6XG4gICAgICAgICAgICAgICAgY3NzVmFsdWUgPSB0aGlzLmNvbG9yVG9rZW5WYWx1ZVRvQ1NTKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmJvcmRlcjpcbiAgICAgICAgICAgICAgICBjc3NWYWx1ZSA9IHRoaXMuYm9yZGVyVG9rZW5WYWx1ZVRvQ1NTKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmdyYWRpZW50OlxuICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gdGhpcy5ncmFkaWVudFRva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5kaW1lbnNpb246XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuc2l6ZTpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5zcGFjZTpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5vcGFjaXR5OlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmZvbnRTaXplOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmxpbmVIZWlnaHQ6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUubGV0dGVyU3BhY2luZzpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5wYXJhZ3JhcGhTcGFjaW5nOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmJvcmRlcldpZHRoOlxuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnJhZGl1czpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5kdXJhdGlvbjpcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS56SW5kZXg6XG4gICAgICAgICAgICAgICAgY3NzVmFsdWUgPSB0aGlzLmRpbWVuc2lvblRva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5zaGFkb3c6XG4gICAgICAgICAgICAgICAgY3NzVmFsdWUgPSB0aGlzLnNoYWRvd1Rva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS5mb250V2VpZ2h0OlxuICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gdGhpcy5mb250V2VpZ2h0VG9rZW5WYWx1ZVRvQ1NTKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLmZvbnRGYW1pbHk6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUucHJvZHVjdENvcHk6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuc3RyaW5nOlxuICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gdGhpcy5zdHJpbmdUb2tlblZhbHVlVG9DU1ModG9rZW4udmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudGV4dENhc2U6XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudGV4dERlY29yYXRpb246XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudmlzaWJpbGl0eTpcbiAgICAgICAgICAgICAgICBjc3NWYWx1ZSA9IHRoaXMub3B0aW9uVG9rZW5WYWx1ZVRvQ1NTKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMsIHRva2VuLnRva2VuVHlwZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUuYmx1cjpcbiAgICAgICAgICAgICAgICBjc3NWYWx1ZSA9IHRoaXMuYmx1clRva2VuVmFsdWVUb0NTUyh0b2tlbi52YWx1ZSwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZS50eXBvZ3JhcGh5OlxuICAgICAgICAgICAgICAgIGNzc1ZhbHVlID0gdGhpcy50eXBvZ3JhcGh5VG9rZW5WYWx1ZVRvQ1NTKHRva2VuLnZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc2RrX2V4cG9ydGVyc18xLlVucmVhY2hhYmxlQ2FzZUVycm9yKHRva2VuLnRva2VuVHlwZSwgJ1Vuc3VwcG9ydGVkIHRva2VuIHR5cGUgZm9yIHRyYW5zZm9ybWF0aW9uIHRvIENTUzonKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbGxvdyB2YWx1ZSB0cmFuc2Zvcm1hdGlvbiBpZiB0cmFuc2Zvcm1lciBleGlzdHNcbiAgICAgICAgaWYgKG9wdGlvbnMudmFsdWVUcmFuc2Zvcm1lcikge1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZWRWYWx1ZSA9IG9wdGlvbnMudmFsdWVUcmFuc2Zvcm1lcihjc3NWYWx1ZSwgdG9rZW4pO1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjc3NWYWx1ZTtcbiAgICB9XG4gICAgc3RhdGljIGNvbG9yVG9rZW5WYWx1ZVRvQ1NTKGNvbG9yLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIuZm9ybWF0dGVkQ29sb3JPclZhcmlhYmxlTmFtZShjb2xvciwgYWxsVG9rZW5zLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGJvcmRlclRva2VuVmFsdWVUb0NTUyhib3JkZXIsIGFsbFRva2Vucywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKGJvcmRlci5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICB3aWR0aDogdGhpcy5kaW1lbnNpb25Ub2tlblZhbHVlVG9DU1MoYm9yZGVyLndpZHRoLCBhbGxUb2tlbnMsIG9wdGlvbnMpLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMuYm9yZGVyU3R5bGVUb0NTUyhib3JkZXIuc3R5bGUpLFxuICAgICAgICAgICAgY29sb3I6IHRoaXMuY29sb3JUb2tlblZhbHVlVG9DU1MoYm9yZGVyLmNvbG9yLCBhbGxUb2tlbnMsIG9wdGlvbnMpLFxuICAgICAgICAgICAgcG9zaXRpb246IHRoaXMuYm9yZGVyUG9zaXRpb25Ub0NTUyhib3JkZXIucG9zaXRpb24pIC8vIE5vdCB1c2VkIGZvciBub3dcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGAke2RhdGEud2lkdGh9ICR7ZGF0YS5zdHlsZX0gJHtkYXRhLmNvbG9yfWA7XG4gICAgfVxuICAgIHN0YXRpYyBncmFkaWVudFRva2VuVmFsdWVUb0NTUyhncmFkaWVudHMsIGFsbFRva2Vucywgb3B0aW9ucykge1xuICAgICAgICAvLyBFeHBvcnQgZWFjaCBsYXllciBvZiB0aGUgZ3JhZGllbnQgc2VwYXJhdGVseSwgdGhlbiBqb2luIHRoZSBDU1MgYmFja2dyb3VuZFxuICAgICAgICByZXR1cm4gZ3JhZGllbnRzLm1hcCgoZ3JhZGllbnQpID0+IHRoaXMuZ3JhZGllbnRMYXllclRvQ1NTKGdyYWRpZW50LCBhbGxUb2tlbnMsIG9wdGlvbnMpKS5qb2luKCcsICcpO1xuICAgIH1cbiAgICAvKiogQ29udmVydHMgZ3JhZGllbnQgdG9rZW4gdmFsdWUgdG8gY3NzIGRlZmluaXRpb24gKi9cbiAgICBzdGF0aWMgZ3JhZGllbnRMYXllclRvQ1NTKHZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh2YWx1ZS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlbHRhWCA9IENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLnRvLngsIG9wdGlvbnMuZGVjaW1hbHMpIC1cbiAgICAgICAgICAgIENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLmZyb20ueCwgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIGNvbnN0IGRlbHRhWSA9IENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLnRvLnksIG9wdGlvbnMuZGVjaW1hbHMpIC1cbiAgICAgICAgICAgIENvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHZhbHVlLmZyb20ueSwgb3B0aW9ucy5kZWNpbWFscyk7XG4gICAgICAgIGNvbnN0IHJhZCA9IE1hdGguYXRhbjIoZGVsdGFZLCBkZWx0YVgpO1xuICAgICAgICBjb25zdCBkZWcgPSByYWQgKiAoMTgwIC8gTWF0aC5QSSk7XG4gICAgICAgIGNvbnN0IGdldEFuZ2xlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGRlbHRhWCA+PSAwICYmIGRlbHRhWSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyB0b3AgdG8gYm90dG9tIGlzIDkwZGVnIGJ1dCBzaG91bGQgYmUgMTgwZGVnXG4gICAgICAgICAgICAgICAgcmV0dXJuIDkwICsgZGVnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlbHRhWCA+IDAgJiYgZGVsdGFZIDw9IDApIHtcbiAgICAgICAgICAgICAgICAvLyBsZWZ0IHRvIHJpZ2h0IGlzIDBkZWcgYnV0IHNob3VsZCBiZSA5MGRlZ1xuICAgICAgICAgICAgICAgIHJldHVybiA5MCArIGRlZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWx0YVggPD0gMCAmJiBkZWx0YVkgPCAwKSB7XG4gICAgICAgICAgICAgICAgLy8gYm90dG9tIHRvIHRvcCBpcyAtOTBkZWcgYnV0IHNob3VsZCBiZSAwZGVnXG4gICAgICAgICAgICAgICAgcmV0dXJuIDkwICsgZGVnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmlnaHQgdG8gbGVmdCBpcyAxODBkZWcgYnV0IHNob3VsZCBiZSAtOTBkZWdcbiAgICAgICAgICAgIHJldHVybiBkZWcgLSAyNzA7XG4gICAgICAgIH07XG4gICAgICAgIGxldCBncmFkaWVudFR5cGUgPSAnJztcbiAgICAgICAgc3dpdGNoICh2YWx1ZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5HcmFkaWVudFR5cGUubGluZWFyOlxuICAgICAgICAgICAgICAgIGdyYWRpZW50VHlwZSA9IGBsaW5lYXItZ3JhZGllbnQoJHtnZXRBbmdsZSgpfWRlZywgYDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLkdyYWRpZW50VHlwZS5yYWRpYWw6XG4gICAgICAgICAgICAgICAgZ3JhZGllbnRUeXBlID0gJ3JhZGlhbC1ncmFkaWVudChjaXJjbGUsICc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5HcmFkaWVudFR5cGUuYW5ndWxhcjpcbiAgICAgICAgICAgICAgICBncmFkaWVudFR5cGUgPSAnY29uaWMtZ3JhZGllbnQoJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZ3JhZGllbnRUeXBlID0gYGxpbmVhci1ncmFkaWVudCgke2dldEFuZ2xlKCl9ZGVnLCBgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4YW1wbGU6IHJhZGlhbC1ncmFkaWVudChjaXJjbGUsIHJnYmEoNjMsOTQsMjUxLDEpIDAlLCByZ2JhKDI1Miw3MCwxMDcsMSkgMTAwJSk7XG4gICAgICAgIGNvbnN0IHN0b3BzID0gdmFsdWUuc3RvcHNcbiAgICAgICAgICAgIC5tYXAoKHN0b3ApID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLmNvbG9yVG9rZW5WYWx1ZVRvQ1NTKHN0b3AuY29sb3IsIGFsbFRva2Vucywgb3B0aW9ucyl9ICR7Q29sb3JIZWxwZXJfMS5Db2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHMoc3RvcC5wb3NpdGlvbiAqIDEwMCwgb3B0aW9ucy5kZWNpbWFscyl9JWA7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignLCAnKTtcbiAgICAgICAgcmV0dXJuIGAke2dyYWRpZW50VHlwZX0ke3N0b3BzfSlgO1xuICAgIH1cbiAgICBzdGF0aWMgZGltZW5zaW9uVG9rZW5WYWx1ZVRvQ1NTKGRpbWVuc2lvbiwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkoZGltZW5zaW9uLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlIHVuaXQgY29udmVyc2lvbiBpZiBuZWVkZWRcbiAgICAgICAgaWYgKG9wdGlvbnMuZm9yY2VSZW1Vbml0ICYmIGRpbWVuc2lvbi51bml0ID09PSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5waXhlbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbUJhc2UgPSBvcHRpb25zLnJlbUJhc2UgfHwgMTY7XG4gICAgICAgICAgICBjb25zdCByZW1WYWx1ZSA9IGRpbWVuc2lvbi5tZWFzdXJlIC8gcmVtQmFzZTtcbiAgICAgICAgICAgIHJldHVybiBgJHtDb2xvckhlbHBlcl8xLkNvbG9ySGVscGVyLnJvdW5kVG9EZWNpbWFscyhyZW1WYWx1ZSwgb3B0aW9ucy5kZWNpbWFscyl9cmVtYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7Q29sb3JIZWxwZXJfMS5Db2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHMoZGltZW5zaW9uLm1lYXN1cmUsIG9wdGlvbnMuZGVjaW1hbHMpfSR7dGhpcy51bml0VG9DU1MoZGltZW5zaW9uLnVuaXQpfWA7XG4gICAgfVxuICAgIHN0YXRpYyBzaGFkb3dUb2tlblZhbHVlVG9DU1Moc2hhZG93cywgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBzaGFkb3dzLm1hcCgobGF5ZXIpID0+IHRoaXMuc2hhZG93TGF5ZXJUb0NTUyhsYXllciwgYWxsVG9rZW5zLCBvcHRpb25zKSkuam9pbignLCAnKTtcbiAgICB9XG4gICAgc3RhdGljIHNoYWRvd0xheWVyVG9DU1ModmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHZhbHVlLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29udmVydCBwaXhlbCB2YWx1ZXMgdG8gcmVtIGlmIG5lZWRlZFxuICAgICAgICBjb25zdCBjb252ZXJ0VG9SZW0gPSAocHgpID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZvcmNlUmVtVW5pdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbUJhc2UgPSBvcHRpb25zLnJlbUJhc2UgfHwgMTY7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVtVmFsdWUgPSBweCAvIHJlbUJhc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke0NvbG9ySGVscGVyXzEuQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKHJlbVZhbHVlLCBvcHRpb25zLmRlY2ltYWxzKX1yZW1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGAke3B4fXB4YDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGAke3ZhbHVlLnR5cGUgPT09IHNka19leHBvcnRlcnNfMS5TaGFkb3dUeXBlLmlubmVyID8gJ2luc2V0ICcgOiAnJ30ke2NvbnZlcnRUb1JlbSh2YWx1ZS54KX0gJHtjb252ZXJ0VG9SZW0odmFsdWUueSl9ICR7Y29udmVydFRvUmVtKHZhbHVlLnJhZGl1cyl9ICR7Y29udmVydFRvUmVtKHZhbHVlLnNwcmVhZCl9ICR7dGhpcy5jb2xvclRva2VuVmFsdWVUb0NTUyh7XG4gICAgICAgICAgICAuLi52YWx1ZS5jb2xvcixcbiAgICAgICAgICAgIC4uLih2YWx1ZS5vcGFjaXR5ICYmIHsgb3BhY2l0eTogdmFsdWUub3BhY2l0eSB9KVxuICAgICAgICB9LCBhbGxUb2tlbnMsIG9wdGlvbnMpfWA7XG4gICAgfVxuICAgIHN0YXRpYyBmb250V2VpZ2h0VG9rZW5WYWx1ZVRvQ1NTKHZhbHVlLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh2YWx1ZS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnQgdGV4dCB3ZWlnaHRzIHRvIG51bWVyaWNhbCB2YWx1ZXNcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFdlaWdodCA9IHRoaXMubm9ybWFsaXplVGV4dFdlaWdodCh2YWx1ZS50ZXh0KTtcbiAgICAgICAgcmV0dXJuIGAke25vcm1hbGl6ZWRXZWlnaHR9YDtcbiAgICB9XG4gICAgc3RhdGljIG5vcm1hbGl6ZVRleHRXZWlnaHQod2VpZ2h0KSB7XG4gICAgICAgIC8vIENvbnZlcnQgdG8gbG93ZXJjYXNlIGZvciBjYXNlLWluc2Vuc2l0aXZlIGNvbXBhcmlzb25cbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFRleHQgPSB3ZWlnaHQudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgICAgIC8vIEZpcnN0IGNoZWNrIGlmIGl0J3MgYWxyZWFkeSBhIHZhbGlkIG51bWJlclxuICAgICAgICBjb25zdCBudW1lcmljV2VpZ2h0ID0gcGFyc2VJbnQobm9ybWFsaXplZFRleHQpO1xuICAgICAgICBpZiAoIWlzTmFOKG51bWVyaWNXZWlnaHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtZXJpY1dlaWdodDtcbiAgICAgICAgfVxuICAgICAgICAvLyBNYXAgY29tbW9uIHdlaWdodCBuYW1lcyB0byB0aGVpciBudW1lcmljIHZhbHVlc1xuICAgICAgICBzd2l0Y2ggKG5vcm1hbGl6ZWRUZXh0KSB7XG4gICAgICAgICAgICBjYXNlICd0aGluJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gMTAwO1xuICAgICAgICAgICAgY2FzZSAnaGFpcmxpbmUnOlxuICAgICAgICAgICAgICAgIHJldHVybiAxMDA7XG4gICAgICAgICAgICBjYXNlICdleHRyYSBsaWdodCc6XG4gICAgICAgICAgICBjYXNlICdleHRyYWxpZ2h0JzpcbiAgICAgICAgICAgIGNhc2UgJ3VsdHJhIGxpZ2h0JzpcbiAgICAgICAgICAgIGNhc2UgJ3VsdHJhbGlnaHQnOlxuICAgICAgICAgICAgICAgIHJldHVybiAyMDA7XG4gICAgICAgICAgICBjYXNlICdsaWdodCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDMwMDtcbiAgICAgICAgICAgIGNhc2UgJ25vcm1hbCc6XG4gICAgICAgICAgICBjYXNlICdyZWd1bGFyJzpcbiAgICAgICAgICAgIGNhc2UgJ2Jvb2snOlxuICAgICAgICAgICAgICAgIHJldHVybiA0MDA7XG4gICAgICAgICAgICBjYXNlICdtZWRpdW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiA1MDA7XG4gICAgICAgICAgICBjYXNlICdzZW1pIGJvbGQnOlxuICAgICAgICAgICAgY2FzZSAnc2VtaWJvbGQnOlxuICAgICAgICAgICAgY2FzZSAnZGVtaSBib2xkJzpcbiAgICAgICAgICAgIGNhc2UgJ2RlbWlib2xkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gNjAwO1xuICAgICAgICAgICAgY2FzZSAnYm9sZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDcwMDtcbiAgICAgICAgICAgIGNhc2UgJ2V4dHJhIGJvbGQnOlxuICAgICAgICAgICAgY2FzZSAnZXh0cmFib2xkJzpcbiAgICAgICAgICAgIGNhc2UgJ3VsdHJhIGJvbGQnOlxuICAgICAgICAgICAgY2FzZSAndWx0cmFib2xkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gODAwO1xuICAgICAgICAgICAgY2FzZSAnYmxhY2snOlxuICAgICAgICAgICAgY2FzZSAnaGVhdnknOlxuICAgICAgICAgICAgICAgIHJldHVybiA5MDA7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gbm9ybWFsIHdlaWdodCAoNDAwKSBpZiB0aGUgdmFsdWUgaXMgbm90IHJlY29nbml6ZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gNDAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBzdHJpbmdUb2tlblZhbHVlVG9DU1ModmFsdWUsIGFsbFRva2Vucywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHZhbHVlLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBcIiR7dmFsdWUudGV4dH1cImA7XG4gICAgfVxuICAgIHN0YXRpYyBvcHRpb25Ub2tlblZhbHVlVG9DU1Mob3B0aW9uLCBhbGxUb2tlbnMsIG9wdGlvbnMsIHRva2VuVHlwZSkge1xuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKG9wdGlvbi5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChyZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRva2VuVG9WYXJpYWJsZVJlZihyZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlblR5cGUgPT09IHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUudGV4dENhc2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRDYXNlVG9DU1Mob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW5UeXBlID09PSBzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlLnRleHREZWNvcmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0RGVjb3JhdGlvblRvQ1NTKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVmlzaWJpbGl0eSB2YWx1ZXMgYXJlIHN1cHBvcnRlZCBpbiBDU1MgYXMgaXMgb3VyIGRhdGEgbW9kZWxcbiAgICAgICAgcmV0dXJuIG9wdGlvbi52YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICBzdGF0aWMgYmx1clRva2VuVmFsdWVUb0NTUyhibHVyLCBhbGxUb2tlbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShibHVyLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKHJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBibHVyKCR7dGhpcy5kaW1lbnNpb25Ub2tlblZhbHVlVG9DU1MoYmx1ci5yYWRpdXMsIGFsbFRva2Vucywgb3B0aW9ucyl9KWA7XG4gICAgfVxuICAgIHN0YXRpYyB0eXBvZ3JhcGh5VG9rZW5WYWx1ZVRvQ1NTKHR5cG9ncmFwaHksIGFsbFRva2Vucywgb3B0aW9ucykge1xuICAgICAgICAvLyBSZWZlcmVuY2UgZnVsbCB0eXBvZ3JhcGh5IHRva2VuIGlmIHNldFxuICAgICAgICBjb25zdCByZWZlcmVuY2UgPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKHR5cG9ncmFwaHkucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYocmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXNvbHZlIHBhcnRpYWwgcmVmZXJlbmNlc1xuICAgICAgICBjb25zdCBmb250RmFtaWx5UmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh0eXBvZ3JhcGh5LmZvbnRGYW1pbHkucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBjb25zdCBmb250V2VpZ2h0UmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh0eXBvZ3JhcGh5LmZvbnRXZWlnaHQucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICBjb25zdCBkZWNvcmF0aW9uUmVmZXJlbmNlID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKSh0eXBvZ3JhcGh5LnRleHREZWNvcmF0aW9uLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgY29uc3QgY2FzZVJlZmVyZW5jZSA9ICgwLCBUb2tlbkhlbHBlcl8xLnN1cmVPcHRpb25hbFJlZmVyZW5jZSkodHlwb2dyYXBoeS50ZXh0Q2FzZS5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5UmVmZXJlbmNlID8gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYoZm9udEZhbWlseVJlZmVyZW5jZSkgOiB0eXBvZ3JhcGh5LmZvbnRGYW1pbHkudGV4dCxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRSZWZlcmVuY2VcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKGZvbnRXZWlnaHRSZWZlcmVuY2UpXG4gICAgICAgICAgICAgICAgOiB0aGlzLm5vcm1hbGl6ZVRleHRXZWlnaHQodHlwb2dyYXBoeS5mb250V2VpZ2h0LnRleHQpLFxuICAgICAgICAgICAgdGV4dERlY29yYXRpb246IGRlY29yYXRpb25SZWZlcmVuY2VcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMudG9rZW5Ub1ZhcmlhYmxlUmVmKGRlY29yYXRpb25SZWZlcmVuY2UpXG4gICAgICAgICAgICAgICAgOiB0eXBvZ3JhcGh5LnRleHREZWNvcmF0aW9uLnZhbHVlID09PSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24ub3JpZ2luYWxcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnRleHREZWNvcmF0aW9uVG9DU1ModHlwb2dyYXBoeS50ZXh0RGVjb3JhdGlvbi52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0ZXh0Q2FzZTogY2FzZVJlZmVyZW5jZVxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYoY2FzZVJlZmVyZW5jZSlcbiAgICAgICAgICAgICAgICA6IHR5cG9ncmFwaHkudGV4dENhc2UudmFsdWUgPT09IHNka19leHBvcnRlcnNfMS5UZXh0Q2FzZS5vcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMudGV4dENhc2VUb0NTUyh0eXBvZ3JhcGh5LnRleHRDYXNlLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNhcHM6IHR5cG9ncmFwaHkudGV4dENhc2UudmFsdWUgPT09IHNka19leHBvcnRlcnNfMS5UZXh0Q2FzZS5zbWFsbENhcHMsXG4gICAgICAgICAgICBmb250U2l6ZTogdGhpcy5kaW1lbnNpb25Ub2tlblZhbHVlVG9DU1ModHlwb2dyYXBoeS5mb250U2l6ZSwgYWxsVG9rZW5zLCBvcHRpb25zKSxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IHR5cG9ncmFwaHkubGluZUhlaWdodFxuICAgICAgICAgICAgICAgID8gdGhpcy5kaW1lbnNpb25Ub2tlblZhbHVlVG9DU1ModHlwb2dyYXBoeS5saW5lSGVpZ2h0LCBhbGxUb2tlbnMsIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgICAgLy8gRm9ybWFsIENTUyBkZWZpbml0aW9uOiBmb250LXN0eWxlLCBmb250LXZhcmlhbnQsIGZvbnQtd2VpZ2h0LCBmb250LXN0cmV0Y2gsIGZvbnQtc2l6ZSwgbGluZS1oZWlnaHQsIGFuZCBmb250LWZhbWlseS5cbiAgICAgICAgLy8gRXhhbXBsZTogc21hbGwtY2FwcyBib2xkIDI0cHgvMXJlbSBcIldpbmdkaW5nc1wiXG4gICAgICAgIGNvbnN0IGZyYWdtZW50Q2FwcyA9IGRhdGEuY2FwcyA/ICdzbWFsbC1jYXBzICcgOiAnJztcbiAgICAgICAgY29uc3QgZnJhZ21lbnRXZWlnaHQgPSBkYXRhLmZvbnRXZWlnaHQ7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50U2l6ZSA9IGRhdGEuZm9udFNpemU7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50TGluZUhlaWdodCA9IGRhdGEubGluZUhlaWdodDtcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTaXplQW5kTGluZUhlaWdodCA9IGRhdGEubGluZUhlaWdodCA/IGAke2ZyYWdtZW50U2l6ZX0vJHtmcmFnbWVudExpbmVIZWlnaHR9YCA6IGZyYWdtZW50U2l6ZTtcbiAgICAgICAgY29uc3QgZnJhZ21lbnRGYW1pbHkgPSBmb250RmFtaWx5UmVmZXJlbmNlID8gZGF0YS5mb250RmFtaWx5IDogYFxcXCIke2RhdGEuZm9udEZhbWlseX1cXFwiYDtcbiAgICAgICAgcmV0dXJuIGAke2ZyYWdtZW50Q2Fwc30ke2ZyYWdtZW50V2VpZ2h0fSAke2ZyYWdtZW50U2l6ZUFuZExpbmVIZWlnaHR9ICR7ZnJhZ21lbnRGYW1pbHl9YDtcbiAgICB9XG4gICAgc3RhdGljIGJvcmRlclN0eWxlVG9DU1MoYm9yZGVyU3R5bGUpIHtcbiAgICAgICAgc3dpdGNoIChib3JkZXJTdHlsZSkge1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuQm9yZGVyU3R5bGUuZGFzaGVkOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZGFzaGVkJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLkJvcmRlclN0eWxlLmRvdHRlZDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RvdHRlZCc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Cb3JkZXJTdHlsZS5zb2xpZDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NvbGlkJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLkJvcmRlclN0eWxlLmdyb292ZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2dyb292ZSc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAnc29saWQnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBib3JkZXJQb3NpdGlvblRvQ1NTKGJvcmRlclBvc2l0aW9uKSB7XG4gICAgICAgIHN3aXRjaCAoYm9yZGVyUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLkJvcmRlclBvc2l0aW9uLmNlbnRlcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Cb3JkZXJQb3NpdGlvbi5pbnNpZGU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdpbnNpZGUnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuQm9yZGVyUG9zaXRpb24ub3V0c2lkZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ291dHNpZGUnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ291dHNpZGUnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyB1bml0VG9DU1ModW5pdCkge1xuICAgICAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlVuaXQucGVyY2VudDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJyUnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVW5pdC5waXhlbHM6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdweCc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Vbml0LnJlbTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JlbSc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Vbml0LnJhdzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5Vbml0Lm1zOlxuICAgICAgICAgICAgICAgIHJldHVybiAnbXMnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3B4JztcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgdGV4dENhc2VUb0NTUyh0ZXh0Q2FzZSkge1xuICAgICAgICBzd2l0Y2ggKHRleHRDYXNlKSB7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5UZXh0Q2FzZS5vcmlnaW5hbDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2UudXBwZXI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1cHBlcmNhc2UnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2UubG93ZXI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdsb3dlcmNhc2UnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dENhc2UuY2FtZWw6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdjYXBpdGFsaXplJztcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRleHRDYXNlLnNtYWxsQ2FwczpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NtYWxsLWNhcHMnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyB0ZXh0RGVjb3JhdGlvblRvQ1NTKHRleHREZWNvcmF0aW9uKSB7XG4gICAgICAgIHN3aXRjaCAodGV4dERlY29yYXRpb24pIHtcbiAgICAgICAgICAgIGNhc2Ugc2RrX2V4cG9ydGVyc18xLlRleHREZWNvcmF0aW9uLm9yaWdpbmFsOlxuICAgICAgICAgICAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgICAgICAgICBjYXNlIHNka19leHBvcnRlcnNfMS5UZXh0RGVjb3JhdGlvbi51bmRlcmxpbmU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1bmRlcmxpbmUnO1xuICAgICAgICAgICAgY2FzZSBzZGtfZXhwb3J0ZXJzXzEuVGV4dERlY29yYXRpb24uc3RyaWtldGhyb3VnaDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2xpbmUtdGhyb3VnaCc7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkNTU0hlbHBlciA9IENTU0hlbHBlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xvckhlbHBlciA9IHZvaWQgMDtcbmNvbnN0IENvbG9yRm9ybWF0XzEgPSByZXF1aXJlKFwiLi4vZW51bXMvQ29sb3JGb3JtYXRcIik7XG5jb25zdCBUb2tlbkhlbHBlcl8xID0gcmVxdWlyZShcIi4vVG9rZW5IZWxwZXJcIik7XG4vKiogQSB1dGlsaXR5IGNsYXNzIHRvIGhlbHAgd2l0aCB0cmFuc2Zvcm1hdGlvbiBvZiBjb2xvcnMgdG8gdmFyaW91cyBmb3JtYXRzICovXG5jbGFzcyBDb2xvckhlbHBlciB7XG4gICAgLyoqXG4gICAgICogQmVoYXZlcyBsaWtlIGEgbm9ybWFsIGNvbG9yIGZvcm1hdHRlci4gSG93ZXZlciwgaWYgdGhlIGNvbG9yIGlzIHJlZmVyZW5jZSwgaXQgcmV0dXJucyB0aGUgdmFyaWFibGUgbmFtZSBpbnN0ZWFkIG9mIHRoZSBmb3JtYXR0ZWQgY29sb3IuXG4gICAgICogUHJlY2lzZSBiZWhhdmlvciBpcyBhcyBmb2xsb3dzOlxuICAgICAqIC0gSWYgdGhlIGNvbG9yIGlzIGZ1bGwgcmVmZXJlbmNlLCByZXR1cm5zIHRoZSB2YXJpYWJsZSBuYW1lXG4gICAgICogLSBJZiB0aGUgY29sb3IgaXMgcGFydGlhbCByZWZlcmVuY2UsIHJldHVybnMgdGhlIGZvcm1hdHRlZCBjb2xvciB3aXRoIHJlZmVyZW5jZXMgd2hlcmUgcG9zc2libGUgYW5kIHJhdyB2YWx1ZXMgd2hlcmUgbm90XG4gICAgICogLSBPbmx5IHN1cHBvcnRlZCBwYXJ0aWFsIHJlZmVyZW5jZSBmb3JtYXRzIGFyZSByZ2IsIHJnYmEsIHNtYXJ0UmdiXG4gICAgICogLSBWYXJpYWJsZSBuYW1lcyBhcmUgZ2VuZXJhdGVkIGJ5IHRoZSBwcm92aWRlZCBmdW5jdGlvbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgZm9ybWF0dGVkQ29sb3JPclZhcmlhYmxlTmFtZShjb2xvciwgYWxsVG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBmdWxsUmVmZXJlbmNlTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGNvbG9yUmVmZXJlbmNlTmFtZSA9IG51bGw7XG4gICAgICAgIGxldCBvcGFjaXR5UmVmZXJlbmNlTmFtZSA9IG51bGw7XG4gICAgICAgIC8vIENoZWNrIHJlZmVyZW5jZXMgZmlyc3RcbiAgICAgICAgY29uc3QgZnVsbFRva2VuID0gKDAsIFRva2VuSGVscGVyXzEuc3VyZU9wdGlvbmFsUmVmZXJlbmNlKShjb2xvci5yZWZlcmVuY2VkVG9rZW5JZCwgYWxsVG9rZW5zLCBvcHRpb25zLmFsbG93UmVmZXJlbmNlcyk7XG4gICAgICAgIGlmIChmdWxsVG9rZW4pIHtcbiAgICAgICAgICAgIGZ1bGxSZWZlcmVuY2VOYW1lID0gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYoZnVsbFRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yVG9rZW4gPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKGNvbG9yLmNvbG9yLnJlZmVyZW5jZWRUb2tlbklkLCBhbGxUb2tlbnMsIG9wdGlvbnMuYWxsb3dSZWZlcmVuY2VzKTtcbiAgICAgICAgICAgIGlmIChjb2xvclRva2VuKSB7XG4gICAgICAgICAgICAgICAgY29sb3JSZWZlcmVuY2VOYW1lID0gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYoY29sb3JUb2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcGFjaXR5VG9rZW4gPSAoMCwgVG9rZW5IZWxwZXJfMS5zdXJlT3B0aW9uYWxSZWZlcmVuY2UpKGNvbG9yLm9wYWNpdHkucmVmZXJlbmNlZFRva2VuSWQsIGFsbFRva2Vucywgb3B0aW9ucy5hbGxvd1JlZmVyZW5jZXMpO1xuICAgICAgICAgICAgaWYgKG9wYWNpdHlUb2tlbikge1xuICAgICAgICAgICAgICAgIG9wYWNpdHlSZWZlcmVuY2VOYW1lID0gb3B0aW9ucy50b2tlblRvVmFyaWFibGVSZWYob3BhY2l0eVRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgZnVsbCB2YWx1ZSBpcyByZWZlcmVuY2UsIHJldHVybiB0aGUgdmFyaWFibGUgbmFtZVxuICAgICAgICBpZiAoZnVsbFJlZmVyZW5jZU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdWxsUmVmZXJlbmNlTmFtZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gcmVmZXJlbmNlcywgZm9ybWF0IHRoZSBjb2xvciByYXdcbiAgICAgICAgaWYgKCFmdWxsUmVmZXJlbmNlTmFtZSAmJiAhY29sb3JSZWZlcmVuY2VOYW1lICYmICFvcGFjaXR5UmVmZXJlbmNlTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVkQ29sb3IoY29sb3IsIG9wdGlvbnMuY29sb3JGb3JtYXQsIG9wdGlvbnMuZGVjaW1hbHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBwYXJ0aWFsIHJlZmVyZW5jZXMsIHdlJ2xsIHVzZSB0aGUgcmVmZXJlbmNlcyB3aGVyZSBwb3NzaWJsZSBhbmQgcmV0dXJuIHRoZSByYXcgZm9ybWF0IGZvciB0aGUgcmVzdFxuICAgICAgICBzd2l0Y2ggKG9wdGlvbnMuY29sb3JGb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5yZ2I6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQucmdiYTpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydFJnYmE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JUb1JnYihvcHRpb25zLmNvbG9yRm9ybWF0LCB0aGlzLm5vcm1hbGl6ZWRJbnRDb2xvcihjb2xvciksIGNvbG9yLm9wYWNpdHkubWVhc3VyZSwgb3B0aW9ucy5kZWNpbWFscywgY29sb3JSZWZlcmVuY2VOYW1lLCBvcGFjaXR5UmVmZXJlbmNlTmFtZSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlZENvbG9yKGNvbG9yLCBvcHRpb25zLmNvbG9yRm9ybWF0LCBvcHRpb25zLmRlY2ltYWxzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3JtYXRzIFN1cGVybm92YSBjb2xvciB0b2tlbiB2YWx1ZSB0byBhIHN0cmluZyBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgZm9ybWF0LiBGb3IgZnJhY3Rpb25hbCBmb3JtYXRzLCB0aGUgbnVtYmVyIG9mIGRlY2ltYWxzIGNhbiBiZSBzcGVjaWZpZWQuXG4gICAgICovXG4gICAgc3RhdGljIGZvcm1hdHRlZENvbG9yKGNvbG9yLCBmb3JtYXQsIGRlY2ltYWxzID0gMykge1xuICAgICAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LmhleDY6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaGV4ODpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5oYXNoSGV4NjpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5oYXNoSGV4ODpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydEhleDpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydEhhc2hIZXg6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JUb0hleChmb3JtYXQsIHRoaXMubm9ybWFsaXplZEludENvbG9yKGNvbG9yKSwgY29sb3Iub3BhY2l0eS5tZWFzdXJlKTtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5yZ2I6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQucmdiYTpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydFJnYmE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JUb1JnYihmb3JtYXQsIHRoaXMubm9ybWFsaXplZEludENvbG9yKGNvbG9yKSwgY29sb3Iub3BhY2l0eS5tZWFzdXJlLCBkZWNpbWFscywgbnVsbCwgbnVsbCk7XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaHNsOlxuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LmhzbGE6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRIc2xhOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbG9yVG9Ic2woZm9ybWF0LCB0aGlzLm5vcm1hbGl6ZWRGcmFjdGlvbmFsQ29sb3IoY29sb3IpLCBjb2xvci5vcGFjaXR5Lm1lYXN1cmUsIGRlY2ltYWxzKTtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydFVJQ29sb3I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JUb1VJQ29sb3IodGhpcy5ub3JtYWxpemVkSW50Q29sb3IoY29sb3IpLCBjb2xvci5vcGFjaXR5Lm1lYXN1cmUsIGRlY2ltYWxzKTtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5va2xjaDpcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5va2xjaGE6XG4gICAgICAgICAgICBjYXNlIENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRPa2xjaDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xvclRvT2tsY2goZm9ybWF0LCB0aGlzLm5vcm1hbGl6ZWRJbnRDb2xvcihjb2xvciksIGNvbG9yLm9wYWNpdHkubWVhc3VyZSwgZGVjaW1hbHMpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xvclRvSGV4KENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRIYXNoSGV4LCB0aGlzLm5vcm1hbGl6ZWRJbnRDb2xvcihjb2xvciksIGNvbG9yLm9wYWNpdHkubWVhc3VyZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ29udmVydCBjb2xvciB0byByZ2JcbiAgICBzdGF0aWMgY29sb3JUb1JnYihmb3JtYXQsIGNvbG9yLCBhbHBoYSwgZGVjaW1hbHMsIGNvbG9yUmVmUmVwbGFjZSwgb3BhY2l0eVJlZlJlcGxhY2UpIHtcbiAgICAgICAgbGV0IHJlc3VsdGluZ1JnYjtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5yZ2JhIHx8IChmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRSZ2JhICYmIGFscGhhIDwgMSkpIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ1JnYiA9IGByZ2JhKCR7Y29sb3JSZWZSZXBsYWNlID8gY29sb3JSZWZSZXBsYWNlIDogYCR7Y29sb3Iucn0sICR7Y29sb3IuZ30sICR7Y29sb3IuYn1gfSwgJHtvcGFjaXR5UmVmUmVwbGFjZSA/IG9wYWNpdHlSZWZSZXBsYWNlIDogdGhpcy5yb3VuZFRvRGVjaW1hbHMoYWxwaGEsIGRlY2ltYWxzKX0pYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ1JnYiA9IGByZ2IoJHtjb2xvclJlZlJlcGxhY2UgPyBjb2xvclJlZlJlcGxhY2UgOiBgJHtjb2xvci5yfSwgJHtjb2xvci5nfSwgJHtjb2xvci5ifWB9KWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdGluZ1JnYjtcbiAgICB9XG4gICAgLy8gQ29udmVydCBjb2xvciB0byBoZXhcbiAgICBzdGF0aWMgY29sb3JUb0hleChmb3JtYXQsIGNvbG9yLCBhbHBoYSkge1xuICAgICAgICAvLyBBbHdheXMgbmVlZCBoZXg2XG4gICAgICAgIGxldCByZXN1bHRpbmdIZXggPSBgJHt0aGlzLnBIZXgoY29sb3Iucil9JHt0aGlzLnBIZXgoY29sb3IuZyl9JHt0aGlzLnBIZXgoY29sb3IuYil9YDtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5oZXg4IHx8XG4gICAgICAgICAgICBmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuaGFzaEhleDggfHxcbiAgICAgICAgICAgIChmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRIZXggJiYgYWxwaGEgPCAxKSB8fFxuICAgICAgICAgICAgKGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5zbWFydEhhc2hIZXggJiYgYWxwaGEgPCAxKSkge1xuICAgICAgICAgICAgLy8gQWRkIGFscGhhIGZvciA4LWZvcm1hdFxuICAgICAgICAgICAgcmVzdWx0aW5nSGV4ICs9IGAke3RoaXMucEhleChNYXRoLnJvdW5kKGFscGhhICogMjU1KSl9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0Lmhhc2hIZXg2IHx8IGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5oYXNoSGV4OCB8fCBmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRIYXNoSGV4KSB7XG4gICAgICAgICAgICAvLyBBZGQgaGFzaCBmb3IgaGFzaC1mb3JtYXRcbiAgICAgICAgICAgIHJlc3VsdGluZ0hleCA9IGAjJHtyZXN1bHRpbmdIZXh9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0aW5nSGV4O1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IGNvbG9yIHRvIEhTTFxuICAgIHN0YXRpYyBjb2xvclRvSHNsKGZvcm1hdCwgY29sb3IsIGFscGhhLCBkZWNpbWFscykge1xuICAgICAgICAvLyBDYWxjdWxhdGUgSFNMIHZhbHVlc1xuICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcbiAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG4gICAgICAgIGxldCBoID0gMDtcbiAgICAgICAgbGV0IHMgPSAwO1xuICAgICAgICBsZXQgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgICAgICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICAgICAgICBoID0gcyA9IDA7IC8vIGFjaHJvbWF0aWNcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gbWF4IC0gbWluO1xuICAgICAgICAgICAgcyA9IGwgPiAwLjUgPyBkZWx0YSAvICgyIC0gbWF4IC0gbWluKSA6IGRlbHRhIC8gKG1heCArIG1pbik7XG4gICAgICAgICAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgICAgICAgICAgIGNhc2UgY29sb3IucjpcbiAgICAgICAgICAgICAgICAgICAgaCA9IChjb2xvci5nIC0gY29sb3IuYikgLyBkZWx0YSArIChjb2xvci5nIDwgY29sb3IuYiA/IDYgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBjb2xvci5nOlxuICAgICAgICAgICAgICAgICAgICBoID0gKGNvbG9yLmIgLSBjb2xvci5yKSAvIGRlbHRhICsgMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBjb2xvci5iOlxuICAgICAgICAgICAgICAgICAgICBoID0gKGNvbG9yLnIgLSBjb2xvci5nKSAvIGRlbHRhICsgNDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoIC89IDY7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdGluZ0hzbDtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5oc2xhIHx8IChmb3JtYXQgPT09IENvbG9yRm9ybWF0XzEuQ29sb3JGb3JtYXQuc21hcnRIc2xhICYmIGFscGhhIDwgMSkpIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ0hzbCA9IGBoc2xhKCR7TWF0aC5yb3VuZChoICogMzYwKX0lLCAke01hdGgucm91bmQocyAqIDEwMCl9JSwgJHtNYXRoLnJvdW5kKGwgKiAxMDApfSUsICR7dGhpcy5yb3VuZFRvRGVjaW1hbHMoYWxwaGEsIGRlY2ltYWxzKX0pYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ0hzbCA9IGBoc2woJHtNYXRoLnJvdW5kKGggKiAzNjApfSUsICR7TWF0aC5yb3VuZChzICogMTAwKX0lLCAke01hdGgucm91bmQobCAqIDEwMCl9JSlgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRpbmdIc2w7XG4gICAgfVxuICAgIC8vIENvbnZlcnQgY29sb3IgdG8gVUlDb2xvciB1c2luZyBiYXNlIGNvbnN0cnVjdG9yXG4gICAgc3RhdGljIGNvbG9yVG9VSUNvbG9yKGNvbG9yLCBhbHBoYSwgZGVjaW1hbHMgPSAzKSB7XG4gICAgICAgIGxldCByZXN1bHRpbmdVSUNvbG9yID0gYFVJQ29sb3IocmdiOiAweCR7dGhpcy5wSGV4KGNvbG9yLnIpfSR7dGhpcy5wSGV4KGNvbG9yLmcpfSR7dGhpcy5wSGV4KGNvbG9yLmIpfSlgO1xuICAgICAgICBpZiAoYWxwaGEgPCAxKSB7XG4gICAgICAgICAgICByZXN1bHRpbmdVSUNvbG9yICs9IGAud2l0aEFscGhhQ29tcG9uZW50KCR7YWxwaGF9KWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdGluZ1VJQ29sb3I7XG4gICAgfVxuICAgIC8vIENvbnZlcnQgY29sb3IgdG8gbm9ybWFsaXplZCAwLTI1NSBmb3JtYXRcbiAgICBzdGF0aWMgbm9ybWFsaXplZEludENvbG9yKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBNYXRoLnJvdW5kKGNvbG9yLmNvbG9yLnIpLFxuICAgICAgICAgICAgZzogTWF0aC5yb3VuZChjb2xvci5jb2xvci5nKSxcbiAgICAgICAgICAgIGI6IE1hdGgucm91bmQoY29sb3IuY29sb3IuYilcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ29udmVydCBjb2xvciB0byBub3JtYWxpemVkIDAtMSBmb3JtYXRcbiAgICBzdGF0aWMgbm9ybWFsaXplZEZyYWN0aW9uYWxDb2xvcihjb2xvciwgZGVjaW1hbHMgPSAzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiB0aGlzLnJvdW5kVG9EZWNpbWFscyhjb2xvci5jb2xvci5yIC8gMjU1LCBkZWNpbWFscyksXG4gICAgICAgICAgICBnOiBDb2xvckhlbHBlci5yb3VuZFRvRGVjaW1hbHMoY29sb3IuY29sb3IuZyAvIDI1NSwgZGVjaW1hbHMpLFxuICAgICAgICAgICAgYjogQ29sb3JIZWxwZXIucm91bmRUb0RlY2ltYWxzKGNvbG9yLmNvbG9yLmIgLyAyNTUsIGRlY2ltYWxzKVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBSb3VuZCBoYWxmIGF3YXkgZnJvbSB6ZXJvIHRvIGEgc3BlY2lmaWMgbnVtYmVyIG9mIGRlY2ltYWxzXG4gICAgc3RhdGljIHJvdW5kVG9EZWNpbWFscyh2YWx1ZSwgZGVjaW1hbHMsIGZvcmNlVHJhaWxpbmdaZXJvID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgbXVsdGlwbGllciA9IE1hdGgucG93KDEwLCBkZWNpbWFscyk7XG4gICAgICAgIGNvbnN0IHJvdW5kZWQgPSBNYXRoLnJvdW5kKHZhbHVlICogbXVsdGlwbGllcikgLyBtdWx0aXBsaWVyO1xuICAgICAgICBpZiAoZm9yY2VUcmFpbGluZ1plcm8pIHtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdG8gc3RyaW5nIHdpdGggZml4ZWQgZGVjaW1hbHMgYW5kIHBhcnNlIGJhY2sgdG8gbnVtYmVyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHJvdW5kZWQudG9GaXhlZChkZWNpbWFscykpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnQgdG8gc3RyaW5nIGFuZCBwYXJzZSBiYWNrIHRvIG51bWJlciB0byByZW1vdmUgdW5uZWNlc3NhcnkgdHJhaWxpbmcgemVyb2VzXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHJvdW5kZWQudG9GaXhlZChkZWNpbWFscykpO1xuICAgIH1cbiAgICAvLyBSZXR1cm4gaGV4IHZhbHVlIHdpdGggbGVhZGluZyB6ZXJvIGlmIGhleCBpcyBzaW5nbGUgZGlnaXRcbiAgICBzdGF0aWMgcEhleCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgY29sb3IgdG8gT0tMQ0ggZm9ybWF0XG4gICAgICogSGFuZGxlcyB0aHJlZSBmb3JtYXRzOlxuICAgICAqIC0gb2tsY2g6IEFsd2F5cyB3aXRob3V0IGFscGhhXG4gICAgICogLSBva2xjaGE6IEFsd2F5cyB3aXRoIGFscGhhXG4gICAgICogLSBzbWFydE9rbGNoOiBXaXRoIGFscGhhIG9ubHkgd2hlbiBhbHBoYSA8IDFcbiAgICAgKi9cbiAgICBzdGF0aWMgY29sb3JUb09rbGNoKGZvcm1hdCwgY29sb3IsIGFscGhhLCBkZWNpbWFscykge1xuICAgICAgICAvLyBDb252ZXJ0IFJHQiB0byBPS0xDSFxuICAgICAgICBjb25zdCB7IGwsIGMsIGggfSA9IHRoaXMucmdiVG9Pa2xjaChjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcbiAgICAgICAgLy8gRm9ybWF0IHRoZSBvdXRwdXQgc3RyaW5nIGJhc2VkIG9uIGZvcm1hdCBhbmQgYWxwaGFcbiAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgQ29sb3JGb3JtYXRfMS5Db2xvckZvcm1hdC5va2xjaGE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBva2xjaCgke2x9JSAke2N9ICR7aH0gLyAke3RoaXMucm91bmRUb0RlY2ltYWxzKGFscGhhICogMTAwLCBkZWNpbWFscyl9JSlgO1xuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0LnNtYXJ0T2tsY2g6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFscGhhIDwgMVxuICAgICAgICAgICAgICAgICAgICA/IGBva2xjaCgke2x9JSAke2N9ICR7aH0gLyAke3RoaXMucm91bmRUb0RlY2ltYWxzKGFscGhhICogMTAwLCBkZWNpbWFscyl9JSlgXG4gICAgICAgICAgICAgICAgICAgIDogYG9rbGNoKCR7bH0lICR7Y30gJHtofSlgO1xuICAgICAgICAgICAgY2FzZSBDb2xvckZvcm1hdF8xLkNvbG9yRm9ybWF0Lm9rbGNoOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYG9rbGNoKCR7bH0lICR7Y30gJHtofSlgO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgUkdCICgwLTI1NSkgdG8gT0tMQ0hcbiAgICAgKiBSZXR1cm5zIGxpZ2h0bmVzcyAoMC0xMDApLCBjaHJvbWEgKDAtMC40KSwgYW5kIGh1ZSAoMC0zNjApXG4gICAgICovXG4gICAgc3RhdGljIHJnYlRvT2tsY2gociwgZywgYikge1xuICAgICAgICAvLyBGaXJzdCBjb252ZXJ0IFJHQiAoMC0yNTUpIHRvIGxpbmVhciBSR0IgKDAtMSlcbiAgICAgICAgY29uc3QgbHIgPSB0aGlzLnNSR0J0b0xpbmVhcihyIC8gMjU1KTtcbiAgICAgICAgY29uc3QgbGcgPSB0aGlzLnNSR0J0b0xpbmVhcihnIC8gMjU1KTtcbiAgICAgICAgY29uc3QgbGIgPSB0aGlzLnNSR0J0b0xpbmVhcihiIC8gMjU1KTtcbiAgICAgICAgLy8gQ29udmVydCB0byBYWVogdXNpbmcgRDY1IGlsbHVtaW5hbnRcbiAgICAgICAgY29uc3QgeCA9IDAuNDEyNDU2NCAqIGxyICsgMC4zNTc1NzYxICogbGcgKyAwLjE4MDQzNzUgKiBsYjtcbiAgICAgICAgY29uc3QgeSA9IDAuMjEyNjcyOSAqIGxyICsgMC43MTUxNTIyICogbGcgKyAwLjA3MjE3NTAgKiBsYjtcbiAgICAgICAgY29uc3QgeiA9IDAuMDE5MzMzOSAqIGxyICsgMC4xMTkxOTIwICogbGcgKyAwLjk1MDMwNDEgKiBsYjtcbiAgICAgICAgLy8gQ29udmVydCB0byBMTVNcbiAgICAgICAgY29uc3QgbG1zX2wgPSAwLjgxODkzMzAxMDEgKiB4ICsgMC4zNjE4NjY3NDI0ICogeSAtIDAuMTI4ODU5NzEzNyAqIHo7XG4gICAgICAgIGNvbnN0IGxtc19tID0gMC4wMzI5ODQ1NDM2ICogeCArIDAuOTI5MzExODcxNSAqIHkgKyAwLjAzNjE0NTYzODcgKiB6O1xuICAgICAgICBjb25zdCBsbXNfcyA9IDAuMDQ4MjAwMzAxOCAqIHggKyAwLjI2NDM2NjI2OTEgKiB5ICsgMC42MzM4NTE3MDcwICogejtcbiAgICAgICAgLy8gTm9uLWxpbmVhciBjb21wcmVzc2lvblxuICAgICAgICBjb25zdCBscCA9IE1hdGguY2JydChsbXNfbCk7XG4gICAgICAgIGNvbnN0IG1wID0gTWF0aC5jYnJ0KGxtc19tKTtcbiAgICAgICAgY29uc3Qgc3AgPSBNYXRoLmNicnQobG1zX3MpO1xuICAgICAgICAvLyBDb252ZXJ0IHRvIExhYidcbiAgICAgICAgY29uc3QgTCA9IDAuMjEwNDU0MjU1MyAqIGxwICsgMC43OTM2MTc3ODUwICogbXAgLSAwLjAwNDA3MjA0NjggKiBzcDtcbiAgICAgICAgY29uc3QgbGFiX2EgPSAxLjk3Nzk5ODQ5NTEgKiBscCAtIDIuNDI4NTkyMjA1MCAqIG1wICsgMC40NTA1OTM3MDk5ICogc3A7XG4gICAgICAgIGNvbnN0IGxhYl9iID0gMC4wMjU5MDQwMzcxICogbHAgKyAwLjc4Mjc3MTc2NjIgKiBtcCAtIDAuODA4Njc1NzY2MCAqIHNwO1xuICAgICAgICAvLyBDb252ZXJ0IHRvIExDSFxuICAgICAgICBjb25zdCBDID0gTWF0aC5zcXJ0KGxhYl9hICogbGFiX2EgKyBsYWJfYiAqIGxhYl9iKTtcbiAgICAgICAgbGV0IGggPSBNYXRoLmF0YW4yKGxhYl9iLCBsYWJfYSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICAvLyBOb3JtYWxpemUgaHVlIHRvIDAtMzYwXG4gICAgICAgIGlmIChoIDwgMCkge1xuICAgICAgICAgICAgaCArPSAzNjA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29udmVydCBMIHRvIHBlcmNlbnRhZ2UgYW5kIHJvdW5kIHZhbHVlc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbDogdGhpcy5yb3VuZFRvRGVjaW1hbHMoTCAqIDEwMCwgMiksXG4gICAgICAgICAgICBjOiB0aGlzLnJvdW5kVG9EZWNpbWFscyhDLCAzLCB0cnVlKSxcbiAgICAgICAgICAgIGg6IHRoaXMucm91bmRUb0RlY2ltYWxzKGgsIDIpXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgc1JHQiB0byBsaW5lYXIgUkdCXG4gICAgICovXG4gICAgc3RhdGljIHNSR0J0b0xpbmVhcih4KSB7XG4gICAgICAgIHJldHVybiB4IDw9IDAuMDQwNDVcbiAgICAgICAgICAgID8geCAvIDEyLjkyXG4gICAgICAgICAgICA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgfVxufVxuZXhwb3J0cy5Db2xvckhlbHBlciA9IENvbG9ySGVscGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbGVIZWxwZXIgPSB2b2lkIDA7XG5jb25zdCBzZGtfZXhwb3J0ZXJzXzEgPSByZXF1aXJlKFwiQHN1cGVybm92YWlvL3Nkay1leHBvcnRlcnNcIik7XG4vKiogQSB1dGlsaXR5IGNsYXNzIHRvIGhlbHAgd2l0aCBjcmVhdGlvbiBvZiBmaWxlcyBmb3IgU3VwZXJub3ZhIGV4cG9ydCByb3V0aW5lcyAqL1xuY2xhc3MgRmlsZUhlbHBlciB7XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgZmlsZSB0aGF0IHdpbGwgY29weSBpdHMgY29udGVudCBmcm9tIGEgcmVtb3RlIFVSTCB0byBhIHNwZWNpZmllZCBkZXN0aW5hdGlvbiAocGF0aCArIG5hbWUpICovXG4gICAgc3RhdGljIGNyZWF0ZUNvcHlSZW1vdGVGaWxlKHsgcmVsYXRpdmVQYXRoLCBmaWxlTmFtZSwgdXJsIH0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhdGg6IHJlbGF0aXZlUGF0aCxcbiAgICAgICAgICAgIG5hbWU6IGZpbGVOYW1lLFxuICAgICAgICAgICAgdHlwZTogc2RrX2V4cG9ydGVyc18xLk91dHB1dEZpbGVUeXBlLmNvcHlSZW1vdGVVcmwsXG4gICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBmaWxlIHRoYXQgd3JpdGUgaXRzIGNvbnRlbnQgdG8gYSBzcGVjaWZpZWQgZGVzdGluYXRpb24gKHBhdGggKyBuYW1lKSAqL1xuICAgIHN0YXRpYyBjcmVhdGVUZXh0RmlsZSh7IHJlbGF0aXZlUGF0aCwgZmlsZU5hbWUsIGNvbnRlbnQgfSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGF0aDogcmVsYXRpdmVQYXRoLFxuICAgICAgICAgICAgbmFtZTogZmlsZU5hbWUsXG4gICAgICAgICAgICB0eXBlOiBzZGtfZXhwb3J0ZXJzXzEuT3V0cHV0RmlsZVR5cGUudGV4dCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgZmlsZSB0aGF0IHdyaXRlIGl0cyBjb250ZW50IHRvIGEgc3BlY2lmaWVkIGRlc3RpbmF0aW9uIChwYXRoICsgbmFtZSkgKi9cbiAgICBzdGF0aWMgY3JlYXRlQmluYXJ5RmlsZSh7IHJlbGF0aXZlUGF0aCwgZmlsZU5hbWUsIGRhdGEgfSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGF0aDogcmVsYXRpdmVQYXRoLFxuICAgICAgICAgICAgbmFtZTogZmlsZU5hbWUsXG4gICAgICAgICAgICB0eXBlOiBzZGtfZXhwb3J0ZXJzXzEuT3V0cHV0RmlsZVR5cGUuYmluYXJ5LFxuICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsZUhlbHBlciA9IEZpbGVIZWxwZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmlsZU5hbWVIZWxwZXIgPSB2b2lkIDA7XG5jbGFzcyBGaWxlTmFtZUhlbHBlciB7XG4gICAgLyoqXG4gICAgICogRW5zdXJlcyBhIGZpbGVuYW1lIGhhcyB0aGUgY29ycmVjdCBleHRlbnNpb25cbiAgICAgKi9cbiAgICBzdGF0aWMgZW5zdXJlRmlsZUV4dGVuc2lvbihmaWxlTmFtZSwgZXh0ZW5zaW9uKSB7XG4gICAgICAgIC8vIEVuc3VyZSBleHRlbnNpb24gc3RhcnRzIHdpdGggYSBkb3RcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEV4dGVuc2lvbiA9IGV4dGVuc2lvbi5zdGFydHNXaXRoKCcuJykgPyBleHRlbnNpb24gOiBgLiR7ZXh0ZW5zaW9ufWA7XG4gICAgICAgIGlmICghZmlsZU5hbWUudG9Mb3dlckNhc2UoKS5lbmRzV2l0aChub3JtYWxpemVkRXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsZU5hbWUgKyBub3JtYWxpemVkRXh0ZW5zaW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlTmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgZmlsZSBleHRlbnNpb25cbiAgICAgKi9cbiAgICBzdGF0aWMgcmVwbGFjZUZpbGVFeHRlbnNpb24oZmlsZU5hbWUsIG9sZEV4dCwgbmV3RXh0KSB7XG4gICAgICAgIC8vIEVuc3VyZSBleHRlbnNpb25zIHN0YXJ0IHdpdGggYSBkb3RcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZE9sZEV4dCA9IG9sZEV4dC5zdGFydHNXaXRoKCcuJykgPyBvbGRFeHQgOiBgLiR7b2xkRXh0fWA7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWROZXdFeHQgPSBuZXdFeHQuc3RhcnRzV2l0aCgnLicpID8gbmV3RXh0IDogYC4ke25ld0V4dH1gO1xuICAgICAgICByZXR1cm4gZmlsZU5hbWUucmVwbGFjZShuZXcgUmVnRXhwKGAke25vcm1hbGl6ZWRPbGRFeHR9JGApLCBub3JtYWxpemVkTmV3RXh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGVmYXVsdCBzdHlsZSBmaWxlIG5hbWUgZm9yIGEgdG9rZW4gdHlwZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXREZWZhdWx0U3R5bGVGaWxlTmFtZSh0eXBlLCBleHRlbnNpb24gPSAnLmNzcycpIHtcbiAgICAgICAgY29uc3QgYmFzZU5hbWVzID0ge1xuICAgICAgICAgICAgQ29sb3I6IFwiY29sb3JcIixcbiAgICAgICAgICAgIFR5cG9ncmFwaHk6IFwidHlwb2dyYXBoeVwiLFxuICAgICAgICAgICAgRGltZW5zaW9uOiBcImRpbWVuc2lvblwiLFxuICAgICAgICAgICAgU2l6ZTogXCJzaXplXCIsXG4gICAgICAgICAgICBTcGFjZTogXCJzcGFjZVwiLFxuICAgICAgICAgICAgT3BhY2l0eTogXCJvcGFjaXR5XCIsXG4gICAgICAgICAgICBGb250U2l6ZTogXCJmb250LXNpemVcIixcbiAgICAgICAgICAgIExpbmVIZWlnaHQ6IFwibGluZS1oZWlnaHRcIixcbiAgICAgICAgICAgIExldHRlclNwYWNpbmc6IFwibGV0dGVyLXNwYWNpbmdcIixcbiAgICAgICAgICAgIFBhcmFncmFwaFNwYWNpbmc6IFwicGFyYWdyYXBoLXNwYWNpbmdcIixcbiAgICAgICAgICAgIEJvcmRlcldpZHRoOiBcImJvcmRlci13aWR0aFwiLFxuICAgICAgICAgICAgQm9yZGVyUmFkaXVzOiBcImJvcmRlci1yYWRpdXNcIixcbiAgICAgICAgICAgIER1cmF0aW9uOiBcImR1cmF0aW9uXCIsXG4gICAgICAgICAgICBaSW5kZXg6IFwiei1pbmRleFwiLFxuICAgICAgICAgICAgU2hhZG93OiBcInNoYWRvd1wiLFxuICAgICAgICAgICAgQm9yZGVyOiBcImJvcmRlclwiLFxuICAgICAgICAgICAgR3JhZGllbnQ6IFwiZ3JhZGllbnRcIixcbiAgICAgICAgICAgIFN0cmluZzogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFByb2R1Y3RDb3B5OiBcInByb2R1Y3QtY29weVwiLFxuICAgICAgICAgICAgRm9udEZhbWlseTogXCJmb250LWZhbWlseVwiLFxuICAgICAgICAgICAgRm9udFdlaWdodDogXCJmb250LXdlaWdodFwiLFxuICAgICAgICAgICAgVGV4dENhc2U6IFwidGV4dC1jYXNlXCIsXG4gICAgICAgICAgICBUZXh0RGVjb3JhdGlvbjogXCJ0ZXh0LWRlY29yYXRpb25cIixcbiAgICAgICAgICAgIFZpc2liaWxpdHk6IFwidmlzaWJpbGl0eVwiLFxuICAgICAgICAgICAgQmx1cjogXCJibHVyXCJcbiAgICAgICAgfTtcbiAgICAgICAgLy8gRW5zdXJlIGV4dGVuc2lvbiBzdGFydHMgd2l0aCBhIGRvdFxuICAgICAgICBjb25zdCBub3JtYWxpemVkRXh0ZW5zaW9uID0gZXh0ZW5zaW9uLnN0YXJ0c1dpdGgoJy4nKSA/IGV4dGVuc2lvbiA6IGAuJHtleHRlbnNpb259YDtcbiAgICAgICAgcmV0dXJuIGJhc2VOYW1lc1t0eXBlXSArIG5vcm1hbGl6ZWRFeHRlbnNpb247XG4gICAgfVxufVxuZXhwb3J0cy5GaWxlTmFtZUhlbHBlciA9IEZpbGVOYW1lSGVscGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdlbmVyYWxIZWxwZXIgPSB2b2lkIDA7XG5jbGFzcyBHZW5lcmFsSGVscGVyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluZGVudGF0aW9uIHN0cmluZyBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIGxldmVscyBhbmQgdHlwZVxuICAgICAqIEBwYXJhbSBzcGFjZXMgLSBOdW1iZXIgb2Ygc3BhY2VzIHBlciBsZXZlbCAoZGVmYXVsdDogMilcbiAgICAgKiBAcmV0dXJucyBJbmRlbnRhdGlvbiBzdHJpbmdcbiAgICAgKi9cbiAgICBzdGF0aWMgaW5kZW50KHNwYWNlcyA9IDIpIHtcbiAgICAgICAgcmV0dXJuICcgJy5yZXBlYXQoTWF0aC5tYXgoMCwgc3BhY2VzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvcm1hdHMgYSBkaXNjbGFpbWVyIHRleHQgaW50byBhIEpTRG9jIGNvbW1lbnQgYmxvY2tcbiAgICAgKiBAcGFyYW0gZGlzY2xhaW1lciAtIFRoZSBkaXNjbGFpbWVyIHRleHQgdG8gZm9ybWF0XG4gICAgICogQHBhcmFtIGNvbnRlbnQgLSBUaGUgY29udGVudCB0byBhcHBlbmQgYWZ0ZXIgdGhlIGRpc2NsYWltZXJcbiAgICAgKiBAcmV0dXJucyBGb3JtYXR0ZWQgc3RyaW5nIHdpdGggZGlzY2xhaW1lciBjb21tZW50IGFuZCBjb250ZW50XG4gICAgICovXG4gICAgc3RhdGljIGFkZERpc2NsYWltZXIoZGlzY2xhaW1lciwgY29udGVudCkge1xuICAgICAgICBpZiAoIWRpc2NsYWltZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZERpc2NsYWltZXIgPSBkaXNjbGFpbWVyLnJlcGxhY2UoL1xcbi9nLCAnXFxuICogJyk7XG4gICAgICAgIHJldHVybiBgLyoqXFxuICogJHtmb3JtYXR0ZWREaXNjbGFpbWVyfSBcXG4gKi9cXG5cXG4ke2NvbnRlbnR9YDtcbiAgICB9XG59XG5leHBvcnRzLkdlbmVyYWxIZWxwZXIgPSBHZW5lcmFsSGVscGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5hbWluZ0hlbHBlciA9IHZvaWQgMDtcbmNvbnN0IFN0cmluZ0Nhc2VfMSA9IHJlcXVpcmUoXCIuLi9lbnVtcy9TdHJpbmdDYXNlXCIpO1xuY29uc3QgY2hhbmdlX2Nhc2VfMSA9IHJlcXVpcmUoXCJjaGFuZ2UtY2FzZVwiKTtcbmNsYXNzIE5hbWluZ0hlbHBlciB7XG4gICAgLyoqXG4gICAgICogSGVscGVyIG1ldGhvZCB0byBhcHBseSBmaW5kL3JlcGxhY2UgcGF0dGVybnMgdG8gYSBzdHJpbmdcbiAgICAgKiBAcGFyYW0gdGV4dCBUaGUgdGV4dCB0byBhcHBseSByZXBsYWNlbWVudHMgdG9cbiAgICAgKiBAcGFyYW0gZmluZFJlcGxhY2UgUmVjb3JkIG9mIGZpbmQvcmVwbGFjZSBwYXR0ZXJuc1xuICAgICAqIEByZXR1cm5zIFRoZSB0ZXh0IHdpdGggYWxsIHJlcGxhY2VtZW50cyBhcHBsaWVkXG4gICAgICovXG4gICAgc3RhdGljIGFwcGx5RmluZFJlcGxhY2UodGV4dCwgZmluZFJlcGxhY2UpIHtcbiAgICAgICAgaWYgKCFmaW5kUmVwbGFjZSlcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgICAvLyBTb3J0IGZpbmQgcGF0dGVybnMgYnkgbGVuZ3RoIChsb25nZXN0IGZpcnN0KSB0byBoYW5kbGUgb3ZlcmxhcHBpbmcgcGF0dGVybnNcbiAgICAgICAgY29uc3Qgc29ydGVkUGF0dGVybnMgPSBPYmplY3QuZW50cmllcyhmaW5kUmVwbGFjZSlcbiAgICAgICAgICAgIC5zb3J0KChbYV0sIFtiXSkgPT4gYi5sZW5ndGggLSBhLmxlbmd0aCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB0ZXh0O1xuICAgICAgICBmb3IgKGNvbnN0IFtmaW5kLCByZXBsYWNlXSBvZiBzb3J0ZWRQYXR0ZXJucykge1xuICAgICAgICAgICAgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcmFjdGVycyB0byBlbnN1cmUgdGhleSdyZSB0cmVhdGVkIGFzIGxpdGVyYWwgY2hhcmFjdGVyc1xuICAgICAgICAgICAgY29uc3QgZXNjYXBlZEZpbmQgPSBmaW5kLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCAnXFxcXCQmJyk7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSByZWdleCBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyB0aGUgd29yZCBpbiB0d28gd2F5czpcbiAgICAgICAgICAgIC8vIDEuIFVzaW5nIHN0YW5kYXJkIHdvcmQgYm91bmRhcmllcyAoXFxiKSAtIG1hdGNoZXMgdHJhbnNpdGlvbnMgYmV0d2VlbiB3b3JkL25vbi13b3JkIGNoYXJzXG4gICAgICAgICAgICAvLyAyLiBVc2luZyBsb29rYWhlYWQvbG9va2JlaGluZCB0byBtYXRjaCBhdCBzdHJpbmcgYm91bmRhcmllcyBvciBiZXR3ZWVuIHNwYWNlc1xuICAgICAgICAgICAgLy8gICAgVGhpcyBoYW5kbGVzIGNhc2VzIHdoZXJlIFxcYiBhbG9uZSBtaWdodCBub3Qgd29yayBjb3JyZWN0bHlcbiAgICAgICAgICAgIGNvbnN0IHBhdHRlcm4gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgLy8gUGFydCAxOiBNYXRjaCB3aXRoIHN0YW5kYXJkIHdvcmQgYm91bmRhcmllc1xuICAgICAgICAgICAgYFxcXFxiJHtlc2NhcGVkRmluZH1cXFxcYnxgICtcbiAgICAgICAgICAgICAgICAvLyBQYXJ0IDI6IE1hdGNoIGF0IHN0YXJ0IG9mIHN0cmluZyBvciBhZnRlciBzcGFjZSBBTkQgYmVmb3JlIGVuZCBvZiBzdHJpbmcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICBgKD88PV58XFxcXHMpJHtlc2NhcGVkRmluZH0oPz1cXFxcc3wkKWAsICdnaScgLy8gZzogZ2xvYmFsIChtYXRjaCBhbGwgb2NjdXJyZW5jZXMpLCBpOiBjYXNlLWluc2Vuc2l0aXZlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gUmVwbGFjZSBhbGwgb2NjdXJyZW5jZXMgd2l0aCB0aGUgcmVwbGFjZW1lbnQgc3RyaW5nXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzdGF0aWMgY29kZVNhZmVWYXJpYWJsZU5hbWVGb3JUb2tlbih0b2tlbiwgZm9ybWF0LCBwYXJlbnQsIHByZWZpeCwgZmluZFJlcGxhY2UsIHJlbW92ZUR1cGxpY2F0ZUZyYWdtZW50cyA9IHRydWUpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGFycmF5IHdpdGggYWxsIHBhdGggc2VnbWVudHMgYW5kIHRva2VuIG5hbWUgYXQgdGhlIGVuZFxuICAgICAgICBsZXQgZnJhZ21lbnRzID0gW107XG4gICAgICAgIC8vIEFkZCBwYXJlbnQgcGF0aCBhbmQgbmFtZVxuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICBmcmFnbWVudHMucHVzaCguLi5wYXJlbnQucGF0aCk7XG4gICAgICAgICAgICBpZiAoIXBhcmVudC5pc1Jvb3QpIHtcbiAgICAgICAgICAgICAgICBmcmFnbWVudHMucHVzaChwYXJlbnQubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RlcCAyOiBIYW5kbGUgdG9rZW4gbmFtZSBpbnRlbGxpZ2VudGx5IHRvIGF2b2lkIHdvcmQtbGV2ZWwgZHVwbGljYXRpb25cbiAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGlmIHRoZSBwYXRoIGVuZHMgd2l0aCBcIlJlZFwiIGFuZCB0b2tlbiBuYW1lIGlzIFwiUmVkIDUwMFwiLFxuICAgICAgICAvLyB3ZSBvbmx5IHdhbnQgdG8gYWRkIFwiNTAwXCIgdG8gYXZvaWQgXCJSZWQgUmVkIDUwMFwiXG4gICAgICAgIGNvbnN0IHRva2VuTmFtZVBhcnRzID0gdG9rZW4ubmFtZS5zcGxpdCgvW1xccy1fXSsvKTtcbiAgICAgICAgLy8gVGhpcyBjaGVja3MgaWYgdGhlIGZpcnN0IHdvcmQgb2YgdG9rZW4gbmFtZSBtYXRjaGVzIHRoZSBsYXN0IGZyYWdtZW50IChjYXNlIGluc2Vuc2l0aXZlKVxuICAgICAgICAvLyBhbmQgaWYgc28sIG9ubHkgYWRkcyB0aGUgcmVtYWluaW5nIHBhcnRzIG9mIHRoZSB0b2tlbiBuYW1lXG4gICAgICAgIGlmIChmcmFnbWVudHMubGVuZ3RoID4gMCAmJiB0b2tlbk5hbWVQYXJ0cy5sZW5ndGggPiAxICYmXG4gICAgICAgICAgICB0b2tlbk5hbWVQYXJ0c1swXS50b0xvd2VyQ2FzZSgpID09PSBmcmFnbWVudHNbZnJhZ21lbnRzLmxlbmd0aCAtIDFdLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoKHRva2VuTmFtZVBhcnRzLnNsaWNlKDEpLmpvaW4oJyAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmcmFnbWVudHMucHVzaCh0b2tlbi5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdGVwIDM6IEFwcGx5IGZpbmQvcmVwbGFjZSB0byBwYXRoIGFuZCBuYW1lIGZyYWdtZW50cyBvbmx5IChub3QgcHJlZml4KVxuICAgICAgICAvLyBUaGlzIGFsbG93cyBmb3IgY3VzdG9tIHRleHQgcmVwbGFjZW1lbnRzIGluIHRoZSB2YXJpYWJsZSBuYW1lXG4gICAgICAgIGlmIChmaW5kUmVwbGFjZSkge1xuICAgICAgICAgICAgLy8gSm9pbiBwYXRoIGFuZCBuYW1lIGZvciBmaW5kL3JlcGxhY2UgcHJvY2Vzc2luZ1xuICAgICAgICAgICAgbGV0IHBhdGhBbmROYW1lID0gZnJhZ21lbnRzLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIC8vIEFwcGx5IGZpbmQvcmVwbGFjZSB1c2luZyB0aGUgaGVscGVyIG1ldGhvZFxuICAgICAgICAgICAgcGF0aEFuZE5hbWUgPSBOYW1pbmdIZWxwZXIuYXBwbHlGaW5kUmVwbGFjZShwYXRoQW5kTmFtZSwgZmluZFJlcGxhY2UpO1xuICAgICAgICAgICAgLy8gU3BsaXQgYmFjayBpbnRvIGZyYWdtZW50cyBhbmQgY2xlYW4gdXBcbiAgICAgICAgICAgIGZyYWdtZW50cyA9IHBhdGhBbmROYW1lXG4gICAgICAgICAgICAgICAgLnNwbGl0KC9cXHMrLylcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGYgPT4gZi5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIC5tYXAoZiA9PiBmLnRyaW0oKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RlcCA0OiBBZGQgcHJlZml4IGFmdGVyIGZpbmQvcmVwbGFjZSAocHJlZml4IHNob3VsZCBub3QgYmUgYWZmZWN0ZWQgYnkgZmluZC9yZXBsYWNlKVxuICAgICAgICBpZiAocHJlZml4ICYmIHByZWZpeC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmcmFnbWVudHMudW5zaGlmdChwcmVmaXgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFN0ZXAgNTogQXBwbHkgY2FzZSBmb3JtYXR0aW5nIHRvIHRoZSBmaW5hbCBmcmFnbWVudHNcbiAgICAgICAgcmV0dXJuIE5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZShmcmFnbWVudHMsIGZvcm1hdCwgdW5kZWZpbmVkLCByZW1vdmVEdXBsaWNhdGVGcmFnbWVudHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIG5hbWUgaW50byBzcGVjaWZpYyBjYXNlIGZyb20gcHJvdmlkZWQgcGF0aCBmcmFnbWVudHMuIFdpbGwgYWxzbyBzbWFydGx5IHNwbGl0IGZyYWdtZW50cyBpbnRvIHN1YmZyYWdtZW50cyAtXG4gICAgICogaWYgdGhleSBjb250YWluIHNwYWNlcywgY2FzZSBjaGFuZ2VzIGZyb20gb25lIGxldHRlciB0byBhbm90aGVyIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEFsc28gZml4ZXMgYWRkaXRpb25hbCBwcm9ibGVtcywgbGlrZSB0aGUgZmFjdCB0aGF0IHZhcmlhYmxlIG5hbWUgY2FuJ3Qgc3RhcnQgd2l0aCBudW1iZXJzIC0gdmFyaWFibGUgd2lsbCBiZSBwcmVmaXhlZCB3aXRoIFwiX1wiIGluIHRoYXQgY2FzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjb2RlU2FmZVZhcmlhYmxlTmFtZShmcmFnbWVudHMsIGZvcm1hdCwgZmluZFJlcGxhY2UsIHJlbW92ZUR1cGxpY2F0ZUZyYWdtZW50cyA9IGZhbHNlKSB7XG4gICAgICAgIC8vIENvbnZlcnQgZnJhZ21lbnRzIHRvIGEgc2luZ2xlIHNlbnRlbmNlIGZvciBwcm9jZXNzaW5nXG4gICAgICAgIGxldCBzZW50ZW5jZSA9IHR5cGVvZiBmcmFnbWVudHMgPT09ICdzdHJpbmcnID8gZnJhZ21lbnRzIDogZnJhZ21lbnRzLmpvaW4oJyAnKTtcbiAgICAgICAgLy8gQXBwbHkgZmluZC9yZXBsYWNlIGlmIHByb3ZpZGVkIHVzaW5nIHRoZSBoZWxwZXIgbWV0aG9kXG4gICAgICAgIHNlbnRlbmNlID0gTmFtaW5nSGVscGVyLmFwcGx5RmluZFJlcGxhY2Uoc2VudGVuY2UsIGZpbmRSZXBsYWNlKTtcbiAgICAgICAgLy8gT25seSBhbGxvdyBsZXR0ZXJzLCBkaWdpdHMsIHVuZGVyc2NvcmUgYW5kIGh5cGhlblxuICAgICAgICBzZW50ZW5jZSA9IHNlbnRlbmNlLnJlcGxhY2VBbGwoL1teYS16QS1aMC05Xy1dL2csICdfJyk7XG4gICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGlmIHJlcXVlc3RlZFxuICAgICAgICBpZiAocmVtb3ZlRHVwbGljYXRlRnJhZ21lbnRzKSB7XG4gICAgICAgICAgICAvLyBGaXJzdCBjb252ZXJ0IHRvIGtlYmFiQ2FzZSBmb3Igbm9ybWFsaXphdGlvblxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZFN0cmluZyA9ICgwLCBjaGFuZ2VfY2FzZV8xLmtlYmFiQ2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgLy8gU3BsaXQgYnkgXCItXCIgdG8gZ2V0IG5ldyBmcmFnbWVudHNcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRGcmFnbWVudHMgPSBub3JtYWxpemVkU3RyaW5nLnNwbGl0KCctJykuZmlsdGVyKGYgPT4gZi5sZW5ndGggPiAwKTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gbm9ybWFsaXplZCBmcmFnbWVudHNcbiAgICAgICAgICAgIGNvbnN0IHVuaXF1ZUZyYWdtZW50cyA9IG5vcm1hbGl6ZWRGcmFnbWVudHMuZmlsdGVyKChmcmFnbWVudCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBLZWVwIGlmIGl0J3MgZmlyc3QgZWxlbWVudCBvciBkaWZmZXJlbnQgZnJvbSBwcmV2aW91c1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gMCB8fCBmcmFnbWVudCAhPT0gbm9ybWFsaXplZEZyYWdtZW50c1tpbmRleCAtIDFdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBKb2luIGJhY2sgaW50byBhIHNlbnRlbmNlXG4gICAgICAgICAgICBzZW50ZW5jZSA9IHVuaXF1ZUZyYWdtZW50cy5qb2luKCcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2UuY2FtZWxDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEuY2FtZWxDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmNhcGl0YWxDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEuY2FwaXRhbENhc2UpKHNlbnRlbmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2UuY29uc3RhbnRDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEuY29uc3RhbnRDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmRvdENhc2U6XG4gICAgICAgICAgICAgICAgc2VudGVuY2UgPSAoMCwgY2hhbmdlX2Nhc2VfMS5kb3RDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLnRyYWluQ2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLnRyYWluQ2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5ub0Nhc2U6XG4gICAgICAgICAgICAgICAgc2VudGVuY2UgPSAoMCwgY2hhbmdlX2Nhc2VfMS5ub0Nhc2UpKHNlbnRlbmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2Uua2ViYWJDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEua2ViYWJDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLnBhc2NhbENhc2U6XG4gICAgICAgICAgICAgICAgc2VudGVuY2UgPSAoMCwgY2hhbmdlX2Nhc2VfMS5wYXNjYWxDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLnBhdGhDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEucGF0aENhc2UpKHNlbnRlbmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2Uuc2VudGVuY2VDYXNlOlxuICAgICAgICAgICAgICAgIHNlbnRlbmNlID0gKDAsIGNoYW5nZV9jYXNlXzEuc2VudGVuY2VDYXNlKShzZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLnNuYWtlQ2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLnNuYWtlQ2FzZSkoc2VudGVuY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5mbGF0Q2FzZTpcbiAgICAgICAgICAgICAgICBzZW50ZW5jZSA9ICgwLCBjaGFuZ2VfY2FzZV8xLmNhbWVsQ2FzZSkoc2VudGVuY2UpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSBhbGwgdW5kZXJzY29yZXMgaWYgZm9ybWF0IGlzIG5vdCBzbmFrZV9jYXNlLCBzaW5jZSB0aGUgbGlicmFyeSBoYXMgdW5pbnRlbmRlZCBiZWhhdmlvciB3aXRoIG51bWJlcmljIHZhbHVlcyBpbiB0aGlzIGNhc2VcbiAgICAgICAgaWYgKGZvcm1hdCAhPT0gU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2Uuc25ha2VDYXNlICYmIGZvcm1hdCAhPT0gU3RyaW5nQ2FzZV8xLlN0cmluZ0Nhc2UuY29uc3RhbnRDYXNlKSB7XG4gICAgICAgICAgICBzZW50ZW5jZSA9IHNlbnRlbmNlLnJlcGxhY2VBbGwoJ18nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdmFyaWFibGUgc3RhcnRzIHdpdGggYW55dGhpbmcgYnV0IGxldHRlciwgYWRkIFwiX1wiIGluIGZyb250IG9mIGl0XG4gICAgICAgIGlmIChzZW50ZW5jZS5tYXRjaCgvXlteYS16QS1aXS8pKSB7XG4gICAgICAgICAgICBzZW50ZW5jZSA9ICdfJyArIHNlbnRlbmNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZW50ZW5jZTtcbiAgICB9XG4gICAgLyoqIENvbnZlcnQgYW55IHN0cmluZyB0byBDU1MgdmFyaWFibGUgcmVmZXJlbmNlICovXG4gICAgc3RhdGljIG5hbWVBc0NTU1ZhclJlZmVyZW5jZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBgdmFyKC0tJHtuYW1lfSlgO1xuICAgIH1cbiAgICAvKiogQ29udmVydCBhbnkgc3RyaW5nIHRvIENTUyB2YXJpYWJsZSBkZWNsYXJhdGlvbiAqL1xuICAgIHN0YXRpYyBuYW1lQXNDU1NWYXJEZWNsYXJhdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBgLS0ke25hbWV9YDtcbiAgICB9XG59XG5leHBvcnRzLk5hbWluZ0hlbHBlciA9IE5hbWluZ0hlbHBlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UaGVtZUhlbHBlciA9IHZvaWQgMDtcbmNvbnN0IE5hbWluZ0hlbHBlcl8xID0gcmVxdWlyZShcIi4vTmFtaW5nSGVscGVyXCIpO1xuY29uc3QgU3RyaW5nQ2FzZV8xID0gcmVxdWlyZShcIi4uL2VudW1zL1N0cmluZ0Nhc2VcIik7XG5jbGFzcyBUaGVtZUhlbHBlciB7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRva2VuIHR5cGUgaGFzIGFueSB0aGVtZWQgdG9rZW5zIGluIGdpdmVuIHRoZW1lXG4gICAgICogQHBhcmFtIHRva2VucyAtIEFsbCB0b2tlbnNcbiAgICAgKiBAcGFyYW0gdHlwZSAtIFRva2VuIHR5cGUgdG8gY2hlY2tcbiAgICAgKiBAcGFyYW0gdGhlbWUgLSBUaGVtZSB0byBjaGVjayBhZ2FpbnN0XG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgdHlwZSBoYXMgYW55IHRoZW1lZCB0b2tlbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgaGFzVGhlbWVkVG9rZW5zKHRva2VucywgdHlwZSwgdGhlbWUpIHtcbiAgICAgICAgY29uc3QgdG9rZW5zT2ZUeXBlID0gdG9rZW5zLmZpbHRlcigodG9rZW4pID0+IHRva2VuLnRva2VuVHlwZSA9PT0gdHlwZSk7XG4gICAgICAgIGNvbnN0IG92ZXJyaWRkZW5Ub2tlbklkcyA9IG5ldyBTZXQodGhlbWUub3ZlcnJpZGRlblRva2Vucy5tYXAodCA9PiB0LmlkKSk7XG4gICAgICAgIHJldHVybiB0b2tlbnNPZlR5cGUuc29tZSh0b2tlbiA9PiBvdmVycmlkZGVuVG9rZW5JZHMuaGFzKHRva2VuLmlkKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdG9rZW5zIHRvIG9ubHkgaW5jbHVkZSB0aG9zZSB0aGF0IGFyZSB0aGVtZWRcbiAgICAgKiBAcGFyYW0gdG9rZW5zIC0gVG9rZW5zIHRvIGZpbHRlclxuICAgICAqIEBwYXJhbSB0aGVtZSAtIFRoZW1lIHRvIGNoZWNrIGFnYWluc3RcbiAgICAgKiBAcmV0dXJucyBGaWx0ZXJlZCBhcnJheSBvZiB0b2tlbnMgdGhhdCBoYXZlIHRoZW1lIG92ZXJyaWRlc1xuICAgICAqL1xuICAgIHN0YXRpYyBmaWx0ZXJUaGVtZWRUb2tlbnModG9rZW5zLCB0aGVtZSkge1xuICAgICAgICBjb25zdCBvdmVycmlkZGVuVG9rZW5JZHMgPSBuZXcgU2V0KHRoZW1lLm92ZXJyaWRkZW5Ub2tlbnMubWFwKHQgPT4gdC5pZCkpO1xuICAgICAgICByZXR1cm4gdG9rZW5zLmZpbHRlcih0b2tlbiA9PiBvdmVycmlkZGVuVG9rZW5JZHMuaGFzKHRva2VuLmlkKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlbWUgaWRlbnRpZmllciBmb3IgZmlsZSBvcmdhbml6YXRpb25cbiAgICAgKiBAcGFyYW0gdGhlbWUgLSBUaGVtZSBvYmplY3Qgb3Igc3RyaW5nXG4gICAgICogQHBhcmFtIHN0cmluZ0Nhc2UgLSBDYXNlIHN0eWxlIHRvIGFwcGx5IHRvIHRoZSBpZGVudGlmaWVyIChkZWZhdWx0cyB0byBrZWJhYkNhc2UpXG4gICAgICogQHJldHVybnMgTm9ybWFsaXplZCB0aGVtZSBpZGVudGlmaWVyIGluIHNwZWNpZmllZCBjYXNlXG4gICAgICovXG4gICAgc3RhdGljIGdldFRoZW1lSWRlbnRpZmllcih0aGVtZSwgc3RyaW5nQ2FzZSA9IFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmtlYmFiQ2FzZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoZW1lID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHJldHVybiB0aGVtZTtcbiAgICAgICAgY29uc3QgaWRlbnRpZmllciA9IHRoZW1lLmNvZGVOYW1lIHx8IHRoZW1lLm5hbWU7XG4gICAgICAgIHJldHVybiBOYW1pbmdIZWxwZXJfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoaWRlbnRpZmllciwgc3RyaW5nQ2FzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgZGlzcGxheSBuYW1lIGZvciB0aGVtZVxuICAgICAqIEBwYXJhbSB0aGVtZSAtIFRoZW1lIG9iamVjdCBvciBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyBUaGVtZSBkaXNwbGF5IG5hbWVcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0VGhlbWVOYW1lKHRoZW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhlbWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIHRoZW1lO1xuICAgICAgICBjb25zdCBpZGVudGlmaWVyID0gdGhlbWUuY29kZU5hbWUgfHwgdGhlbWUubmFtZTtcbiAgICAgICAgcmV0dXJuIE5hbWluZ0hlbHBlcl8xLk5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZShpZGVudGlmaWVyLCBTdHJpbmdDYXNlXzEuU3RyaW5nQ2FzZS5jYXBpdGFsQ2FzZSk7XG4gICAgfVxufVxuZXhwb3J0cy5UaGVtZUhlbHBlciA9IFRoZW1lSGVscGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN1cmVPcHRpb25hbFJlZmVyZW5jZSA9IHN1cmVPcHRpb25hbFJlZmVyZW5jZTtcbi8qKiBGaW5kcyByZWZlcmVuY2UgYW5kIG1ha2VzIHN1cmUgaXQgZXhpc3RzIGlmIHJlZmVyZW5jZSB3YXMgcHJvdmlkZWQuIElmIG51bGwgd2FzIHByb3ZpZGVkLCBudWxsIGlzIG9uIHRoZSBvdXRwdXQgYXMgd2VsbCB0byBtYWtlIHNlZWtpbmcgb3V0c2lkZSBmZXcgbGluZXMgc21hbGxlciAqL1xuZnVuY3Rpb24gc3VyZU9wdGlvbmFsUmVmZXJlbmNlKHJlZmVyZW5jZUlkLCBhbGxUb2tlbnMsIGFsbG93UmVmZXJlbmNlcyA9IHRydWUpIHtcbiAgICBpZiAoIXJlZmVyZW5jZUlkIHx8ICFhbGxvd1JlZmVyZW5jZXMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHRva2VuID0gYWxsVG9rZW5zLmdldChyZWZlcmVuY2VJZCk7XG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyeWluZyB0byByZXRyaWV2ZSB1bmtub3duIHJlZmVyZW5jZWQgdG9rZW4gJHtyZWZlcmVuY2VJZH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRva2VuTmFtZVRyYWNrZXIgPSB2b2lkIDA7XG5jb25zdCBOYW1pbmdIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL05hbWluZ0hlbHBlclwiKTtcbi8qKlxuICogVHJhY2tzIGFuZCBnZW5lcmF0ZXMgdW5pcXVlIG5hbWVzIGZvciBkZXNpZ24gdG9rZW5zIHdoaWxlIG1haW50YWluaW5nIGNvbnNpc3RlbmN5XG4gKiBhY3Jvc3MgbXVsdGlwbGUgcmVmZXJlbmNlcyB0byB0aGUgc2FtZSB0b2tlbi4gVGhpcyBlbnN1cmVzIHRoYXQgZWFjaCB0b2tlbiBnZXRzXG4gKiBhIHVuaXF1ZSwgY29kZS1zYWZlIG5hbWUgdGhhdCBjYW4gYmUgdXNlZCBpbiBnZW5lcmF0ZWQgY29kZS5cbiAqL1xuY2xhc3MgVG9rZW5OYW1lVHJhY2tlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKiBNYXBzIHRva2VuIElEcyB0byB0aGVpciBnZW5lcmF0ZWQgdW5pcXVlIG5hbWVzICovXG4gICAgICAgIHRoaXMudG9rZW5OYW1lTWFwID0gbmV3IE1hcCgpOyAvLyB0b2tlbi5pZCAtPiBnZW5lcmF0ZWQgbmFtZVxuICAgICAgICAvKiogTWFwcyBnZW5lcmF0ZWQgbmFtZXMgYmFjayB0byB0b2tlbiBJRHMgdG8gY2hlY2sgZm9yIG5hbWluZyBjb25mbGljdHMgKi9cbiAgICAgICAgdGhpcy5uYW1lVG9Ub2tlbk1hcCA9IG5ldyBNYXAoKTsgLy8gZ2VuZXJhdGVkIG5hbWUgLT4gdG9rZW4uaWRcbiAgICAgICAgLyoqIE1hcHMgaGllcmFyY2h5IGxldmVsICsgbmFtZSB0byB0b2tlbiBJRHMgKi9cbiAgICAgICAgdGhpcy5oaWVyYXJjaHlOYW1lTWFwID0gbmV3IE1hcCgpOyAvLyBcInBhdGgvbmFtZVwiIC0+IFNldCBvZiB0b2tlbiBJRHNcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBzdG9yZWQgdG9rZW4gbmFtZSBtYXBwaW5ncywgZWZmZWN0aXZlbHkgcmVzZXR0aW5nIHRoZSB0cmFja2VyIHN0YXRlLlxuICAgICAqL1xuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnRva2VuTmFtZU1hcC5jbGVhcigpO1xuICAgICAgICB0aGlzLm5hbWVUb1Rva2VuTWFwLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuaGllcmFyY2h5TmFtZU1hcC5jbGVhcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgY2xlYW4sIHVuaXF1ZSBuYW1lIGZvciBhIHRva2VuIHdpdGhvdXQgYW55IGdyb3VwIHByZWZpeGVzLlxuICAgICAqIFVzZWQgZm9yIGhpZXJhcmNoaWNhbCBzdHJ1Y3R1cmVzIHdoZXJlIHRoZSBwYXRoIGhhbmRsZXMgZ3JvdXBpbmcuXG4gICAgICovXG4gICAgZ2V0U2ltcGxlVG9rZW5OYW1lKHRva2VuLCBmb3JtYXQsIGZvckV4cG9ydCA9IGZhbHNlLCBwYXRoID0gW10gLy8gQWRkIHBhdGggcGFyYW1ldGVyIHRvIGNoZWNrIGhpZXJhcmNoeSBsZXZlbFxuICAgICkge1xuICAgICAgICAvLyBDcmVhdGUgYSB1bmlxdWUga2V5IGZvciB0aGlzIGhpZXJhcmNoeSBsZXZlbFxuICAgICAgICBjb25zdCBoaWVyYXJjaHlLZXkgPSBwYXRoLmpvaW4oJy8nKTtcbiAgICAgICAgY29uc3QgaGllcmFyY2h5RnVsbEtleSA9IGAke2hpZXJhcmNoeUtleX0vJHt0b2tlbi5uYW1lfWA7XG4gICAgICAgIC8vIElmIHdlJ3JlIGxvb2tpbmcgdXAgYSBuYW1lIGZvciByZWZlcmVuY2UgYW5kIGl0IHdhcyBhbHJlYWR5IGdlbmVyYXRlZCwgdXNlIHRoYXRcbiAgICAgICAgaWYgKCFmb3JFeHBvcnQgJiYgdGhpcy50b2tlbk5hbWVNYXAuaGFzKHRva2VuLmlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5OYW1lTWFwLmdldCh0b2tlbi5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHRoZSBiYXNlIG5hbWUgd2l0aG91dCBhbnkgcHJlZml4ZXNcbiAgICAgICAgbGV0IG5hbWUgPSBOYW1pbmdIZWxwZXJfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUodG9rZW4ubmFtZSwgZm9ybWF0KTtcbiAgICAgICAgLy8gR2V0IG9yIGNyZWF0ZSB0aGUgc2V0IG9mIHRva2VuIElEcyBmb3IgdGhpcyBoaWVyYXJjaHkgbGV2ZWwgYW5kIG5hbWVcbiAgICAgICAgaWYgKCF0aGlzLmhpZXJhcmNoeU5hbWVNYXAuaGFzKGhpZXJhcmNoeUZ1bGxLZXkpKSB7XG4gICAgICAgICAgICB0aGlzLmhpZXJhcmNoeU5hbWVNYXAuc2V0KGhpZXJhcmNoeUZ1bGxLZXksIG5ldyBTZXQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9rZW5zQXRMZXZlbCA9IHRoaXMuaGllcmFyY2h5TmFtZU1hcC5nZXQoaGllcmFyY2h5RnVsbEtleSk7XG4gICAgICAgIC8vIE9ubHkgYWRkIHN1ZmZpeCBpZiB0aGVyZSdzIGFub3RoZXIgdG9rZW4gd2l0aCB0aGUgc2FtZSBuYW1lIGF0IHRoZSBzYW1lIGxldmVsXG4gICAgICAgIGlmICh0b2tlbnNBdExldmVsLnNpemUgPiAwICYmICF0b2tlbnNBdExldmVsLmhhcyh0b2tlbi5pZCkpIHtcbiAgICAgICAgICAgIG5hbWUgPSBgJHtuYW1lfV8ke3Rva2Vuc0F0TGV2ZWwuc2l6ZX1gO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyYWNrIHRoZSB0b2tlbiBhdCB0aGlzIGhpZXJhcmNoeSBsZXZlbFxuICAgICAgICB0b2tlbnNBdExldmVsLmFkZCh0b2tlbi5pZCk7XG4gICAgICAgIC8vIFRyYWNrIHRoZSBuYW1lIGlmIG5vdCBmb3IgZXhwb3J0XG4gICAgICAgIGlmICghZm9yRXhwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLnRva2VuTmFtZU1hcC5zZXQodG9rZW4uaWQsIG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5uYW1lVG9Ub2tlbk1hcC5zZXQobmFtZSwgdG9rZW4uaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgb3IgcmV0cmlldmVzIGEgdW5pcXVlLCBjb2RlLXNhZmUgbmFtZSBmb3IgYSBnaXZlbiB0b2tlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0b2tlbiAtIFRoZSBkZXNpZ24gdG9rZW4gdGhhdCBuZWVkcyBhIG5hbWVcbiAgICAgKiBAcGFyYW0gdG9rZW5Hcm91cHMgLSBBcnJheSBvZiBhbGwgdG9rZW4gZ3JvdXBzLCB1c2VkIHRvIGZpbmQgdGhlIHRva2VuJ3MgcGFyZW50IGdyb3VwXG4gICAgICogQHBhcmFtIGZvcm1hdCAtIFRoZSBkZXNpcmVkIGNhc2UgZm9ybWF0IGZvciB0aGUgZ2VuZXJhdGVkIG5hbWUgKGUuZy4sIGNhbWVsQ2FzZSwgc25ha2VfY2FzZSlcbiAgICAgKiBAcGFyYW0gcHJlZml4IC0gT3B0aW9uYWwgcHJlZml4IHRvIGFkZCB0byB0aGUgZ2VuZXJhdGVkIG5hbWVcbiAgICAgKiBAcGFyYW0gZm9yRXhwb3J0IC0gSWYgdHJ1ZSwgZ2VuZXJhdGVzIGEgbmV3IG5hbWUgd2l0aG91dCBzdG9yaW5nIGl0LiBJZiBmYWxzZSwgc3RvcmVzIGFuZCByZXVzZXMgbmFtZXNcbiAgICAgKiBAcmV0dXJucyBBIHVuaXF1ZSwgY29kZS1zYWZlIG5hbWUgZm9yIHRoZSB0b2tlblxuICAgICAqL1xuICAgIGdldFRva2VuTmFtZSh0b2tlbiwgdG9rZW5Hcm91cHMsIGZvcm1hdCwgcHJlZml4LCBmb3JFeHBvcnQgPSBmYWxzZSkge1xuICAgICAgICAvLyBJZiB3ZSdyZSBsb29raW5nIHVwIGEgbmFtZSBmb3IgcmVmZXJlbmNlIGFuZCBpdCB3YXMgYWxyZWFkeSBnZW5lcmF0ZWQsIHVzZSB0aGF0XG4gICAgICAgIGlmICghZm9yRXhwb3J0ICYmIHRoaXMudG9rZW5OYW1lTWFwLmhhcyh0b2tlbi5pZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRva2VuTmFtZU1hcC5nZXQodG9rZW4uaWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRva2VuR3JvdXBzLmZpbmQoKGdyb3VwKSA9PiBncm91cC5pZCA9PT0gdG9rZW4ucGFyZW50R3JvdXBJZCk7XG4gICAgICAgIC8vIEdldCB0aGUgYmFzZSBuYW1lXG4gICAgICAgIGxldCBuYW1lID0gTmFtaW5nSGVscGVyXzEuTmFtaW5nSGVscGVyLmNvZGVTYWZlVmFyaWFibGVOYW1lRm9yVG9rZW4odG9rZW4sIGZvcm1hdCwgcGFyZW50LCBwcmVmaXgpO1xuICAgICAgICBsZXQgY291bnRlciA9IDE7XG4gICAgICAgIC8vIElmIG5hbWUgaXMgdGFrZW4gYnkgYSBkaWZmZXJlbnQgdG9rZW4sIGFkZCBhIHN1ZmZpeFxuICAgICAgICB3aGlsZSAodGhpcy5uYW1lVG9Ub2tlbk1hcC5oYXMobmFtZSkgJiYgdGhpcy5uYW1lVG9Ub2tlbk1hcC5nZXQobmFtZSkgIT09IHRva2VuLmlkKSB7XG4gICAgICAgICAgICBuYW1lID0gYCR7bmFtZX1fY29weV8ke2NvdW50ZXIrK31gO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyYWNrIHRoZSBuYW1lIGlmIG5vdCBmb3IgZXhwb3J0XG4gICAgICAgIGlmICghZm9yRXhwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLnRva2VuTmFtZU1hcC5zZXQodG9rZW4uaWQsIG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5uYW1lVG9Ub2tlbk1hcC5zZXQobmFtZSwgdG9rZW4uaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9rZW5OYW1lVHJhY2tlciA9IFRva2VuTmFtZVRyYWNrZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV3JpdGVUb2tlblByb3BTdG9yZSA9IHZvaWQgMDtcbmNvbnN0IE5hbWluZ0hlbHBlcl8xID0gcmVxdWlyZShcIi4vTmFtaW5nSGVscGVyXCIpO1xuY29uc3QgU3RyaW5nQ2FzZV8xID0gcmVxdWlyZShcIi4uL2VudW1zL1N0cmluZ0Nhc2VcIik7XG4vKipcbiAqIENsYXNzIHJlc3BvbnNpYmxlIGZvciBzdG9yaW5nIGFuZCB1cGRhdGluZyB0b2tlbiBwcm9wZXJ0aWVzIGluIFN1cGVybm92YS5cbiAqL1xuY2xhc3MgV3JpdGVUb2tlblByb3BTdG9yZSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHN0b3JlIHdpdGggbmVjZXNzYXJ5IGRlcGVuZGVuY2llcy5cbiAgICAgKiBAcGFyYW0gc2RrIC0gVGhlIFN1cGVybm92YSBTREsgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSByZW1vdGUgdmVyc2lvbiBpZGVudGlmaWVyIHRvIHdyaXRlIHRvLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNkaywgdGFyZ2V0KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yZXMgdG9rZW4gcHJvcGVydHkgdmFsdWVzIHRvIGJlIHdyaXR0ZW4uXG4gICAgICAgICAqIE91dGVyIE1hcDogcHJvcGVydHkgbmFtZSAtPiBJbm5lciBNYXA6IHRva2VuIC0+IHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50b2tlblByb3BlcnR5V3JpdGVNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuc2RrID0gc2RrO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcmVzIGEgdmFsdWUgZm9yIGEgc3BlY2lmaWMgdG9rZW4gYW5kIHByb3BlcnR5IG5hbWUgdG8gYmUgd3JpdHRlbiBsYXRlci5cbiAgICAgKiBAcGFyYW0gdG9rZW4gLSBUaGUgdG9rZW4gdG8gYXNzb2NpYXRlIHRoZSB2YWx1ZSB3aXRoLlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHN0b3JlLlxuICAgICAqL1xuICAgIHN0b3JlVmFsdWVGb3JUb2tlblByb3BlcnR5KHRva2VuLCBwcm9wZXJ0eU5hbWUsIHZhbHVlKSB7XG4gICAgICAgIC8vIEdldCBvciBpbml0aWFsaXplIHRoZSBtYXAgZm9yIHRoaXMgcHJvcGVydHkgbmFtZVxuICAgICAgICBsZXQgdG9rZW5NYXAgPSB0aGlzLnRva2VuUHJvcGVydHlXcml0ZU1hcC5nZXQocHJvcGVydHlOYW1lKTtcbiAgICAgICAgaWYgKCF0b2tlbk1hcCkge1xuICAgICAgICAgICAgdG9rZW5NYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICB0aGlzLnRva2VuUHJvcGVydHlXcml0ZU1hcC5zZXQocHJvcGVydHlOYW1lLCB0b2tlbk1hcCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSB2YWx1ZSB3aXRoIHRoZSB0b2tlblxuICAgICAgICB0b2tlbk1hcC5zZXQodG9rZW4sIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBhbGwgc3RvcmVkIHRva2VuIHByb3BlcnRpZXMgaW4gdGhlIGV4dGVybmFsIHN5c3RlbS5cbiAgICAgKiBGZXRjaGVzIGV4aXN0aW5nIHByb3BlcnRpZXMgb25jZSBhbmQgY3JlYXRlcyBtaXNzaW5nIG9uZXMgZWZmaWNpZW50bHkuXG4gICAgICovXG4gICAgYXN5bmMgYmF0Y2hVcGRhdGVTdG9yZWRUb2tlblByb3BlcnRpZXMoKSB7XG4gICAgICAgIC8vIEV4aXQgZWFybHkgaWYgdGhlcmUgYXJlIG5vIHByb3BlcnRpZXMgdG8gdXBkYXRlXG4gICAgICAgIGlmICh0aGlzLnRva2VuUHJvcGVydHlXcml0ZU1hcC5zaXplID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmV0Y2ggYWxsIGV4aXN0aW5nIHByb3BlcnRpZXMgb25jZSBhbmQgbWFwIHRoZW0gYnkgbmFtZSBmb3IgcXVpY2sgbG9va3VwXG4gICAgICAgIGxldCBwcm9wZXJ0aWVzID0gYXdhaXQgdGhpcy5zZGsudG9rZW5zLmdldFRva2VuUHJvcGVydGllcyh0aGlzLnRhcmdldCk7XG4gICAgICAgIC8vIFByb2Nlc3MgZWFjaCBwcm9wZXJ0eSBhbmQgaXRzIGFzc29jaWF0ZWQgdG9rZW4tdmFsdWUgcGFpcnNcbiAgICAgICAgZm9yIChjb25zdCBbcHJvcGVydHlOYW1lLCB0b2tlbk1hcF0gb2YgdGhpcy50b2tlblByb3BlcnR5V3JpdGVNYXApIHtcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eSA9IHByb3BlcnRpZXMuZmluZCgocHJvcCkgPT4gcHJvcC5uYW1lID09PSBwcm9wZXJ0eU5hbWUpO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBwcm9wZXJ0eSBpZiBpdCBkb2VzbuKAmXQgZXhpc3RcbiAgICAgICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB2b2lkIChhd2FpdCB0aGlzLnNkay50b2tlbnMuY3JlYXRlVG9rZW5Qcm9wZXJ0eSh0aGlzLnRhcmdldCwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkdlbmVyaWNcIiwgLy8gVXNpbmcgXCJHZW5lcmljXCIgKGEuay5hLiBmb3JtYXR0ZWQgXCJDb2RlXCIgaW4gU3VwZXJub3ZhIFVJKSBpbnN0ZWFkIG9mIGEgcHVyZSBcIlRleHRcIiBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwcm9wZXJ0eU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNvZGVOYW1lOiBOYW1pbmdIZWxwZXJfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoW3Byb3BlcnR5TmFtZV0sIFN0cmluZ0Nhc2VfMS5TdHJpbmdDYXNlLmNhbWVsQ2FzZSksXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlZhcmlhYmxlIG5hbWUgdG8gdXNlIGluIGNvZGVcIixcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IGF3YWl0IHRoaXMuc2RrLnRva2Vucy5nZXRUb2tlblByb3BlcnRpZXModGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydGllcy5maW5kKChwcm9wKSA9PiBwcm9wLm5hbWUgPT09IHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcmV0cmlldmUgb3IgY3JlYXRlIHByb3BlcnR5ICR7cHJvcGVydHlOYW1lfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBlYWNoIHRva2Vu4oCZcyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IEFycmF5LmZyb20odG9rZW5NYXApLm1hcCgoW3Rva2VuLCB2YWx1ZVRvV3JpdGVdKSA9PiAoe1xuICAgICAgICAgICAgICAgIGRlZmluaXRpb25JZDogcHJvcGVydHkuaWQsXG4gICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudElkOiB0b2tlbi5pZCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVUb1dyaXRlLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZGsuYnVsa09wZXJhdGlvbnMudXBkYXRlRWxlbWVudFByb3BlcnRpZXModGhpcy50YXJnZXQsIHBheWxvYWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyB0b2tlbiBwcm9wZXJ0aWVzIHRvIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgbmFtZSB1c2luZyB0aGUgcHJvdmlkZWQgdmFsdWUgZ2VuZXJhdG9yLlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gd3JpdGUgdG8uXG4gICAgICogQHBhcmFtIHRva2VucyAtIFRoZSBsaXN0IG9mIHRva2VucyB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHZhbHVlR2VuZXJhdG9yIC0gQSBmdW5jdGlvbiB0aGF0IGdlbmVyYXRlcyB0aGUgcHJvcGVydHkgdmFsdWUgKHVzdWFsbHkgbmFtZSkgZm9yIGVhY2ggdG9rZW4uXG4gICAgICovXG4gICAgYXN5bmMgd3JpdGVUb2tlblByb3BlcnRpZXMocHJvcGVydHlOYW1lLCB0b2tlbnMsIHZhbHVlR2VuZXJhdG9yKSB7XG4gICAgICAgIGNvbnN0IHRyaW1tZWRQcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU/LnRyaW0oKTtcbiAgICAgICAgaWYgKCF0cmltbWVkUHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVHZW5lcmF0b3IodG9rZW4pO1xuICAgICAgICAgICAgdGhpcy5zdG9yZVZhbHVlRm9yVG9rZW5Qcm9wZXJ0eSh0b2tlbiwgdHJpbW1lZFByb3BlcnR5TmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuYmF0Y2hVcGRhdGVTdG9yZWRUb2tlblByb3BlcnRpZXMoKTtcbiAgICB9XG59XG5leHBvcnRzLldyaXRlVG9rZW5Qcm9wU3RvcmUgPSBXcml0ZVRva2VuUHJvcFN0b3JlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzL05hbWluZ0hlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9Db2xvckhlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9Ub2tlbkhlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9DU1NIZWxwZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2hlbHBlcnMvRmlsZUhlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9UaGVtZUhlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9GaWxlTmFtZUhlbHBlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9HZW5lcmFsSGVscGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lbnVtcy9TdHJpbmdDYXNlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lbnVtcy9Db2xvckZvcm1hdFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVycy9Ub2tlbk5hbWVUcmFja2VyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzL1dyaXRlVG9rZW5Qcm9wU3RvcmVcIiksIGV4cG9ydHMpO1xuIiwiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkdyYWRpZW50VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5saW5lYXI9XCJMaW5lYXJcIixlLnJhZGlhbD1cIlJhZGlhbFwiLGUuYW5ndWxhcj1cIkFuZ3VsYXJcIn0ob3x8KHQuR3JhZGllbnRUeXBlPW89e30pKX0sMzA2OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tUZXh0UHJvcGVydHlTdHlsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS50aXRsZTE9XCJUaXRsZTFcIixlLnRpdGxlMj1cIlRpdGxlMlwiLGUudGl0bGUzPVwiVGl0bGUzXCIsZS50aXRsZTQ9XCJUaXRsZTRcIixlLnRpdGxlNT1cIlRpdGxlNVwiLGUuZGVmYXVsdD1cIkRlZmF1bHRcIixlLmRlZmF1bHRCb2xkPVwiRGVmYXVsdEJvbGRcIixlLmRlZmF1bHRTZW1pYm9sZD1cIkRlZmF1bHRTZW1pYm9sZFwiLGUuc21hbGw9XCJTbWFsbFwiLGUuc21hbGxCb2xkPVwiU21hbGxCb2xkXCIsZS5zbWFsbFNlbWlib2xkPVwiU21hbGxTZW1pYm9sZFwiLGUuY3VzdG9tPVwiQ3VzdG9tXCJ9KG98fCh0LkRvY3NCbG9ja1RleHRQcm9wZXJ0eVN0eWxlPW89e30pKX0sODk5OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Bc3NldFNjYWxlVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5hc3BlY3RGaWxsPVwiQXNwZWN0RmlsbFwiLGUuYXNwZWN0Rml0PVwiQXNwZWN0Rml0XCJ9KG98fCh0LkFzc2V0U2NhbGVUeXBlPW89e30pKX0sOTE1OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Bc3NldFNjYWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLngxPVwieDFcIixlLngyPVwieDJcIixlLngzPVwieDNcIixlLng0PVwieDRcIn0ob3x8KHQuQXNzZXRTY2FsZT1vPXt9KSl9LDkyMjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuVGV4dENhc2U9dm9pZCAwLGZ1bmN0aW9uKGUpe2Uub3JpZ2luYWw9XCJPcmlnaW5hbFwiLGUudXBwZXI9XCJVcHBlclwiLGUubG93ZXI9XCJMb3dlclwiLGUuY2FtZWw9XCJDYW1lbFwiLGUuc21hbGxDYXBzPVwiU21hbGxDYXBzXCJ9KG98fCh0LlRleHRDYXNlPW89e30pKX0sOTM0OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5JY29uU2V0PXZvaWQgMCxmdW5jdGlvbihlKXtlLmNoZWNrQ2lyY2xlPVwiQ2hlY2tDaXJjbGVcIixlLmNyb3NzQ2lyY2xlPVwiQ3Jvc3NDaXJjbGVcIixlLmFsZXJ0PVwiQWxlcnRcIn0ob3x8KHQuSWNvblNldD1vPXt9KSl9LDExNjA6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkFMTF9CT1JERVJfUE9TSVRJT05TPXQuQm9yZGVyUG9zaXRpb249dm9pZCAwLGZ1bmN0aW9uKGUpe2UuaW5zaWRlPVwiSW5zaWRlXCIsZS5jZW50ZXI9XCJDZW50ZXJcIixlLm91dHNpZGU9XCJPdXRzaWRlXCJ9KG98fCh0LkJvcmRlclBvc2l0aW9uPW89e30pKSx0LkFMTF9CT1JERVJfUE9TSVRJT05TPVtvLmluc2lkZSxvLmNlbnRlcixvLm91dHNpZGVdfSwxMjMzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzRW50aXR5VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5ncm91cD1cIkdyb3VwXCIsZS5wYWdlPVwiUGFnZVwifShvfHwodC5Eb2NzRW50aXR5VHlwZT1vPXt9KSl9LDEyNTU6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkZyYW1lQWxpZ25tZW50PXZvaWQgMCxmdW5jdGlvbihlKXtlLmZyYW1lSGVpZ2h0PVwiRnJhbWVIZWlnaHRcIixlLmNlbnRlcj1cIkNlbnRlclwifShvfHwodC5GcmFtZUFsaWdubWVudD1vPXt9KSl9LDE0MjM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmltYWdlPVwiaW1hZ2VcIixlLmZpZ21hRnJhbWU9XCJmaWdtYUZyYW1lXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlPW89e30pKX0sMTYwMTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5vdmVycmlkZT1cIk92ZXJyaWRlXCIsZS5jb21wYXJpc29uPVwiQ29tcGFyaXNvblwifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVGhlbWVUeXBlPW89e30pKX0sMTg0NjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1R5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudGV4dD1cIlRleHRcIixlLmhlYWRpbmc9XCJIZWFkaW5nXCIsZS5jb2RlPVwiQ29kZVwiLGUudW5vcmRlcmVkTGlzdD1cIlVub3JkZXJlZExpc3RcIixlLm9yZGVyZWRMaXN0PVwiT3JkZXJlZExpc3RcIixlLnF1b3RlPVwiUXVvdGVcIixlLmNhbGxvdXQ9XCJDYWxsb3V0XCIsZS5kaXZpZGVyPVwiRGl2aWRlclwiLGUuaW1hZ2U9XCJJbWFnZVwiLGUudG9rZW49XCJUb2tlblwiLGUudG9rZW5MaXN0PVwiVG9rZW5MaXN0XCIsZS50b2tlbkdyb3VwPVwiVG9rZW5Hcm91cFwiLGUuc2hvcnRjdXRzPVwiU2hvcnRjdXRzXCIsZS5saW5rPVwiTGlua1wiLGUuZmlnbWFFbWJlZD1cIkZpZ21hRW1iZWRcIixlLnlvdXR1YmVFbWJlZD1cIllvdXR1YmVFbWJlZFwiLGUuc3Rvcnlib29rRW1iZWQ9XCJTdG9yeWJvb2tFbWJlZFwiLGUuZ2VuZXJpY0VtYmVkPVwiRW1iZWRcIixlLmZpZ21hRnJhbWVzPVwiRmlnbWFGcmFtZXNcIixlLmN1c3RvbT1cIkN1c3RvbVwiLGUucmVuZGVyQ29kZT1cIlJlbmRlckNvZGVcIixlLmNvbXBvbmVudEFzc2V0cz1cIkNvbXBvbmVudEFzc2V0c1wiLGUuY29sdW1uPVwiQ29sdW1uXCIsZS5jb2x1bW5JdGVtPVwiQ29sdW1uSXRlbVwiLGUudGFicz1cIlRhYnNcIixlLnRhYkl0ZW09XCJUYWJJdGVtXCIsZS50YWJsZT1cIlRhYmxlXCIsZS50YWJsZUNlbGw9XCJUYWJsZUNlbGxcIixlLnRhYmxlUm93PVwiVGFibGVSb3dcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1R5cGU9bz17fSkpfSwyMTIzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5R3JvdXBCZWhhdmlvcj12b2lkIDAsZnVuY3Rpb24oZSl7ZS5ncm91cD1cIkdyb3VwXCIsZS50YWJzPVwiVGFic1wifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5R3JvdXBCZWhhdmlvcj1vPXt9KSl9LDI2NTc6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dD10LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZXh0ZXJuYWw9XCJFeHRlcm5hbFwiLGUuaW50ZXJuYWw9XCJJbnRlcm5hbFwifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlPW89e30pKSx0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dD1jbGFzc3tjb25zdHJ1Y3RvcihlKXt2YXIgdDtlLnVybD90aGlzLnR5cGU9by5leHRlcm5hbDp0aGlzLnR5cGU9by5pbnRlcm5hbCx0aGlzLnRpdGxlPXRoaXMuc2hvcnRjdXRUaXRsZUZyb21Nb2RlbChlLHRoaXMudHlwZSksdGhpcy5kZXNjcmlwdGlvbj10aGlzLnNob3J0Y3V0RGVzY3JpcHRpb25Gcm9tTW9kZWwoZSx0aGlzLnR5cGUpLHRoaXMucHJldmlld1VybD10aGlzLnNob3J0Y3V0UHJldmlld1VybEZyb21Nb2RlbChlKSx0aGlzLnR5cGU9PT1vLmludGVybmFsJiYobnVsbD09PSh0PWUuZG9jdW1lbnRhdGlvbkl0ZW1QcmV2aWV3KXx8dm9pZCAwPT09dD92b2lkIDA6dC52YWxpZCkmJmUuZG9jdW1lbnRhdGlvbkl0ZW1JZD90aGlzLmludGVybmFsSWQ9ZS5kb2N1bWVudGF0aW9uSXRlbUlkOih0aGlzLmludGVybmFsSWQ9bnVsbCx0aGlzLnR5cGU9PT1vLmV4dGVybmFsJiZlLnVybD90aGlzLmV4dGVybmFsVXJsPWUudXJsOnRoaXMuZXh0ZXJuYWxVcmw9bnVsbCl9c2hvcnRjdXRUaXRsZUZyb21Nb2RlbChlLHQpe3ZhciByLG4saSxhLGM7bGV0IGw9bnVsbDtyZXR1cm4gZS50aXRsZSYmZS50aXRsZS50cmltKCkubGVuZ3RoPjA/bD1lLnRpdGxlOnQ9PT1vLmludGVybmFsP2w9bnVsbCE9PShuPW51bGw9PT0ocj1lLmRvY3VtZW50YXRpb25JdGVtUHJldmlldyl8fHZvaWQgMD09PXI/dm9pZCAwOnIudGl0bGUpJiZ2b2lkIDAhPT1uP246bnVsbDp0PT09by5leHRlcm5hbCYmKGw9bnVsbCE9PShjPW51bGwhPT0oYT1udWxsPT09KGk9ZS51cmxQcmV2aWV3KXx8dm9pZCAwPT09aT92b2lkIDA6aS50aXRsZSkmJnZvaWQgMCE9PWE/YTplLnVybCkmJnZvaWQgMCE9PWM/YzpudWxsKSxsJiYwIT09bC50cmltKCkubGVuZ3RoP2w6bnVsbH1zaG9ydGN1dERlc2NyaXB0aW9uRnJvbU1vZGVsKGUsdCl7dmFyIHI7bGV0IG49bnVsbDtyZXR1cm4gZS5kZXNjcmlwdGlvbiYmZS5kZXNjcmlwdGlvbi50cmltKCkubGVuZ3RoPjA/bj1lLmRlc2NyaXB0aW9uOnQ9PT1vLmV4dGVybmFsJiYobj1udWxsPT09KHI9ZS51cmxQcmV2aWV3KXx8dm9pZCAwPT09cj92b2lkIDA6ci5kZXNjcmlwdGlvbiksbiYmMCE9PW4udHJpbSgpLmxlbmd0aD9uOm51bGx9c2hvcnRjdXRQcmV2aWV3VXJsRnJvbU1vZGVsKGUpe3ZhciB0LG8scixuLGk7cmV0dXJuIG51bGwhPT0oaT1udWxsIT09KHI9bnVsbCE9PSh0PWUuYXNzZXRVcmwpJiZ2b2lkIDAhPT10P3Q6bnVsbD09PShvPWUuYXNzZXQpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnVybCkmJnZvaWQgMCE9PXI/cjpudWxsPT09KG49ZS51cmxQcmV2aWV3KXx8dm9pZCAwPT09bj92b2lkIDA6bi50aHVtYm5haWxVcmwpJiZ2b2lkIDAhPT1pP2k6bnVsbH19fSwyNjc0OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5SaWNoVGV4dFNwYW5BdHRyaWJ1dGVUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmJvbGQ9XCJCb2xkXCIsZS5pdGFsaWM9XCJJdGFsaWNcIixlLmxpbms9XCJMaW5rXCIsZS5zdHJpa2V0aHJvdWdoPVwiU3RyaWtldGhyb3VnaFwiLGUuY29kZT1cIkNvZGVcIn0ob3x8KHQuUmljaFRleHRTcGFuQXR0cmlidXRlVHlwZT1vPXt9KSl9LDI4MDI6KGUsdCk9Pnt2YXIgbyxyO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuUHVsc2FyRXhlY3V0b3I9dC5PdXRwdXRGaWxlVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5jb3B5UmVtb3RlVXJsPVwiY29weVJlbW90ZVVybFwiLGUudGV4dD1cInRleHRcIixlLmJpbmFyeT1cImJpbmFyeVwifShvfHwodC5PdXRwdXRGaWxlVHlwZT1vPXt9KSksZnVuY3Rpb24oZSl7ZS5zdXBlcm5vdmE9XCJzdXBlcm5vdmFcIixlLmxvY2FsPVwibG9jYWxcIn0ocnx8KHQuUHVsc2FyRXhlY3V0b3I9cj17fSkpfSwzNjA3OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25TdGF0dXM9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYWN0aXZlPVwiYWN0aXZlXCIsZS5ncmFjZVBlcmlvZD1cImdyYWNlUGVyaW9kXCIsZS5jYW5jZWxsZWQ9XCJjYW5jZWxsZWRcIixlLnN1c3BlbmRlZD1cInN1c3BlbmRlZFwifShvfHwodC5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25TdGF0dXM9bz17fSkpfSwzNzE4OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5GcmFtZUxheW91dD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5jOD1cIkM4XCIsZS5jNz1cIkM3XCIsZS5jNj1cIkM2XCIsZS5jNT1cIkM1XCIsZS5jND1cIkM0XCIsZS5jMz1cIkMzXCIsZS5jMj1cIkMyXCIsZS5jMT1cIkMxXCIsZS5jMTc1PVwiQzFfNzVcIn0ob3x8KHQuRnJhbWVMYXlvdXQ9bz17fSkpfSwzNzMzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tCZWhhdmlvclNlbGVjdGlvblR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZW50aXR5PVwiRW50aXR5XCIsZS5ncm91cD1cIkdyb3VwXCIsZS5lbnRpdHlBbmRHcm91cD1cIkVudGl0eUFuZEdyb3VwXCJ9KG98fCh0LkRvY3NCbG9ja0JlaGF2aW9yU2VsZWN0aW9uVHlwZT1vPXt9KSl9LDM3ODg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRUX1RPS0VOX1RZUEVTPXQudG9rZW5UeXBlSXNSZWZlcmVuY2FibGU9dC5SRUZFUkVOQ0FCTEVfVE9LRU5fVFlQRVM9dC5SRVBMQUNBQkxFX1RPS0VOX1RZUEVTPXQudG9rZW5UeXBlSXNOb25QdXJlPXQudG9rZW5UeXBlSXNQdXJlPXQuUFVSRV9UT0tFTl9UWVBFUz10LkFMTF9UT0tFTl9UWVBFUz10Lk1TX0RJTUVOU0lPTl9UT0tFTl9UWVBFUz10LlJBV19ESU1FTlNJT05fVE9LRU5fVFlQRVM9dC5ESU1FTlNJT05fVE9LRU5fVFlQRVM9dC5PUFRJT05fVE9LRU5fVFlQRVM9dC5TVFJJTkdfVE9LRU5fVFlQRVM9dC5Ub2tlblR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuY29sb3I9XCJDb2xvclwiLGUudHlwb2dyYXBoeT1cIlR5cG9ncmFwaHlcIixlLnNoYWRvdz1cIlNoYWRvd1wiLGUuYm9yZGVyPVwiQm9yZGVyXCIsZS5ncmFkaWVudD1cIkdyYWRpZW50XCIsZS5ibHVyPVwiQmx1clwiLGUucmFkaXVzPVwiQm9yZGVyUmFkaXVzXCIsZS5ib3JkZXJXaWR0aD1cIkJvcmRlcldpZHRoXCIsZS5kdXJhdGlvbj1cIkR1cmF0aW9uXCIsZS5mb250U2l6ZT1cIkZvbnRTaXplXCIsZS5kaW1lbnNpb249XCJEaW1lbnNpb25cIixlLmxldHRlclNwYWNpbmc9XCJMZXR0ZXJTcGFjaW5nXCIsZS5saW5lSGVpZ2h0PVwiTGluZUhlaWdodFwiLGUub3BhY2l0eT1cIk9wYWNpdHlcIixlLnBhcmFncmFwaFNwYWNpbmc9XCJQYXJhZ3JhcGhTcGFjaW5nXCIsZS5zaXplPVwiU2l6ZVwiLGUuc3BhY2U9XCJTcGFjZVwiLGUuekluZGV4PVwiWkluZGV4XCIsZS50ZXh0RGVjb3JhdGlvbj1cIlRleHREZWNvcmF0aW9uXCIsZS50ZXh0Q2FzZT1cIlRleHRDYXNlXCIsZS52aXNpYmlsaXR5PVwiVmlzaWJpbGl0eVwiLGUuZm9udEZhbWlseT1cIkZvbnRGYW1pbHlcIixlLmZvbnRXZWlnaHQ9XCJGb250V2VpZ2h0XCIsZS5zdHJpbmc9XCJTdHJpbmdcIixlLnByb2R1Y3RDb3B5PVwiUHJvZHVjdENvcHlcIn0ob3x8KHQuVG9rZW5UeXBlPW89e30pKSx0LlNUUklOR19UT0tFTl9UWVBFUz1bby5zdHJpbmcsby5wcm9kdWN0Q29weSxvLmZvbnRGYW1pbHksby5mb250V2VpZ2h0XSx0Lk9QVElPTl9UT0tFTl9UWVBFUz1bby50ZXh0Q2FzZSxvLnRleHREZWNvcmF0aW9uLG8udmlzaWJpbGl0eV0sdC5ESU1FTlNJT05fVE9LRU5fVFlQRVM9W28uZGltZW5zaW9uLG8uc2l6ZSxvLnNwYWNlLG8ub3BhY2l0eSxvLmZvbnRTaXplLG8ubGluZUhlaWdodCxvLmxldHRlclNwYWNpbmcsby5wYXJhZ3JhcGhTcGFjaW5nLG8uYm9yZGVyV2lkdGgsby5yYWRpdXMsby5kdXJhdGlvbixvLnpJbmRleF0sdC5SQVdfRElNRU5TSU9OX1RPS0VOX1RZUEVTPVtvLm9wYWNpdHksby56SW5kZXhdLHQuTVNfRElNRU5TSU9OX1RPS0VOX1RZUEVTPVtvLmR1cmF0aW9uXSx0LkFMTF9UT0tFTl9UWVBFUz1bLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsLi4udC5TVFJJTkdfVE9LRU5fVFlQRVMsLi4udC5PUFRJT05fVE9LRU5fVFlQRVMsby5jb2xvcixvLmdyYWRpZW50LG8uYm9yZGVyLG8ucmFkaXVzLG8uc2hhZG93LG8udHlwb2dyYXBoeSxvLmJsdXJdLHQuUFVSRV9UT0tFTl9UWVBFUz1bLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsLi4udC5TVFJJTkdfVE9LRU5fVFlQRVMsLi4udC5PUFRJT05fVE9LRU5fVFlQRVNdLHQudG9rZW5UeXBlSXNQdXJlPWU9PnQuUFVSRV9UT0tFTl9UWVBFUy5pbmNsdWRlcyhlKSx0LnRva2VuVHlwZUlzTm9uUHVyZT1lPT4hKDAsdC50b2tlblR5cGVJc1B1cmUpKGUpLHQuUkVQTEFDQUJMRV9UT0tFTl9UWVBFUz1bby5jb2xvciwuLi50LkRJTUVOU0lPTl9UT0tFTl9UWVBFUywuLi50LlNUUklOR19UT0tFTl9UWVBFUywuLi50Lk9QVElPTl9UT0tFTl9UWVBFU10sdC5SRUZFUkVOQ0FCTEVfVE9LRU5fVFlQRVM9W28uY29sb3IsLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsby5mb250RmFtaWx5LG8uZm9udFdlaWdodCxvLnRleHRDYXNlLG8udGV4dERlY29yYXRpb25dLHQudG9rZW5UeXBlSXNSZWZlcmVuY2FibGU9ZT0+dC5SRUZFUkVOQ0FCTEVfVE9LRU5fVFlQRVMuaW5jbHVkZXMoZSksdC5EVF9UT0tFTl9UWVBFUz1bby5jb2xvcixvLnNoYWRvdyxvLmdyYWRpZW50LG8udHlwb2dyYXBoeSxvLmJvcmRlciwuLi50LkRJTUVOU0lPTl9UT0tFTl9UWVBFUyxvLmZvbnRGYW1pbHksby5mb250V2VpZ2h0LG8uc3RyaW5nLC4uLnQuT1BUSU9OX1RPS0VOX1RZUEVTXX0sNDA2ODooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0VudGl0eUdyb3VwQmVoYXZpb3I9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZ3JvdXA9XCJHcm91cFwiLGUudGFicz1cIlRhYnNcIn0ob3x8KHQuRG9jc0VudGl0eUdyb3VwQmVoYXZpb3I9bz17fSkpfSw0MjkwOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25Qcm9kdWN0Q29kZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5mcmVlPVwiZnJlZVwiLGUudGVhbT1cInRlYW1cIixlLnRlYW1UZXN0PVwidGVhbV90ZXN0XCIsZS5jb21wYW55PVwiY29tcGFueVwiLGUuZW50ZXJwcmlzZT1cImVudGVycHJpc2VcIn0ob3x8KHQuV29ya3NwYWNlU3Vic2NyaXB0aW9uUHJvZHVjdENvZGU9bz17fSkpfSw0Mzc5OihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5TdXBlcm5vdmFFcnJvcj12b2lkIDA7Y2xhc3MgbyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUsdCxvLHIsbixpLGEpe3N1cGVyKGUpLHRoaXMuY29kZT10LHRoaXMuc3RhdHVzPW8sdGhpcy5mb3JtRXJyb3JzPXIsdGhpcy5yZXF1ZXN0SWQ9bix0aGlzLnNlcnZlclRpbWU9aSx0aGlzLnVybD1hfXN0YXRpYyBmcm9tTmV0d29ya1Jlc3BvbnNlKGUsdCxyKXt2YXIgbixpLGE7cmV0dXJuIG5ldyBvKGUubWVzc2FnZSxlLmVycm9yQ29kZXx8ZS5yZWFzb258fGUubGFiZWx8fG51bGwsZS5jb2RlfHx0LG51bGwhPT0obj1lLmZvcm1FcnJvcnMpJiZ2b2lkIDAhPT1uP246bnVsbCxudWxsIT09KGk9ZS5yZXF1ZXN0SWQpJiZ2b2lkIDAhPT1pP2k6bnVsbCxudWxsIT09KGE9ZS5zZXJ2ZXJUaW1lKSYmdm9pZCAwIT09YT9hOm51bGwscil9c3RhdGljIGZyb21Ob05ldHdvcmtSZXNwb25zZShlKXtyZXR1cm4gbmV3IG8oXCJObyBuZXR3b3JrIG9yIGludGVybmV0IHVucmVhY2hhYmxlXCIsXCJOT19ORVRXT1JLXCIsMTIxNjMsbnVsbCwobmV3IERhdGUpLnRvSVNPU3RyaW5nKCksbnVsbCxlKX1zdGF0aWMgZnJvbUNvZGUoZSl7cmV0dXJuIG5ldyBvKGUsZSxudWxsLG51bGwsbnVsbCxudWxsLG51bGwpfXN0YXRpYyBmcm9tTWVzc2FnZShlKXtyZXR1cm4gbmV3IG8oZSxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCl9aXNGaWVsZEVycm9yZWQoZSl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuZm9ybUVycm9ycy5maW5kKCh0PT50LmtleT09PWUpKX1lcnJvckZvckZpZWxkKGUpe3ZhciB0O3JldHVybiBudWxsIT09KHQ9dGhpcy5mb3JtRXJyb3JzLmZpbmQoKHQ9PnQua2V5PT09ZSkpKSYmdm9pZCAwIT09dD90Om51bGx9dG9TdHJpbmcoKXt2YXIgZSx0LG8scixuLGk7cmV0dXJuYFxcbiAgICBFcnJvciB0aHJvd246ICR7dGhpcy5tZXNzYWdlfVxcblxcbiAgICBDb2RlOiAke251bGwhPT0oZT10aGlzLmNvZGUpJiZ2b2lkIDAhPT1lP2U6XCItXCJ9XFxuXFxuICAgIFN0YXR1czogJHtudWxsIT09KHQ9dGhpcy5zdGF0dXMpJiZ2b2lkIDAhPT10P3Q6XCItXCJ9XFxuXFxuICAgIEZpZWxkczogJHtKU09OLnN0cmluZ2lmeSh0aGlzLmZvcm1FcnJvcnMsbnVsbCwyKX1cXG5cXG4gICAgUmVxdWVzdCBJRDogJHtudWxsIT09KG89dGhpcy5yZXF1ZXN0SWQpJiZ2b2lkIDAhPT1vP286XCItXCJ9XFxuXFxuICAgIFNlcnZlciB0aW1lOiAke251bGwhPT0ocj10aGlzLnNlcnZlclRpbWUpJiZ2b2lkIDAhPT1yP3I6XCItXCJ9XFxuXFxuICAgIE5ldHdvcmsgVVJMOiAke251bGwhPT0obj10aGlzLnVybCkmJnZvaWQgMCE9PW4/bjpcIi1cIn1cXG5cXG4gICAgU3RhY2s6ICR7bnVsbCE9PShpPXRoaXMuc3RhY2spJiZ2b2lkIDAhPT1pP2k6XCItXCJ9XFxuICAgIGB9dG9IdW1hblJlYWRhYmxlKCl7cmV0dXJuYCR7dGhpcy5tZXNzYWdlfSR7dGhpcy5yZXF1ZXN0SWQ/YCAocmVxdWVzdCAke3RoaXMucmVxdWVzdElkfSlgOlwiXCJ9YH19dC5TdXBlcm5vdmFFcnJvcj1vfSw0NTQ2OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5BTExfQk9SREVSX1NUWUxFUz10LkJvcmRlclN0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmRhc2hlZD1cIkRhc2hlZFwiLGUuZG90dGVkPVwiRG90dGVkXCIsZS5zb2xpZD1cIlNvbGlkXCIsZS5ncm9vdmU9XCJHcm9vdmVcIn0ob3x8KHQuQm9yZGVyU3R5bGU9bz17fSkpLHQuQUxMX0JPUkRFUl9TVFlMRVM9W28uZGFzaGVkLG8uZG90dGVkLG8uc29saWQsby5ncm9vdmVdfSw0NjUyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Tb3VyY2VUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmZpZ21hPVwiRmlnbWFcIixlLnRva2VuU3R1ZGlvPVwiVG9rZW5TdHVkaW9cIixlLmZpZ21hVmFyaWFibGVzUGx1Z2luPVwiRmlnbWFWYXJpYWJsZXNQbHVnaW5cIn0ob3x8KHQuU291cmNlVHlwZT1vPXt9KSl9LDUxMDI6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lDYWxsb3V0VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5pbmZvPVwiSW5mb1wiLGUuc3VjY2Vzcz1cIlN1Y2Nlc3NcIixlLndhcm5pbmc9XCJXYXJuaW5nXCIsZS5lcnJvcj1cIkVycm9yXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lDYWxsb3V0VHlwZT1vPXt9KSl9LDU1MDM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbD12b2lkIDAsZnVuY3Rpb24oZSl7ZS55ZWFybHk9XCJ5ZWFybHlcIixlLm1vbnRobHk9XCJtb250aGx5XCJ9KG98fCh0LldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbD1vPXt9KSl9LDU2NTE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0JlaGF2aW9yRGF0YVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuaXRlbT1cIkl0ZW1cIixlLnRva2VuPVwiVG9rZW5cIixlLmFzc2V0PVwiQXNzZXRcIixlLmNvbXBvbmVudD1cIkNvbXBvbmVudFwiLGUuZmlnbWFOb2RlPVwiRmlnbWFOb2RlXCIsZS5maWdtYUNvbXBvbmVudD1cIkZpZ21hQ29tcG9uZW50XCJ9KG98fCh0LkRvY3NCbG9ja0JlaGF2aW9yRGF0YVR5cGU9bz17fSkpfSw1NjczOihlLHQpPT57dmFyIG87ZnVuY3Rpb24gcihlKXtzd2l0Y2goZS50eXBlKXtjYXNlIG8uZG9jdW1lbnRhdGlvbkl0ZW06cmV0dXJuYEBwYWdlOiR7ZS5kb2N1bWVudGF0aW9uSXRlbUlkfWA7Y2FzZSBvLnBhZ2VIZWFkaW5nOnJldHVybmBAcGFnZToke2UuZG9jdW1lbnRhdGlvbkl0ZW1JZH0jJHtlLnBhZ2VIZWFkaW5nSWR9YDtjYXNlIG8udXJsOnJldHVybiBlLnVybDtkZWZhdWx0OnJldHVybn19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5saW5rQXR0cmlidXRlVG9Eb2NzTGluaz10LmRvY3NMaW5rVG9MaW5rQXR0cmlidXRlcz10LmRvY3NMaW5rVG9Vcmw9dC5Eb2NzTGlua1JlZlR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZG9jdW1lbnRhdGlvbkl0ZW09XCJEb2N1bWVudGF0aW9uSXRlbVwiLGUucGFnZUhlYWRpbmc9XCJQYWdlSGVhZGluZ1wiLGUudXJsPVwiVXJsXCJ9KG98fCh0LkRvY3NMaW5rUmVmVHlwZT1vPXt9KSksdC5kb2NzTGlua1RvVXJsPXIsdC5kb2NzTGlua1RvTGlua0F0dHJpYnV0ZXM9ZnVuY3Rpb24oZSl7Y29uc3QgdD1yKGUpO2lmKHQpcmV0dXJue2hyZWY6dCx0YXJnZXQ6ZS5vcGVuSW5OZXdUYWI/XCJfYmxhbmtcIjpcIl9zZWxmXCJ9fSx0LmxpbmtBdHRyaWJ1dGVUb0RvY3NMaW5rPWZ1bmN0aW9uKGUsdCl7aWYoIWUpcmV0dXJuO2NvbnN0IHI9XCJfYmxhbmtcIj09PXQ7aWYoZS5zdGFydHNXaXRoKFwiQHBhZ2U6XCIpKXtpZihlLmluY2x1ZGVzKFwiI1wiKSl7Y29uc3RbdCxuXT1lLnJlcGxhY2UoXCJAcGFnZTpcIixcIlwiKS5zcGxpdChcIiNcIik7cmV0dXJue3R5cGU6by5wYWdlSGVhZGluZyxkb2N1bWVudGF0aW9uSXRlbUlkOnQscGFnZUhlYWRpbmdJZDpuLG9wZW5Jbk5ld1RhYjpyfX1yZXR1cm57dHlwZTpvLmRvY3VtZW50YXRpb25JdGVtLGRvY3VtZW50YXRpb25JdGVtSWQ6ZS5yZXBsYWNlKFwiQHBhZ2U6XCIsXCJcIiksb3BlbkluTmV3VGFiOnJ9fXJldHVybnt0eXBlOm8udXJsLHVybDplLG9wZW5Jbk5ld1RhYjpyfX19LDU2OTU6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkN1c3RvbURvbWFpbkVycm9yQ29kZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5nZW5lcmFsRXJyb3I9XCJHZW5lcmFsRXJyb3JcIixlLmRuc05vdENvbmZpZ3VyZWQ9XCJETlNOb3RDb25maWd1cmVkXCIsZS5tYWludGVuYW5jZT1cIk1haW50ZW5hbmNlXCJ9KG98fCh0LkN1c3RvbURvbWFpbkVycm9yQ29kZT1vPXt9KSl9LDU4ODM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eU9wdGlvblJlbmRlcmluZ1N0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnNlZ21lbnRlZENvbnRyb2w9XCJTZWdtZW50ZWRDb250cm9sXCIsZS50b2dnbGVCdXR0b249XCJUb2dnbGVCdXR0b25cIixlLnNlbGVjdD1cIlNlbGVjdFwiLGUuY2hlY2tib3g9XCJDaGVja2JveFwifShvfHwodC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlPcHRpb25SZW5kZXJpbmdTdHlsZT1vPXt9KSl9LDU5NjM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja09wdGlvblJlbmRlcmluZ1N0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnNlZ21lbnRlZENvbnRyb2w9XCJTZWdtZW50ZWRDb250cm9sXCIsZS50b2dnbGVCdXR0b249XCJUb2dnbGVCdXR0b25cIixlLnNlbGVjdD1cIlNlbGVjdFwiLGUuY2hlY2tib3g9XCJDaGVja2JveFwifShvfHwodC5Eb2NzQmxvY2tPcHRpb25SZW5kZXJpbmdTdHlsZT1vPXt9KSl9LDYxNDE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlZpc2liaWxpdHlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnZpc2libGU9XCJWaXNpYmxlXCIsZS5oaWRkZW49XCJIaWRkZW5cIn0ob3x8KHQuVmlzaWJpbGl0eVR5cGU9bz17fSkpfSw2MTkyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5CbHVyVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5sYXllcj1cIkxheWVyXCIsZS5iYWNrZ3JvdW5kPVwiQmFja2dyb3VuZFwifShvfHwodC5CbHVyVHlwZT1vPXt9KSl9LDYyOTg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYmFzaWM9XCJCYXNpY1wiLGUuYmVhcmVyPVwiQmVhcmVyXCJ9KG98fCh0LldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGU9bz17fSkpfSw2NjQ0OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudGl0bGUxPVwiVGl0bGUxXCIsZS50aXRsZTI9XCJUaXRsZTJcIixlLnRpdGxlMz1cIlRpdGxlM1wiLGUudGl0bGU0PVwiVGl0bGU0XCIsZS50aXRsZTU9XCJUaXRsZTVcIixlLnF1b3RlPVwiUXVvdGVcIixlLmNhbGxvdXQ9XCJDYWxsb3V0XCIsZS5kZWZhdWx0PVwiRGVmYXVsdFwifShvfHwodC5Eb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGU9bz17fSkpfSw2ODM5OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnJpY2hUZXh0PVwiUmljaFRleHRcIixlLm11bHRpUmljaFRleHQ9XCJNdWx0aVJpY2hUZXh0XCIsZS50ZXh0PVwiVGV4dFwiLGUucmljaFRleHRFZGl0b3I9XCJSaWNoVGV4dEVkaXRvclwiLGUuYm9vbGVhbj1cIkJvb2xlYW5cIixlLm51bWJlcj1cIk51bWJlclwiLGUuc2luZ2xlU2VsZWN0PVwiU2luZ2xlU2VsZWN0XCIsZS5tdWx0aVNlbGVjdD1cIk11bHRpU2VsZWN0XCIsZS5pbWFnZT1cIkltYWdlXCIsZS50b2tlbj1cIlRva2VuXCIsZS50b2tlblR5cGU9XCJUb2tlblR5cGVcIixlLnRva2VuUHJvcGVydHk9XCJUb2tlblByb3BlcnR5XCIsZS5jb21wb25lbnQ9XCJDb21wb25lbnRcIixlLmNvbXBvbmVudFByb3BlcnR5PVwiQ29tcG9uZW50UHJvcGVydHlcIixlLmFzc2V0PVwiQXNzZXRcIixlLmFzc2V0UHJvcGVydHk9XCJBc3NldFByb3BlcnR5XCIsZS5lbWJlZFVSTD1cIkVtYmVkVVJMXCIsZS51cmw9XCJVUkxcIixlLm1hcmtkb3duPVwiTWFya2Rvd25cIixlLmNvZGU9XCJDb2RlXCIsZS5jb2RlU2FuZGJveD1cIkNvZGVTYW5kYm94XCIsZS50YWJsZT1cIlRhYmxlXCIsZS5kaXZpZGVyPVwiRGl2aWRlclwiLGUuc3Rvcnlib29rPVwiU3Rvcnlib29rXCIsZS5jb2xvcj1cIkNvbG9yXCIsZS5maWdtYU5vZGU9XCJGaWdtYU5vZGVcIixlLmZpZ21hQ29tcG9uZW50PVwiRmlnbWFDb21wb25lbnRcIn0ob3x8KHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VHlwZT1vPXt9KSl9LDcwNDA6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlRleHREZWNvcmF0aW9uPXZvaWQgMCxmdW5jdGlvbihlKXtlLm9yaWdpbmFsPVwiTm9uZVwiLGUudW5kZXJsaW5lPVwiVW5kZXJsaW5lXCIsZS5zdHJpa2V0aHJvdWdoPVwiU3RyaWtldGhyb3VnaFwifShvfHwodC5UZXh0RGVjb3JhdGlvbj1vPXt9KSl9LDcyOTE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0V2lkdGg9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYzE9XCIxXCIsZS5jMj1cIjJcIixlLmMzPVwiM1wiLGUuYzQ9XCI0XCIsZS5jNT1cIjVcIixlLmM2PVwiNlwiLGUuYzc9XCI3XCIsZS5jOD1cIjhcIixlLmM5PVwiOVwiLGUuYzEwPVwiMTBcIixlLmMxMT1cIjExXCIsZS5jMTI9XCIxMlwifShvfHwodC5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFdpZHRoPW89e30pKX0sNzM3OTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmdyb3VwPVwiR3JvdXBcIixlLnBhZ2U9XCJQYWdlXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lJdGVtVHlwZT1vPXt9KSl9LDc0NzY6KGUsdCk9Pnt2YXIgbyxyO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuVGV4dEFsaWdubWVudD10LkFsaWdubWVudD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5sZWZ0PVwiTGVmdFwiLGUuY2VudGVyPVwiQ2VudGVyXCIsZS5zdHJldGNoPVwiU3RyZXRjaFwifShvfHwodC5BbGlnbm1lbnQ9bz17fSkpLGZ1bmN0aW9uKGUpe2UubGVmdD1cIkxlZnRcIixlLmNlbnRlcj1cIkNlbnRlclwiLGUucmlnaHQ9XCJSaWdodFwifShyfHwodC5UZXh0QWxpZ25tZW50PXI9e30pKX0sNzQ3OTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VGV4dFN0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnNtYWxsPVwiU21hbGxcIixlLnJlZ3VsYXI9XCJSZWd1bGFyXCIsZS5ib2xkPVwiQm9sZFwifShvfHwodC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUZXh0U3R5bGU9bz17fSkpfSw3NzM3OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5DdXN0b21Eb21haW5TdGF0ZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5pbml0aWFsPVwiSW5pdGlhbFwiLGUuZG9tYWluU2V0dXBJblByb2dyZXNzPVwiRG9tYWluU2V0dXBJblByb2dyZXNzXCIsZS5kb21haW5TZXR1cEZhaWxlZD1cIkRvbWFpblNldHVwRmFpbGVkXCIsZS5kb21haW5TZXR1cHNTdWNjZXM9XCJEb21haW5TZXR1cFN1Y2Nlc3NcIixlLnNzbFNldHVwSW5Qcm9ncmVzcz1cIlNTTFNldHVwSW5Qcm9ncmVzc1wiLGUuc3NsU2V0dXBGYWlsZWQ9XCJTU0xTZXR1cEZhaWxlZFwiLGUuc3NsU2V0dXBTdWNjZXNzPVwiU1NMU2V0dXBTdWNjZXNzXCJ9KG98fCh0LkN1c3RvbURvbWFpblN0YXRlPW89e30pKX0sNzk2ODooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuV29ya3NwYWNlTlBNUmVnaXN0cnlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLm5wbUpTPVwiTlBNSlNcIixlLmdpdEh1Yj1cIkdpdEh1YlwiLGUuYXp1cmVEZXZPcHM9XCJBenVyZURldk9wc1wiLGUuYXJ0aWZhY3Rvcnk9XCJBcnRpZmFjdG9yeVwiLGUuY3VzdG9tPVwiQ3VzdG9tXCJ9KG98fCh0LldvcmtzcGFjZU5QTVJlZ2lzdHJ5VHlwZT1vPXt9KSl9LDc5NzE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NTZWN0aW9uVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5wbGFpbj1cIlBsYWluXCIsZS50YWJzPVwiVGFic1wifShvfHwodC5Eb2NzU2VjdGlvblR5cGU9bz17fSkpfSw4MDQyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5JbXBvcnRXYXJuaW5nVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5VbnN1cHBvcnRlZEZpbGw9XCJVbnN1cHBvcnRlZEZpbGxcIixlLlVuc3VwcG9ydGVkU3Ryb2tlPVwiVW5zdXBwb3J0ZWRTdHJva2VcIixlLlVuc3VwcG9ydGVkRWZmZWN0PVwiVW5zdXBwb3J0ZWRFZmZlY3RcIixlLlN0eWxlTm90QXBwbGllZD1cIlN0eWxlTm90QXBwbGllZFwiLGUuTm9QdWJsaXNoZWRTdHlsZXM9XCJOb1B1Ymxpc2hlZFN0eWxlc1wiLGUuTm9QdWJsaXNoZWRDb21wb25lbnRzPVwiTm9QdWJsaXNoZWRDb21wb25lbnRzXCIsZS5Ob1B1Ymxpc2hlZEFzc2V0cz1cIk5vUHVibGlzaGVkQXNzZXRzXCIsZS5Ob1ZlcnNpb25Gb3VuZD1cIk5vVmVyc2lvbkZvdW5kXCIsZS5Db21wb25lbnRIYXNOb1RodW1ibmFpbD1cIkNvbXBvbmVudEhhc05vVGh1bWJuYWlsXCIsZS5EdXBsaWNhdGVJbXBvcnRlZFN0eWxlSWQ9XCJEdXBsaWNhdGVJbXBvcnRlZFN0eWxlSWRcIixlLkR1cGxpY2F0ZUltcG9ydGVkU3R5bGVQYXRoPVwiRHVwbGljYXRlSW1wb3J0ZWRTdHlsZVBhdGhcIixlLk5vUHVibGlzaGVkRWxlbWVudHM9XCJOb1B1Ymxpc2hlZEVsZW1lbnRzXCIsZS5Ob1VucHVibGlzaGVkU3R5bGVzPVwiTm9VbnB1Ymxpc2hlZFN0eWxlc1wifShvfHwodC5JbXBvcnRXYXJuaW5nVHlwZT1vPXt9KSl9LDgwNjE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudGl0bGUxPVwiVGl0bGUxXCIsZS50aXRsZTI9XCJUaXRsZTJcIixlLnRpdGxlMz1cIlRpdGxlM1wiLGUudGl0bGU0PVwiVGl0bGU0XCIsZS50aXRsZTU9XCJUaXRsZTVcIixlLnF1b3RlPVwiUXVvdGVcIixlLmNhbGxvdXQ9XCJDYWxsb3V0XCIsZS5vbD1cIk9MXCIsZS51bD1cIlVMXCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGU9bz17fSkpfSw4MDk1OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuY29sdW1uPVwiQ29sdW1uXCIsZS5yb3c9XCJSb3dcIn0ob3x8KHQuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRUeXBlPW89e30pKX0sODYwNzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuTVNfVU5JVFM9dC5QWF9VTklUUz10LlJBV19VTklUUz10LkxJTkVfSEVJR0hUX1VOSVRTPXQuU0laRV9VTklUUz10LlVuaXQ9dm9pZCAwLGZ1bmN0aW9uKGUpe2UucGl4ZWxzPVwiUGl4ZWxzXCIsZS5wZXJjZW50PVwiUGVyY2VudFwiLGUucmVtPVwiUmVtXCIsZS5tcz1cIk1zXCIsZS5yYXc9XCJSYXdcIn0ob3x8KHQuVW5pdD1vPXt9KSksdC5TSVpFX1VOSVRTPVtvLnBpeGVscyxvLnBlcmNlbnQsby5yZW1dLHQuTElORV9IRUlHSFRfVU5JVFM9W28ucGl4ZWxzLG8ucGVyY2VudCxvLnJlbSxvLnJhd10sdC5SQVdfVU5JVFM9W28ucmF3XSx0LlBYX1VOSVRTPVtvLnBpeGVsc10sdC5NU19VTklUUz1bby5tc119LDg3Mzg6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkFzc2V0Rm9ybWF0PXZvaWQgMCxmdW5jdGlvbihlKXtlLnBuZz1cInBuZ1wiLGUucGRmPVwicGRmXCIsZS5zdmc9XCJzdmdcIn0ob3x8KHQuQXNzZXRGb3JtYXQ9bz17fSkpfSw4ODkwOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW89dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYXV0bz1cIkF1dG9cIixlLnNxdWFyZT1cIlNxdWFyZVwiLGUubGFuZHNjYXBlPVwiTGFuZHNjYXBlXCIsZS5wb3J0cmFpdD1cIlBvcnRyYWl0XCIsZS53aWRlPVwiV2lkZVwifShvfHwodC5Eb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW89bz17fSkpfSw5MTI1OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5TaGFkb3dUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmRyb3A9XCJEcm9wXCIsZS5pbm5lcj1cIklubmVyXCJ9KG98fCh0LlNoYWRvd1R5cGU9bz17fSkpfSw5MTMzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tPcHRpb25Db2xvcj12b2lkIDAsZnVuY3Rpb24oZSl7ZS5ncmVlbj1cIkdyZWVuXCIsZS5yZWQ9XCJSZWRcIixlLnllbGxvdz1cIlllbGxvd1wiLGUuYmx1ZT1cIkJsdWVcIixlLnB1cnBsZT1cIlB1cnBsZVwiLGUub3JhbmdlPVwiT3JhbmdlXCIsZS5waW5rPVwiUGlua1wiLGUudGVhbD1cIlRlYWxcIixlLmdyZXk9XCJHcmV5XCIsZS5saWdodEdyZXk9XCJMaWdodEdyZXlcIixlLmN5YW49XCJDeWFuXCIsZS5mdWNoc2lhPVwiRnVjaHNpYVwifShvfHwodC5Eb2NzQmxvY2tPcHRpb25Db2xvcj1vPXt9KSl9LDkzNzc6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1FbnRpdHlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnRva2VuPVwiVG9rZW5cIixlLnRva2VuR3JvdXA9XCJUb2tlbkdyb3VwXCIsZS5hc3NldD1cIkFzc2V0XCIsZS5hc3NldEdyb3VwPVwiQXNzZXRHcm91cFwiLGUuY29tcG9uZW50PVwiQ29tcG9uZW50XCIsZS5jb21wb25lbnRHcm91cD1cIkNvbXBvbmVudEdyb3VwXCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1FbnRpdHlUeXBlPW89e30pKX0sOTQ3ODooZSx0LG8pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5jb252ZXJ0UmVtb3RlVG9Vc2VyUm9sZT10LlVzZXJSb2xlPXZvaWQgMDtjb25zdCByPW8oNDM3OSk7dmFyIG47IWZ1bmN0aW9uKGUpe2Uub3duZXI9XCJPd25lclwiLGUuYWRtaW49XCJBZG1pblwiLGUuY3JlYXRvcj1cIkNyZWF0b3JcIixlLmNvbnRyaWJ1dG9yPVwiQ29udHJpYnV0b3JcIixlLmJpbGxpbmc9XCJCaWxsaW5nXCIsZS52aWV3ZXI9XCJWaWV3ZXJcIn0obnx8KHQuVXNlclJvbGU9bj17fSkpLHQuY29udmVydFJlbW90ZVRvVXNlclJvbGU9ZT0+e3N3aXRjaChlKXtjYXNlXCJPd25lclwiOnJldHVybiBuLm93bmVyO2Nhc2VcIkFkbWluXCI6cmV0dXJuIG4uYWRtaW47Y2FzZVwiQ3JlYXRvclwiOnJldHVybiBuLmNyZWF0b3I7Y2FzZVwiQ29udHJpYnV0b3JcIjpyZXR1cm4gbi5jb250cmlidXRvcjtjYXNlXCJCaWxsaW5nXCI6cmV0dXJuIG4uYmlsbGluZztjYXNlXCJWaWV3ZXJcIjpyZXR1cm4gbi52aWV3ZXI7ZGVmYXVsdDp0aHJvdyByLlN1cGVybm92YUVycm9yLmZyb21NZXNzYWdlKGBVbmtub3duIHJvbGU6ICR7ZX1gKX19fSw5ODk2OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2VbZS5oMT0xXT1cImgxXCIsZVtlLmgyPTJdPVwiaDJcIixlW2UuaDM9M109XCJoM1wifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGU9bz17fSkpfSw5OTMyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kb2NzSW1hZ2VSZWZUb1VybD10LkRvY3NJbWFnZVJlZlR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UucmVzb3VyY2U9XCJSZXNvdXJjZVwiLGUuZmlnbWFOb2RlPVwiRmlnbWFOb2RlXCJ9KG98fCh0LkRvY3NJbWFnZVJlZlR5cGU9bz17fSkpLHQuZG9jc0ltYWdlUmVmVG9Vcmw9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO2lmKGUpc3dpdGNoKGUudHlwZSl7Y2FzZSBvLnJlc291cmNlOnJldHVybiBudWxsPT09KG49ZS5yZXNvdXJjZSl8fHZvaWQgMD09PW4/dm9pZCAwOm4udXJsO2Nhc2Ugby5maWdtYU5vZGU6aWYoIWUuZmlnbWFOb2RlfHwhZS5maWdtYU5vZGUuc291cmNlSWR8fCFlLmZpZ21hTm9kZS5mcmFtZVJlZmVyZW5jZUlkKXJldHVybjtyZXR1cm4gdC5yZXNvdXJjZXMuZ2V0RmlnbWFGcmFtZUhvc3RlZFVybCh7ZGVzaWduU3lzdGVtSWQ6ci5kc0lkLHZlcnNpb25JZDpyLnZlcnNpb25JZH0sZS5maWdtYU5vZGUuZnJhbWVSZWZlcmVuY2VJZCk7ZGVmYXVsdDpyZXR1cm59fX19LHQ9e307ZnVuY3Rpb24gbyhyKXt2YXIgbj10W3JdO2lmKHZvaWQgMCE9PW4pcmV0dXJuIG4uZXhwb3J0czt2YXIgaT10W3JdPXtleHBvcnRzOnt9fTtyZXR1cm4gZVtyXShpLGkuZXhwb3J0cyxvKSxpLmV4cG9ydHN9dmFyIHI9e307KCgpPT57dmFyIGU9cjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLlRva2VuVHlwZT1lLlRleHREZWNvcmF0aW9uPWUuVGV4dENhc2U9ZS5TaGFkb3dUeXBlPWUuUmljaFRleHRTcGFuQXR0cmlidXRlVHlwZT1lLkdyYWRpZW50VHlwZT1lLkZyYW1lTGF5b3V0PWUuRnJhbWVBbGlnbm1lbnQ9ZS5JY29uU2V0PWUuU291cmNlVHlwZT1lLkRvY3NJbWFnZVJlZlR5cGU9ZS5Eb2NzTGlua1JlZlR5cGU9ZS5Eb2NzU2VjdGlvblR5cGU9ZS5Eb2NzRW50aXR5VHlwZT1lLkRvY3NFbnRpdHlHcm91cEJlaGF2aW9yPWUuRG9jc0Jsb2NrVGV4dFByb3BlcnR5U3R5bGU9ZS5Eb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGU9ZS5Eb2NzQmxvY2tPcHRpb25Db2xvcj1lLkRvY3NCbG9ja09wdGlvblJlbmRlcmluZ1N0eWxlPWUuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRXaWR0aD1lLkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0VHlwZT1lLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVR5cGU9ZS5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUZXh0U3R5bGU9ZS5Eb2NzQmxvY2tJdGVtUHJvcGVydHlSaWNoVGV4dFN0eWxlPWUuRG9jc0Jsb2NrSXRlbVByb3BlcnR5T3B0aW9uUmVuZGVyaW5nU3R5bGU9ZS5Eb2NzQmxvY2tJdGVtRW50aXR5VHlwZT1lLkRvY3NCbG9ja0ltYWdlUHJvcGVydHlBc3BlY3RSYXRpbz1lLkRvY3NCbG9ja0JlaGF2aW9yU2VsZWN0aW9uVHlwZT1lLkRvY3NCbG9ja0JlaGF2aW9yRGF0YVR5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZT1lLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VBc3NldFR5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5SXRlbVR5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5SGVhZGluZ1R5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5R3JvdXBCZWhhdmlvcj1lLkRvY3VtZW50YXRpb25MZWdhY3lDYWxsb3V0VHlwZT1lLkJvcmRlclN0eWxlPWUuQm9yZGVyUG9zaXRpb249ZS5CbHVyVHlwZT1lLkFzc2V0U2NhbGVUeXBlPWUuQXNzZXRTY2FsZT1lLkFzc2V0Rm9ybWF0PWUuQWxpZ25tZW50PWUuQUxMX1RPS0VOX1RZUEVTPWUuQUxMX0JPUkRFUl9TVFlMRVM9ZS5BTExfQk9SREVSX1BPU0lUSU9OUz1lLk9QVElPTl9UT0tFTl9UWVBFUz1lLlNUUklOR19UT0tFTl9UWVBFUz1lLkRJTUVOU0lPTl9UT0tFTl9UWVBFUz12b2lkIDAsZS5QdWxzYXJFeGVjdXRvcj1lLk91dHB1dEZpbGVUeXBlPWUuQ3VzdG9tRG9tYWluU3RhdGU9ZS5DdXN0b21Eb21haW5FcnJvckNvZGU9ZS5JbXBvcnRXYXJuaW5nVHlwZT1lLldvcmtzcGFjZU5QTVJlZ2lzdHJ5VHlwZT1lLldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGU9ZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25TdGF0dXM9ZS5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25Qcm9kdWN0Q29kZT1lLldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbD1lLlZpc2liaWxpdHlUeXBlPWUuVXNlclJvbGU9ZS5Vbml0PXZvaWQgMDt2YXIgdD1vKDM3ODgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRElNRU5TSU9OX1RPS0VOX1RZUEVTXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuRElNRU5TSU9OX1RPS0VOX1RZUEVTfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiU1RSSU5HX1RPS0VOX1RZUEVTXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuU1RSSU5HX1RPS0VOX1RZUEVTfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiT1BUSU9OX1RPS0VOX1RZUEVTXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuT1BUSU9OX1RPS0VOX1RZUEVTfX0pO3ZhciBuPW8oMTE2MCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBTExfQk9SREVSX1BPU0lUSU9OU1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBuLkFMTF9CT1JERVJfUE9TSVRJT05TfX0pO3ZhciBpPW8oNDU0Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBTExfQk9SREVSX1NUWUxFU1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpLkFMTF9CT1JERVJfU1RZTEVTfX0pO3ZhciBhPW8oMzc4OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBTExfVE9LRU5fVFlQRVNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYS5BTExfVE9LRU5fVFlQRVN9fSk7dmFyIGM9byg3NDc2KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkFsaWdubWVudFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjLkFsaWdubWVudH19KTt2YXIgbD1vKDg3MzgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQXNzZXRGb3JtYXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbC5Bc3NldEZvcm1hdH19KTt2YXIgdT1vKDkxNSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBc3NldFNjYWxlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHUuQXNzZXRTY2FsZX19KTt2YXIgcz1vKDg5OSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBc3NldFNjYWxlVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBzLkFzc2V0U2NhbGVUeXBlfX0pO3ZhciBkPW8oNjE5Mik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJCbHVyVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBkLkJsdXJUeXBlfX0pO3ZhciBwPW8oMTE2MCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJCb3JkZXJQb3NpdGlvblwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBwLkJvcmRlclBvc2l0aW9ufX0pO3ZhciB5PW8oNDU0Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJCb3JkZXJTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB5LkJvcmRlclN0eWxlfX0pO3ZhciBtPW8oNTEwMik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5Q2FsbG91dFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbS5Eb2N1bWVudGF0aW9uTGVnYWN5Q2FsbG91dFR5cGV9fSk7dmFyIFQ9bygyMTIzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lHcm91cEJlaGF2aW9yXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFQuRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3J9fSk7dmFyIHY9byg5ODk2KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lIZWFkaW5nVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB2LkRvY3VtZW50YXRpb25MZWdhY3lIZWFkaW5nVHlwZX19KTt2YXIgZj1vKDczNzkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGYuRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlfX0pO3ZhciBnPW8oMTQyMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUFzc2V0VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBnLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlfX0pO3ZhciBQPW8oMTg0Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBQLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUeXBlfX0pO3ZhciBiPW8oMTYwMSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVGhlbWVUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGIuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZX19KTt2YXIgUz1vKDI2NTcpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1Nob3J0Y3V0VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBTLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dFR5cGV9fSk7dmFyIE89byg1NjUxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0JlaGF2aW9yRGF0YVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTy5Eb2NzQmxvY2tCZWhhdmlvckRhdGFUeXBlfX0pO3ZhciBfPW8oMzczMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tCZWhhdmlvclNlbGVjdGlvblR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gXy5Eb2NzQmxvY2tCZWhhdmlvclNlbGVjdGlvblR5cGV9fSk7dmFyIEQ9byg4ODkwKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0ltYWdlUHJvcGVydHlBc3BlY3RSYXRpb1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBELkRvY3NCbG9ja0ltYWdlUHJvcGVydHlBc3BlY3RSYXRpb319KTt2YXIgST1vKDkzNzcpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbUVudGl0eVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSS5Eb2NzQmxvY2tJdGVtRW50aXR5VHlwZX19KTt2YXIgRT1vKDU4ODMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbVByb3BlcnR5T3B0aW9uUmVuZGVyaW5nU3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRS5Eb2NzQmxvY2tJdGVtUHJvcGVydHlPcHRpb25SZW5kZXJpbmdTdHlsZX19KTt2YXIgaD1vKDgwNjEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbVByb3BlcnR5UmljaFRleHRTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBoLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGV9fSk7dmFyIGs9byg3NDc5KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVRleHRTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBrLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVRleHRTdHlsZX19KTt2YXIgTj1vKDY4MzkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbVByb3BlcnR5VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBOLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVR5cGV9fSk7dmFyIEI9byg4MDk1KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCLkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0VHlwZX19KTt2YXIgTD1vKDcyOTEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRXaWR0aFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBMLkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0V2lkdGh9fSk7dmFyIFI9byg1OTYzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja09wdGlvblJlbmRlcmluZ1N0eWxlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFIuRG9jc0Jsb2NrT3B0aW9uUmVuZGVyaW5nU3R5bGV9fSk7dmFyIGo9byg5MTMzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja09wdGlvbkNvbG9yXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGouRG9jc0Jsb2NrT3B0aW9uQ29sb3J9fSk7dmFyIEM9byg2NjQ0KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja1JpY2hUZXh0UHJvcGVydHlTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBDLkRvY3NCbG9ja1JpY2hUZXh0UHJvcGVydHlTdHlsZX19KTt2YXIgTT1vKDMwNik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tUZXh0UHJvcGVydHlTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBNLkRvY3NCbG9ja1RleHRQcm9wZXJ0eVN0eWxlfX0pO3ZhciB4PW8oNDA2OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzRW50aXR5R3JvdXBCZWhhdmlvclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB4LkRvY3NFbnRpdHlHcm91cEJlaGF2aW9yfX0pO3ZhciBBPW8oMTIzMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzRW50aXR5VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBBLkRvY3NFbnRpdHlUeXBlfX0pO3ZhciBGPW8oNzk3MSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzU2VjdGlvblR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRi5Eb2NzU2VjdGlvblR5cGV9fSk7dmFyIHc9byg1NjczKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NMaW5rUmVmVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB3LkRvY3NMaW5rUmVmVHlwZX19KTt2YXIgVT1vKDk5MzIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0ltYWdlUmVmVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBVLkRvY3NJbWFnZVJlZlR5cGV9fSk7dmFyIFk9byg0NjUyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlNvdXJjZVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gWS5Tb3VyY2VUeXBlfX0pO3ZhciBXPW8oOTM0KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkljb25TZXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gVy5JY29uU2V0fX0pO3ZhciBHPW8oMTI1NSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJGcmFtZUFsaWdubWVudFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBHLkZyYW1lQWxpZ25tZW50fX0pO3ZhciBLPW8oMzcxOCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJGcmFtZUxheW91dFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBLLkZyYW1lTGF5b3V0fX0pO3ZhciBIPW8oMSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJHcmFkaWVudFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSC5HcmFkaWVudFR5cGV9fSk7dmFyIFY9bygyNjc0KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlJpY2hUZXh0U3BhbkF0dHJpYnV0ZVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gVi5SaWNoVGV4dFNwYW5BdHRyaWJ1dGVUeXBlfX0pO3ZhciAkPW8oOTEyNSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJTaGFkb3dUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuICQuU2hhZG93VHlwZX19KTt2YXIgcT1vKDkyMik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJUZXh0Q2FzZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBxLlRleHRDYXNlfX0pO3ZhciB6PW8oNzA0MCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJUZXh0RGVjb3JhdGlvblwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB6LlRleHREZWNvcmF0aW9ufX0pO3ZhciBKPW8oMzc4OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJUb2tlblR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSi5Ub2tlblR5cGV9fSk7dmFyIFE9byg4NjA3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlVuaXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUS5Vbml0fX0pO3ZhciBaPW8oOTQ3OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJVc2VyUm9sZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBaLlVzZXJSb2xlfX0pO3ZhciBYPW8oNjE0MSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJWaXNpYmlsaXR5VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBYLlZpc2liaWxpdHlUeXBlfX0pO3ZhciBlZT1vKDU1MDMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiV29ya3NwYWNlU3Vic2NyaXB0aW9uUGxhbkludGVydmFsXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGVlLldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbH19KTt2YXIgdGU9byg0MjkwKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIldvcmtzcGFjZVN1YnNjcmlwdGlvblByb2R1Y3RDb2RlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRlLldvcmtzcGFjZVN1YnNjcmlwdGlvblByb2R1Y3RDb2RlfX0pO3ZhciBvZT1vKDM2MDcpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiV29ya3NwYWNlU3Vic2NyaXB0aW9uU3RhdHVzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG9lLldvcmtzcGFjZVN1YnNjcmlwdGlvblN0YXR1c319KTt2YXIgcmU9byg2Mjk4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIldvcmtzcGFjZU5QTVJlZ2lzdHJ5QXV0aFR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcmUuV29ya3NwYWNlTlBNUmVnaXN0cnlBdXRoVHlwZX19KTt2YXIgbmU9byg3OTY4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIldvcmtzcGFjZU5QTVJlZ2lzdHJ5VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBuZS5Xb3Jrc3BhY2VOUE1SZWdpc3RyeVR5cGV9fSk7dmFyIGllPW8oODA0Mik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJJbXBvcnRXYXJuaW5nVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpZS5JbXBvcnRXYXJuaW5nVHlwZX19KTt2YXIgYWU9byg1Njk1KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkN1c3RvbURvbWFpbkVycm9yQ29kZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhZS5DdXN0b21Eb21haW5FcnJvckNvZGV9fSk7dmFyIGNlPW8oNzczNyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJDdXN0b21Eb21haW5TdGF0ZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjZS5DdXN0b21Eb21haW5TdGF0ZX19KTt2YXIgbGU9bygyODAyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIk91dHB1dEZpbGVUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGxlLk91dHB1dEZpbGVUeXBlfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiUHVsc2FyRXhlY3V0b3JcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbGUuUHVsc2FyRXhlY3V0b3J9fSl9KSgpO3ZhciBuPWV4cG9ydHM7Zm9yKHZhciBpIGluIHIpbltpXT1yW2ldO3IuX19lc01vZHVsZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KSgpOyIsIi8vIFJlZ2V4cHMgaW52b2x2ZWQgd2l0aCBzcGxpdHRpbmcgd29yZHMgaW4gdmFyaW91cyBjYXNlIGZvcm1hdHMuXG5jb25zdCBTUExJVF9MT1dFUl9VUFBFUl9SRSA9IC8oW1xccHtMbH1cXGRdKShcXHB7THV9KS9ndTtcbmNvbnN0IFNQTElUX1VQUEVSX1VQUEVSX1JFID0gLyhcXHB7THV9KShbXFxwe0x1fV1bXFxwe0xsfV0pL2d1O1xuLy8gVXNlZCB0byBpdGVyYXRlIG92ZXIgdGhlIGluaXRpYWwgc3BsaXQgcmVzdWx0IGFuZCBzZXBhcmF0ZSBudW1iZXJzLlxuY29uc3QgU1BMSVRfU0VQQVJBVEVfTlVNQkVSX1JFID0gLyhcXGQpXFxwe0xsfXwoXFxwe0x9KVxcZC91O1xuLy8gUmVnZXhwIGludm9sdmVkIHdpdGggc3RyaXBwaW5nIG5vbi13b3JkIGNoYXJhY3RlcnMgZnJvbSB0aGUgcmVzdWx0LlxuY29uc3QgREVGQVVMVF9TVFJJUF9SRUdFWFAgPSAvW15cXHB7TH1cXGRdKy9naXU7XG4vLyBUaGUgcmVwbGFjZW1lbnQgdmFsdWUgZm9yIHNwbGl0cy5cbmNvbnN0IFNQTElUX1JFUExBQ0VfVkFMVUUgPSBcIiQxXFwwJDJcIjtcbi8vIFRoZSBkZWZhdWx0IGNoYXJhY3RlcnMgdG8ga2VlcCBhZnRlciB0cmFuc2Zvcm1pbmcgY2FzZS5cbmNvbnN0IERFRkFVTFRfUFJFRklYX1NVRkZJWF9DSEFSQUNURVJTID0gXCJcIjtcbi8qKlxuICogU3BsaXQgYW55IGNhc2VkIGlucHV0IHN0cmluZ3MgaW50byBhbiBhcnJheSBvZiB3b3Jkcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0KHZhbHVlKSB7XG4gICAgbGV0IHJlc3VsdCA9IHZhbHVlLnRyaW0oKTtcbiAgICByZXN1bHQgPSByZXN1bHRcbiAgICAgICAgLnJlcGxhY2UoU1BMSVRfTE9XRVJfVVBQRVJfUkUsIFNQTElUX1JFUExBQ0VfVkFMVUUpXG4gICAgICAgIC5yZXBsYWNlKFNQTElUX1VQUEVSX1VQUEVSX1JFLCBTUExJVF9SRVBMQUNFX1ZBTFVFKTtcbiAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShERUZBVUxUX1NUUklQX1JFR0VYUCwgXCJcXDBcIik7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgZW5kID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAvLyBUcmltIHRoZSBkZWxpbWl0ZXIgZnJvbSBhcm91bmQgdGhlIG91dHB1dCBzdHJpbmcuXG4gICAgd2hpbGUgKHJlc3VsdC5jaGFyQXQoc3RhcnQpID09PSBcIlxcMFwiKVxuICAgICAgICBzdGFydCsrO1xuICAgIGlmIChzdGFydCA9PT0gZW5kKVxuICAgICAgICByZXR1cm4gW107XG4gICAgd2hpbGUgKHJlc3VsdC5jaGFyQXQoZW5kIC0gMSkgPT09IFwiXFwwXCIpXG4gICAgICAgIGVuZC0tO1xuICAgIHJldHVybiByZXN1bHQuc2xpY2Uoc3RhcnQsIGVuZCkuc3BsaXQoL1xcMC9nKTtcbn1cbi8qKlxuICogU3BsaXQgdGhlIGlucHV0IHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIHdvcmRzLCBzZXBhcmF0aW5nIG51bWJlcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFNlcGFyYXRlTnVtYmVycyh2YWx1ZSkge1xuICAgIGNvbnN0IHdvcmRzID0gc3BsaXQodmFsdWUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgd29yZCA9IHdvcmRzW2ldO1xuICAgICAgICBjb25zdCBtYXRjaCA9IFNQTElUX1NFUEFSQVRFX05VTUJFUl9SRS5leGVjKHdvcmQpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IG1hdGNoLmluZGV4ICsgKG1hdGNoWzFdID8/IG1hdGNoWzJdKS5sZW5ndGg7XG4gICAgICAgICAgICB3b3Jkcy5zcGxpY2UoaSwgMSwgd29yZC5zbGljZSgwLCBvZmZzZXQpLCB3b3JkLnNsaWNlKG9mZnNldCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB3b3Jkcztcbn1cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBzcGFjZSBzZXBhcmF0ZWQgbG93ZXIgY2FzZSAoYGZvbyBiYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vQ2FzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IFtwcmVmaXgsIHdvcmRzLCBzdWZmaXhdID0gc3BsaXRQcmVmaXhTdWZmaXgoaW5wdXQsIG9wdGlvbnMpO1xuICAgIHJldHVybiAocHJlZml4ICtcbiAgICAgICAgd29yZHMubWFwKGxvd2VyRmFjdG9yeShvcHRpb25zPy5sb2NhbGUpKS5qb2luKG9wdGlvbnM/LmRlbGltaXRlciA/PyBcIiBcIikgK1xuICAgICAgICBzdWZmaXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGNhbWVsIGNhc2UgKGBmb29CYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsQ2FzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IFtwcmVmaXgsIHdvcmRzLCBzdWZmaXhdID0gc3BsaXRQcmVmaXhTdWZmaXgoaW5wdXQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGxvd2VyID0gbG93ZXJGYWN0b3J5KG9wdGlvbnM/LmxvY2FsZSk7XG4gICAgY29uc3QgdXBwZXIgPSB1cHBlckZhY3Rvcnkob3B0aW9ucz8ubG9jYWxlKTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBvcHRpb25zPy5tZXJnZUFtYmlndW91c0NoYXJhY3RlcnNcbiAgICAgICAgPyBjYXBpdGFsQ2FzZVRyYW5zZm9ybUZhY3RvcnkobG93ZXIsIHVwcGVyKVxuICAgICAgICA6IHBhc2NhbENhc2VUcmFuc2Zvcm1GYWN0b3J5KGxvd2VyLCB1cHBlcik7XG4gICAgcmV0dXJuIChwcmVmaXggK1xuICAgICAgICB3b3Jkc1xuICAgICAgICAgICAgLm1hcCgod29yZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gbG93ZXIod29yZCk7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtKHdvcmQsIGluZGV4KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKG9wdGlvbnM/LmRlbGltaXRlciA/PyBcIlwiKSArXG4gICAgICAgIHN1ZmZpeCk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gcGFzY2FsIGNhc2UgKGBGb29CYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhc2NhbENhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBbcHJlZml4LCB3b3Jkcywgc3VmZml4XSA9IHNwbGl0UHJlZml4U3VmZml4KGlucHV0LCBvcHRpb25zKTtcbiAgICBjb25zdCBsb3dlciA9IGxvd2VyRmFjdG9yeShvcHRpb25zPy5sb2NhbGUpO1xuICAgIGNvbnN0IHVwcGVyID0gdXBwZXJGYWN0b3J5KG9wdGlvbnM/LmxvY2FsZSk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gb3B0aW9ucz8ubWVyZ2VBbWJpZ3VvdXNDaGFyYWN0ZXJzXG4gICAgICAgID8gY2FwaXRhbENhc2VUcmFuc2Zvcm1GYWN0b3J5KGxvd2VyLCB1cHBlcilcbiAgICAgICAgOiBwYXNjYWxDYXNlVHJhbnNmb3JtRmFjdG9yeShsb3dlciwgdXBwZXIpO1xuICAgIHJldHVybiBwcmVmaXggKyB3b3Jkcy5tYXAodHJhbnNmb3JtKS5qb2luKG9wdGlvbnM/LmRlbGltaXRlciA/PyBcIlwiKSArIHN1ZmZpeDtcbn1cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBwYXNjYWwgc25ha2UgY2FzZSAoYEZvb19CYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhc2NhbFNuYWtlQ2FzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIHJldHVybiBjYXBpdGFsQ2FzZShpbnB1dCwgeyBkZWxpbWl0ZXI6IFwiX1wiLCAuLi5vcHRpb25zIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGNhcGl0YWwgY2FzZSAoYEZvbyBCYXJgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgW3ByZWZpeCwgd29yZHMsIHN1ZmZpeF0gPSBzcGxpdFByZWZpeFN1ZmZpeChpbnB1dCwgb3B0aW9ucyk7XG4gICAgY29uc3QgbG93ZXIgPSBsb3dlckZhY3Rvcnkob3B0aW9ucz8ubG9jYWxlKTtcbiAgICBjb25zdCB1cHBlciA9IHVwcGVyRmFjdG9yeShvcHRpb25zPy5sb2NhbGUpO1xuICAgIHJldHVybiAocHJlZml4ICtcbiAgICAgICAgd29yZHNcbiAgICAgICAgICAgIC5tYXAoY2FwaXRhbENhc2VUcmFuc2Zvcm1GYWN0b3J5KGxvd2VyLCB1cHBlcikpXG4gICAgICAgICAgICAuam9pbihvcHRpb25zPy5kZWxpbWl0ZXIgPz8gXCIgXCIpICtcbiAgICAgICAgc3VmZml4KTtcbn1cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBjb25zdGFudCBjYXNlIChgRk9PX0JBUmApLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uc3RhbnRDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgW3ByZWZpeCwgd29yZHMsIHN1ZmZpeF0gPSBzcGxpdFByZWZpeFN1ZmZpeChpbnB1dCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIChwcmVmaXggK1xuICAgICAgICB3b3Jkcy5tYXAodXBwZXJGYWN0b3J5KG9wdGlvbnM/LmxvY2FsZSkpLmpvaW4ob3B0aW9ucz8uZGVsaW1pdGVyID8/IFwiX1wiKSArXG4gICAgICAgIHN1ZmZpeCk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gZG90IGNhc2UgKGBmb28uYmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3RDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5vQ2FzZShpbnB1dCwgeyBkZWxpbWl0ZXI6IFwiLlwiLCAuLi5vcHRpb25zIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGtlYmFiIGNhc2UgKGBmb28tYmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBrZWJhYkNhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbm9DYXNlKGlucHV0LCB7IGRlbGltaXRlcjogXCItXCIsIC4uLm9wdGlvbnMgfSk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gcGF0aCBjYXNlIChgZm9vL2JhcmApLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGF0aENhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbm9DYXNlKGlucHV0LCB7IGRlbGltaXRlcjogXCIvXCIsIC4uLm9wdGlvbnMgfSk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gcGF0aCBjYXNlIChgRm9vIGJhcmApLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VudGVuY2VDYXNlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgW3ByZWZpeCwgd29yZHMsIHN1ZmZpeF0gPSBzcGxpdFByZWZpeFN1ZmZpeChpbnB1dCwgb3B0aW9ucyk7XG4gICAgY29uc3QgbG93ZXIgPSBsb3dlckZhY3Rvcnkob3B0aW9ucz8ubG9jYWxlKTtcbiAgICBjb25zdCB1cHBlciA9IHVwcGVyRmFjdG9yeShvcHRpb25zPy5sb2NhbGUpO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IGNhcGl0YWxDYXNlVHJhbnNmb3JtRmFjdG9yeShsb3dlciwgdXBwZXIpO1xuICAgIHJldHVybiAocHJlZml4ICtcbiAgICAgICAgd29yZHNcbiAgICAgICAgICAgIC5tYXAoKHdvcmQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybSh3b3JkKTtcbiAgICAgICAgICAgIHJldHVybiBsb3dlcih3b3JkKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKG9wdGlvbnM/LmRlbGltaXRlciA/PyBcIiBcIikgK1xuICAgICAgICBzdWZmaXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIHNuYWtlIGNhc2UgKGBmb29fYmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbmFrZUNhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbm9DYXNlKGlucHV0LCB7IGRlbGltaXRlcjogXCJfXCIsIC4uLm9wdGlvbnMgfSk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gaGVhZGVyIGNhc2UgKGBGb28tQmFyYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFpbkNhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY2FwaXRhbENhc2UoaW5wdXQsIHsgZGVsaW1pdGVyOiBcIi1cIiwgLi4ub3B0aW9ucyB9KTtcbn1cbmZ1bmN0aW9uIGxvd2VyRmFjdG9yeShsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlID09PSBmYWxzZVxuICAgICAgICA/IChpbnB1dCkgPT4gaW5wdXQudG9Mb3dlckNhc2UoKVxuICAgICAgICA6IChpbnB1dCkgPT4gaW5wdXQudG9Mb2NhbGVMb3dlckNhc2UobG9jYWxlKTtcbn1cbmZ1bmN0aW9uIHVwcGVyRmFjdG9yeShsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlID09PSBmYWxzZVxuICAgICAgICA/IChpbnB1dCkgPT4gaW5wdXQudG9VcHBlckNhc2UoKVxuICAgICAgICA6IChpbnB1dCkgPT4gaW5wdXQudG9Mb2NhbGVVcHBlckNhc2UobG9jYWxlKTtcbn1cbmZ1bmN0aW9uIGNhcGl0YWxDYXNlVHJhbnNmb3JtRmFjdG9yeShsb3dlciwgdXBwZXIpIHtcbiAgICByZXR1cm4gKHdvcmQpID0+IGAke3VwcGVyKHdvcmRbMF0pfSR7bG93ZXIod29yZC5zbGljZSgxKSl9YDtcbn1cbmZ1bmN0aW9uIHBhc2NhbENhc2VUcmFuc2Zvcm1GYWN0b3J5KGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiAod29yZCwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hhcjAgPSB3b3JkWzBdO1xuICAgICAgICBjb25zdCBpbml0aWFsID0gaW5kZXggPiAwICYmIGNoYXIwID49IFwiMFwiICYmIGNoYXIwIDw9IFwiOVwiID8gXCJfXCIgKyBjaGFyMCA6IHVwcGVyKGNoYXIwKTtcbiAgICAgICAgcmV0dXJuIGluaXRpYWwgKyBsb3dlcih3b3JkLnNsaWNlKDEpKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc3BsaXRQcmVmaXhTdWZmaXgoaW5wdXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHNwbGl0Rm4gPSBvcHRpb25zLnNwbGl0ID8/IChvcHRpb25zLnNlcGFyYXRlTnVtYmVycyA/IHNwbGl0U2VwYXJhdGVOdW1iZXJzIDogc3BsaXQpO1xuICAgIGNvbnN0IHByZWZpeENoYXJhY3RlcnMgPSBvcHRpb25zLnByZWZpeENoYXJhY3RlcnMgPz8gREVGQVVMVF9QUkVGSVhfU1VGRklYX0NIQVJBQ1RFUlM7XG4gICAgY29uc3Qgc3VmZml4Q2hhcmFjdGVycyA9IG9wdGlvbnMuc3VmZml4Q2hhcmFjdGVycyA/PyBERUZBVUxUX1BSRUZJWF9TVUZGSVhfQ0hBUkFDVEVSUztcbiAgICBsZXQgcHJlZml4SW5kZXggPSAwO1xuICAgIGxldCBzdWZmaXhJbmRleCA9IGlucHV0Lmxlbmd0aDtcbiAgICB3aGlsZSAocHJlZml4SW5kZXggPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgY2hhciA9IGlucHV0LmNoYXJBdChwcmVmaXhJbmRleCk7XG4gICAgICAgIGlmICghcHJlZml4Q2hhcmFjdGVycy5pbmNsdWRlcyhjaGFyKSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBwcmVmaXhJbmRleCsrO1xuICAgIH1cbiAgICB3aGlsZSAoc3VmZml4SW5kZXggPiBwcmVmaXhJbmRleCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHN1ZmZpeEluZGV4IC0gMTtcbiAgICAgICAgY29uc3QgY2hhciA9IGlucHV0LmNoYXJBdChpbmRleCk7XG4gICAgICAgIGlmICghc3VmZml4Q2hhcmFjdGVycy5pbmNsdWRlcyhjaGFyKSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBzdWZmaXhJbmRleCA9IGluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICBpbnB1dC5zbGljZSgwLCBwcmVmaXhJbmRleCksXG4gICAgICAgIHNwbGl0Rm4oaW5wdXQuc2xpY2UocHJlZml4SW5kZXgsIHN1ZmZpeEluZGV4KSksXG4gICAgICAgIGlucHV0LnNsaWNlKHN1ZmZpeEluZGV4KSxcbiAgICBdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRva2VuTmFtZVN0cnVjdHVyZSA9IGV4cG9ydHMuVG9rZW5Tb3J0T3JkZXIgPSBleHBvcnRzLkZpbGVTdHJ1Y3R1cmUgPSBleHBvcnRzLlRoZW1lRXhwb3J0U3R5bGUgPSB2b2lkIDA7XG4vKipcbiAqIE1haW4gY29uZmlndXJhdGlvbiBvZiB0aGUgZXhwb3J0ZXIgLSB0eXBlIGludGVyZmFjZS4gRGVmYXVsdCB2YWx1ZXMgZm9yIGl0IGNhbiBiZSBzZXQgdGhyb3VnaCBgY29uZmlnLmpzb25gIGFuZCB1c2VycyBjYW4gb3ZlcnJpZGUgdGhlIGJlaGF2aW9yIHdoZW4gY3JlYXRpbmcgdGhlIHBpcGVsaW5lcy5cbiAqL1xudmFyIFRoZW1lRXhwb3J0U3R5bGU7XG4oZnVuY3Rpb24gKFRoZW1lRXhwb3J0U3R5bGUpIHtcbiAgICBUaGVtZUV4cG9ydFN0eWxlW1wiQXBwbHlEaXJlY3RseVwiXSA9IFwiYXBwbHlEaXJlY3RseVwiO1xuICAgIFRoZW1lRXhwb3J0U3R5bGVbXCJTZXBhcmF0ZUZpbGVzXCJdID0gXCJzZXBhcmF0ZUZpbGVzXCI7XG4gICAgVGhlbWVFeHBvcnRTdHlsZVtcIk1lcmdlZFRoZW1lXCJdID0gXCJtZXJnZWRUaGVtZVwiO1xuICAgIFRoZW1lRXhwb3J0U3R5bGVbXCJOZXN0ZWRUaGVtZXNcIl0gPSBcIm5lc3RlZFRoZW1lc1wiO1xufSkoVGhlbWVFeHBvcnRTdHlsZSB8fCAoZXhwb3J0cy5UaGVtZUV4cG9ydFN0eWxlID0gVGhlbWVFeHBvcnRTdHlsZSA9IHt9KSk7XG52YXIgRmlsZVN0cnVjdHVyZTtcbihmdW5jdGlvbiAoRmlsZVN0cnVjdHVyZSkge1xuICAgIEZpbGVTdHJ1Y3R1cmVbXCJTZXBhcmF0ZUJ5VHlwZVwiXSA9IFwic2VwYXJhdGVCeVR5cGVcIjtcbiAgICBGaWxlU3RydWN0dXJlW1wiU2luZ2xlRmlsZVwiXSA9IFwic2luZ2xlRmlsZVwiO1xufSkoRmlsZVN0cnVjdHVyZSB8fCAoZXhwb3J0cy5GaWxlU3RydWN0dXJlID0gRmlsZVN0cnVjdHVyZSA9IHt9KSk7XG52YXIgVG9rZW5Tb3J0T3JkZXI7XG4oZnVuY3Rpb24gKFRva2VuU29ydE9yZGVyKSB7XG4gICAgVG9rZW5Tb3J0T3JkZXJbXCJEZWZhdWx0XCJdID0gXCJkZWZhdWx0XCI7XG4gICAgVG9rZW5Tb3J0T3JkZXJbXCJBbHBoYWJldGljYWxcIl0gPSBcImFscGhhYmV0aWNhbFwiO1xufSkoVG9rZW5Tb3J0T3JkZXIgfHwgKGV4cG9ydHMuVG9rZW5Tb3J0T3JkZXIgPSBUb2tlblNvcnRPcmRlciA9IHt9KSk7XG52YXIgVG9rZW5OYW1lU3RydWN0dXJlO1xuKGZ1bmN0aW9uIChUb2tlbk5hbWVTdHJ1Y3R1cmUpIHtcbiAgICBUb2tlbk5hbWVTdHJ1Y3R1cmVbXCJQYXRoQW5kTmFtZVwiXSA9IFwicGF0aEFuZE5hbWVcIjtcbiAgICBUb2tlbk5hbWVTdHJ1Y3R1cmVbXCJOYW1lT25seVwiXSA9IFwibmFtZU9ubHlcIjtcbiAgICBUb2tlbk5hbWVTdHJ1Y3R1cmVbXCJDb2xsZWN0aW9uUGF0aEFuZE5hbWVcIl0gPSBcImNvbGxlY3Rpb25QYXRoQW5kTmFtZVwiO1xufSkoVG9rZW5OYW1lU3RydWN0dXJlIHx8IChleHBvcnRzLlRva2VuTmFtZVN0cnVjdHVyZSA9IFRva2VuTmFtZVN0cnVjdHVyZSA9IHt9KSk7XG4iLCIoKCk9PntcInVzZSBzdHJpY3RcIjt2YXIgZT17NDM3OTooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuU3VwZXJub3ZhRXJyb3I9dm9pZCAwO2NsYXNzIG8gZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlLHQsbyxyLG4saSxhKXtzdXBlcihlKSx0aGlzLmNvZGU9dCx0aGlzLnN0YXR1cz1vLHRoaXMuZm9ybUVycm9ycz1yLHRoaXMucmVxdWVzdElkPW4sdGhpcy5zZXJ2ZXJUaW1lPWksdGhpcy51cmw9YX1zdGF0aWMgZnJvbU5ldHdvcmtSZXNwb25zZShlLHQscil7dmFyIG4saSxhO3JldHVybiBuZXcgbyhlLm1lc3NhZ2UsZS5lcnJvckNvZGV8fGUucmVhc29ufHxlLmxhYmVsfHxudWxsLGUuY29kZXx8dCxudWxsIT09KG49ZS5mb3JtRXJyb3JzKSYmdm9pZCAwIT09bj9uOm51bGwsbnVsbCE9PShpPWUucmVxdWVzdElkKSYmdm9pZCAwIT09aT9pOm51bGwsbnVsbCE9PShhPWUuc2VydmVyVGltZSkmJnZvaWQgMCE9PWE/YTpudWxsLHIpfXN0YXRpYyBmcm9tTm9OZXR3b3JrUmVzcG9uc2UoZSl7cmV0dXJuIG5ldyBvKFwiTm8gbmV0d29yayBvciBpbnRlcm5ldCB1bnJlYWNoYWJsZVwiLFwiTk9fTkVUV09SS1wiLDEyMTYzLG51bGwsKG5ldyBEYXRlKS50b0lTT1N0cmluZygpLG51bGwsZSl9c3RhdGljIGZyb21Db2RlKGUpe3JldHVybiBuZXcgbyhlLGUsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsKX1zdGF0aWMgZnJvbU1lc3NhZ2UoZSl7cmV0dXJuIG5ldyBvKGUsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwpfWlzRmllbGRFcnJvcmVkKGUpe3JldHVybiB2b2lkIDAhPT10aGlzLmZvcm1FcnJvcnMuZmluZCgodD0+dC5rZXk9PT1lKSl9ZXJyb3JGb3JGaWVsZChlKXt2YXIgdDtyZXR1cm4gbnVsbCE9PSh0PXRoaXMuZm9ybUVycm9ycy5maW5kKCh0PT50LmtleT09PWUpKSkmJnZvaWQgMCE9PXQ/dDpudWxsfXRvU3RyaW5nKCl7dmFyIGUsdCxvLHIsbixpO3JldHVybmBcXG4gICAgRXJyb3IgdGhyb3duOiAke3RoaXMubWVzc2FnZX1cXG5cXG4gICAgQ29kZTogJHtudWxsIT09KGU9dGhpcy5jb2RlKSYmdm9pZCAwIT09ZT9lOlwiLVwifVxcblxcbiAgICBTdGF0dXM6ICR7bnVsbCE9PSh0PXRoaXMuc3RhdHVzKSYmdm9pZCAwIT09dD90OlwiLVwifVxcblxcbiAgICBGaWVsZHM6ICR7SlNPTi5zdHJpbmdpZnkodGhpcy5mb3JtRXJyb3JzLG51bGwsMil9XFxuXFxuICAgIFJlcXVlc3QgSUQ6ICR7bnVsbCE9PShvPXRoaXMucmVxdWVzdElkKSYmdm9pZCAwIT09bz9vOlwiLVwifVxcblxcbiAgICBTZXJ2ZXIgdGltZTogJHtudWxsIT09KHI9dGhpcy5zZXJ2ZXJUaW1lKSYmdm9pZCAwIT09cj9yOlwiLVwifVxcblxcbiAgICBOZXR3b3JrIFVSTDogJHtudWxsIT09KG49dGhpcy51cmwpJiZ2b2lkIDAhPT1uP246XCItXCJ9XFxuXFxuICAgIFN0YWNrOiAke251bGwhPT0oaT10aGlzLnN0YWNrKSYmdm9pZCAwIT09aT9pOlwiLVwifVxcbiAgICBgfXRvSHVtYW5SZWFkYWJsZSgpe3JldHVybmAke3RoaXMubWVzc2FnZX0ke3RoaXMucmVxdWVzdElkP2AgKHJlcXVlc3QgJHt0aGlzLnJlcXVlc3RJZH0pYDpcIlwifWB9fXQuU3VwZXJub3ZhRXJyb3I9b30sOTkzMjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZG9jc0ltYWdlUmVmVG9Vcmw9dC5Eb2NzSW1hZ2VSZWZUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnJlc291cmNlPVwiUmVzb3VyY2VcIixlLmZpZ21hTm9kZT1cIkZpZ21hTm9kZVwifShvfHwodC5Eb2NzSW1hZ2VSZWZUeXBlPW89e30pKSx0LmRvY3NJbWFnZVJlZlRvVXJsPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtpZihlKXN3aXRjaChlLnR5cGUpe2Nhc2Ugby5yZXNvdXJjZTpyZXR1cm4gbnVsbD09PShuPWUucmVzb3VyY2UpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnVybDtjYXNlIG8uZmlnbWFOb2RlOmlmKCFlLmZpZ21hTm9kZXx8IWUuZmlnbWFOb2RlLnNvdXJjZUlkfHwhZS5maWdtYU5vZGUuZnJhbWVSZWZlcmVuY2VJZClyZXR1cm47cmV0dXJuIHQucmVzb3VyY2VzLmdldEZpZ21hRnJhbWVIb3N0ZWRVcmwoe2Rlc2lnblN5c3RlbUlkOnIuZHNJZCx2ZXJzaW9uSWQ6ci52ZXJzaW9uSWR9LGUuZmlnbWFOb2RlLmZyYW1lUmVmZXJlbmNlSWQpO2RlZmF1bHQ6cmV0dXJufX19LDU2NzM6KGUsdCk9Pnt2YXIgbztmdW5jdGlvbiByKGUpe3N3aXRjaChlLnR5cGUpe2Nhc2Ugby5kb2N1bWVudGF0aW9uSXRlbTpyZXR1cm5gQHBhZ2U6JHtlLmRvY3VtZW50YXRpb25JdGVtSWR9YDtjYXNlIG8ucGFnZUhlYWRpbmc6cmV0dXJuYEBwYWdlOiR7ZS5kb2N1bWVudGF0aW9uSXRlbUlkfSMke2UucGFnZUhlYWRpbmdJZH1gO2Nhc2Ugby51cmw6cmV0dXJuIGUudXJsO2RlZmF1bHQ6cmV0dXJufX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmxpbmtBdHRyaWJ1dGVUb0RvY3NMaW5rPXQuZG9jc0xpbmtUb0xpbmtBdHRyaWJ1dGVzPXQuZG9jc0xpbmtUb1VybD10LkRvY3NMaW5rUmVmVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5kb2N1bWVudGF0aW9uSXRlbT1cIkRvY3VtZW50YXRpb25JdGVtXCIsZS5wYWdlSGVhZGluZz1cIlBhZ2VIZWFkaW5nXCIsZS51cmw9XCJVcmxcIn0ob3x8KHQuRG9jc0xpbmtSZWZUeXBlPW89e30pKSx0LmRvY3NMaW5rVG9Vcmw9cix0LmRvY3NMaW5rVG9MaW5rQXR0cmlidXRlcz1mdW5jdGlvbihlKXtjb25zdCB0PXIoZSk7aWYodClyZXR1cm57aHJlZjp0LHRhcmdldDplLm9wZW5Jbk5ld1RhYj9cIl9ibGFua1wiOlwiX3NlbGZcIn19LHQubGlua0F0dHJpYnV0ZVRvRG9jc0xpbms9ZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm47Y29uc3Qgcj1cIl9ibGFua1wiPT09dDtpZihlLnN0YXJ0c1dpdGgoXCJAcGFnZTpcIikpe2lmKGUuaW5jbHVkZXMoXCIjXCIpKXtjb25zdFt0LG5dPWUucmVwbGFjZShcIkBwYWdlOlwiLFwiXCIpLnNwbGl0KFwiI1wiKTtyZXR1cm57dHlwZTpvLnBhZ2VIZWFkaW5nLGRvY3VtZW50YXRpb25JdGVtSWQ6dCxwYWdlSGVhZGluZ0lkOm4sb3BlbkluTmV3VGFiOnJ9fXJldHVybnt0eXBlOm8uZG9jdW1lbnRhdGlvbkl0ZW0sZG9jdW1lbnRhdGlvbkl0ZW1JZDplLnJlcGxhY2UoXCJAcGFnZTpcIixcIlwiKSxvcGVuSW5OZXdUYWI6cn19cmV0dXJue3R5cGU6by51cmwsdXJsOmUsb3BlbkluTmV3VGFiOnJ9fX0sMjY1NzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1Nob3J0Y3V0PXQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1Nob3J0Y3V0VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5leHRlcm5hbD1cIkV4dGVybmFsXCIsZS5pbnRlcm5hbD1cIkludGVybmFsXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dFR5cGU9bz17fSkpLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1Nob3J0Y3V0PWNsYXNze2NvbnN0cnVjdG9yKGUpe3ZhciB0O2UudXJsP3RoaXMudHlwZT1vLmV4dGVybmFsOnRoaXMudHlwZT1vLmludGVybmFsLHRoaXMudGl0bGU9dGhpcy5zaG9ydGN1dFRpdGxlRnJvbU1vZGVsKGUsdGhpcy50eXBlKSx0aGlzLmRlc2NyaXB0aW9uPXRoaXMuc2hvcnRjdXREZXNjcmlwdGlvbkZyb21Nb2RlbChlLHRoaXMudHlwZSksdGhpcy5wcmV2aWV3VXJsPXRoaXMuc2hvcnRjdXRQcmV2aWV3VXJsRnJvbU1vZGVsKGUpLHRoaXMudHlwZT09PW8uaW50ZXJuYWwmJihudWxsPT09KHQ9ZS5kb2N1bWVudGF0aW9uSXRlbVByZXZpZXcpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LnZhbGlkKSYmZS5kb2N1bWVudGF0aW9uSXRlbUlkP3RoaXMuaW50ZXJuYWxJZD1lLmRvY3VtZW50YXRpb25JdGVtSWQ6KHRoaXMuaW50ZXJuYWxJZD1udWxsLHRoaXMudHlwZT09PW8uZXh0ZXJuYWwmJmUudXJsP3RoaXMuZXh0ZXJuYWxVcmw9ZS51cmw6dGhpcy5leHRlcm5hbFVybD1udWxsKX1zaG9ydGN1dFRpdGxlRnJvbU1vZGVsKGUsdCl7dmFyIHIsbixpLGEsYztsZXQgbD1udWxsO3JldHVybiBlLnRpdGxlJiZlLnRpdGxlLnRyaW0oKS5sZW5ndGg+MD9sPWUudGl0bGU6dD09PW8uaW50ZXJuYWw/bD1udWxsIT09KG49bnVsbD09PShyPWUuZG9jdW1lbnRhdGlvbkl0ZW1QcmV2aWV3KXx8dm9pZCAwPT09cj92b2lkIDA6ci50aXRsZSkmJnZvaWQgMCE9PW4/bjpudWxsOnQ9PT1vLmV4dGVybmFsJiYobD1udWxsIT09KGM9bnVsbCE9PShhPW51bGw9PT0oaT1lLnVybFByZXZpZXcpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLnRpdGxlKSYmdm9pZCAwIT09YT9hOmUudXJsKSYmdm9pZCAwIT09Yz9jOm51bGwpLGwmJjAhPT1sLnRyaW0oKS5sZW5ndGg/bDpudWxsfXNob3J0Y3V0RGVzY3JpcHRpb25Gcm9tTW9kZWwoZSx0KXt2YXIgcjtsZXQgbj1udWxsO3JldHVybiBlLmRlc2NyaXB0aW9uJiZlLmRlc2NyaXB0aW9uLnRyaW0oKS5sZW5ndGg+MD9uPWUuZGVzY3JpcHRpb246dD09PW8uZXh0ZXJuYWwmJihuPW51bGw9PT0ocj1lLnVybFByZXZpZXcpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmRlc2NyaXB0aW9uKSxuJiYwIT09bi50cmltKCkubGVuZ3RoP246bnVsbH1zaG9ydGN1dFByZXZpZXdVcmxGcm9tTW9kZWwoZSl7dmFyIHQsbyxyLG4saTtyZXR1cm4gbnVsbCE9PShpPW51bGwhPT0ocj1udWxsIT09KHQ9ZS5hc3NldFVybCkmJnZvaWQgMCE9PXQ/dDpudWxsPT09KG89ZS5hc3NldCl8fHZvaWQgMD09PW8/dm9pZCAwOm8udXJsKSYmdm9pZCAwIT09cj9yOm51bGw9PT0obj1lLnVybFByZXZpZXcpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnRodW1ibmFpbFVybCkmJnZvaWQgMCE9PWk/aTpudWxsfX19LDc0NzY6KGUsdCk9Pnt2YXIgbyxyO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuVGV4dEFsaWdubWVudD10LkFsaWdubWVudD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5sZWZ0PVwiTGVmdFwiLGUuY2VudGVyPVwiQ2VudGVyXCIsZS5zdHJldGNoPVwiU3RyZXRjaFwifShvfHwodC5BbGlnbm1lbnQ9bz17fSkpLGZ1bmN0aW9uKGUpe2UubGVmdD1cIkxlZnRcIixlLmNlbnRlcj1cIkNlbnRlclwiLGUucmlnaHQ9XCJSaWdodFwifShyfHwodC5UZXh0QWxpZ25tZW50PXI9e30pKX0sODczODooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQXNzZXRGb3JtYXQ9dm9pZCAwLGZ1bmN0aW9uKGUpe2UucG5nPVwicG5nXCIsZS5wZGY9XCJwZGZcIixlLnN2Zz1cInN2Z1wifShvfHwodC5Bc3NldEZvcm1hdD1vPXt9KSl9LDkxNTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQXNzZXRTY2FsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS54MT1cIngxXCIsZS54Mj1cIngyXCIsZS54Mz1cIngzXCIsZS54ND1cIng0XCJ9KG98fCh0LkFzc2V0U2NhbGU9bz17fSkpfSw4OTk6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkFzc2V0U2NhbGVUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmFzcGVjdEZpbGw9XCJBc3BlY3RGaWxsXCIsZS5hc3BlY3RGaXQ9XCJBc3BlY3RGaXRcIn0ob3x8KHQuQXNzZXRTY2FsZVR5cGU9bz17fSkpfSw2MTkyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5CbHVyVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5sYXllcj1cIkxheWVyXCIsZS5iYWNrZ3JvdW5kPVwiQmFja2dyb3VuZFwifShvfHwodC5CbHVyVHlwZT1vPXt9KSl9LDExNjA6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkFMTF9CT1JERVJfUE9TSVRJT05TPXQuQm9yZGVyUG9zaXRpb249dm9pZCAwLGZ1bmN0aW9uKGUpe2UuaW5zaWRlPVwiSW5zaWRlXCIsZS5jZW50ZXI9XCJDZW50ZXJcIixlLm91dHNpZGU9XCJPdXRzaWRlXCJ9KG98fCh0LkJvcmRlclBvc2l0aW9uPW89e30pKSx0LkFMTF9CT1JERVJfUE9TSVRJT05TPVtvLmluc2lkZSxvLmNlbnRlcixvLm91dHNpZGVdfSw0NTQ2OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5BTExfQk9SREVSX1NUWUxFUz10LkJvcmRlclN0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmRhc2hlZD1cIkRhc2hlZFwiLGUuZG90dGVkPVwiRG90dGVkXCIsZS5zb2xpZD1cIlNvbGlkXCIsZS5ncm9vdmU9XCJHcm9vdmVcIn0ob3x8KHQuQm9yZGVyU3R5bGU9bz17fSkpLHQuQUxMX0JPUkRFUl9TVFlMRVM9W28uZGFzaGVkLG8uZG90dGVkLG8uc29saWQsby5ncm9vdmVdfSw4MDQyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5JbXBvcnRXYXJuaW5nVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5VbnN1cHBvcnRlZEZpbGw9XCJVbnN1cHBvcnRlZEZpbGxcIixlLlVuc3VwcG9ydGVkU3Ryb2tlPVwiVW5zdXBwb3J0ZWRTdHJva2VcIixlLlVuc3VwcG9ydGVkRWZmZWN0PVwiVW5zdXBwb3J0ZWRFZmZlY3RcIixlLlN0eWxlTm90QXBwbGllZD1cIlN0eWxlTm90QXBwbGllZFwiLGUuTm9QdWJsaXNoZWRTdHlsZXM9XCJOb1B1Ymxpc2hlZFN0eWxlc1wiLGUuTm9QdWJsaXNoZWRDb21wb25lbnRzPVwiTm9QdWJsaXNoZWRDb21wb25lbnRzXCIsZS5Ob1B1Ymxpc2hlZEFzc2V0cz1cIk5vUHVibGlzaGVkQXNzZXRzXCIsZS5Ob1ZlcnNpb25Gb3VuZD1cIk5vVmVyc2lvbkZvdW5kXCIsZS5Db21wb25lbnRIYXNOb1RodW1ibmFpbD1cIkNvbXBvbmVudEhhc05vVGh1bWJuYWlsXCIsZS5EdXBsaWNhdGVJbXBvcnRlZFN0eWxlSWQ9XCJEdXBsaWNhdGVJbXBvcnRlZFN0eWxlSWRcIixlLkR1cGxpY2F0ZUltcG9ydGVkU3R5bGVQYXRoPVwiRHVwbGljYXRlSW1wb3J0ZWRTdHlsZVBhdGhcIixlLk5vUHVibGlzaGVkRWxlbWVudHM9XCJOb1B1Ymxpc2hlZEVsZW1lbnRzXCIsZS5Ob1VucHVibGlzaGVkU3R5bGVzPVwiTm9VbnB1Ymxpc2hlZFN0eWxlc1wifShvfHwodC5JbXBvcnRXYXJuaW5nVHlwZT1vPXt9KSl9LDU2OTU6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkN1c3RvbURvbWFpbkVycm9yQ29kZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5nZW5lcmFsRXJyb3I9XCJHZW5lcmFsRXJyb3JcIixlLmRuc05vdENvbmZpZ3VyZWQ9XCJETlNOb3RDb25maWd1cmVkXCIsZS5tYWludGVuYW5jZT1cIk1haW50ZW5hbmNlXCJ9KG98fCh0LkN1c3RvbURvbWFpbkVycm9yQ29kZT1vPXt9KSl9LDc3Mzc6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkN1c3RvbURvbWFpblN0YXRlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmluaXRpYWw9XCJJbml0aWFsXCIsZS5kb21haW5TZXR1cEluUHJvZ3Jlc3M9XCJEb21haW5TZXR1cEluUHJvZ3Jlc3NcIixlLmRvbWFpblNldHVwRmFpbGVkPVwiRG9tYWluU2V0dXBGYWlsZWRcIixlLmRvbWFpblNldHVwc1N1Y2Nlcz1cIkRvbWFpblNldHVwU3VjY2Vzc1wiLGUuc3NsU2V0dXBJblByb2dyZXNzPVwiU1NMU2V0dXBJblByb2dyZXNzXCIsZS5zc2xTZXR1cEZhaWxlZD1cIlNTTFNldHVwRmFpbGVkXCIsZS5zc2xTZXR1cFN1Y2Nlc3M9XCJTU0xTZXR1cFN1Y2Nlc3NcIn0ob3x8KHQuQ3VzdG9tRG9tYWluU3RhdGU9bz17fSkpfSw1NjUxOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tCZWhhdmlvckRhdGFUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLml0ZW09XCJJdGVtXCIsZS50b2tlbj1cIlRva2VuXCIsZS5hc3NldD1cIkFzc2V0XCIsZS5jb21wb25lbnQ9XCJDb21wb25lbnRcIixlLmZpZ21hTm9kZT1cIkZpZ21hTm9kZVwiLGUuZmlnbWFDb21wb25lbnQ9XCJGaWdtYUNvbXBvbmVudFwifShvfHwodC5Eb2NzQmxvY2tCZWhhdmlvckRhdGFUeXBlPW89e30pKX0sMzczMzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrQmVoYXZpb3JTZWxlY3Rpb25UeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmVudGl0eT1cIkVudGl0eVwiLGUuZ3JvdXA9XCJHcm91cFwiLGUuZW50aXR5QW5kR3JvdXA9XCJFbnRpdHlBbmRHcm91cFwifShvfHwodC5Eb2NzQmxvY2tCZWhhdmlvclNlbGVjdGlvblR5cGU9bz17fSkpfSw4ODkwOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW89dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYXV0bz1cIkF1dG9cIixlLnNxdWFyZT1cIlNxdWFyZVwiLGUubGFuZHNjYXBlPVwiTGFuZHNjYXBlXCIsZS5wb3J0cmFpdD1cIlBvcnRyYWl0XCIsZS53aWRlPVwiV2lkZVwifShvfHwodC5Eb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW89bz17fSkpfSw5Mzc3OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJdGVtRW50aXR5VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS50b2tlbj1cIlRva2VuXCIsZS50b2tlbkdyb3VwPVwiVG9rZW5Hcm91cFwiLGUuYXNzZXQ9XCJBc3NldFwiLGUuYXNzZXRHcm91cD1cIkFzc2V0R3JvdXBcIixlLmNvbXBvbmVudD1cIkNvbXBvbmVudFwiLGUuY29tcG9uZW50R3JvdXA9XCJDb21wb25lbnRHcm91cFwifShvfHwodC5Eb2NzQmxvY2tJdGVtRW50aXR5VHlwZT1vPXt9KSl9LDU4ODM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eU9wdGlvblJlbmRlcmluZ1N0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnNlZ21lbnRlZENvbnRyb2w9XCJTZWdtZW50ZWRDb250cm9sXCIsZS50b2dnbGVCdXR0b249XCJUb2dnbGVCdXR0b25cIixlLnNlbGVjdD1cIlNlbGVjdFwiLGUuY2hlY2tib3g9XCJDaGVja2JveFwifShvfHwodC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlPcHRpb25SZW5kZXJpbmdTdHlsZT1vPXt9KSl9LDgwNjE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudGl0bGUxPVwiVGl0bGUxXCIsZS50aXRsZTI9XCJUaXRsZTJcIixlLnRpdGxlMz1cIlRpdGxlM1wiLGUudGl0bGU0PVwiVGl0bGU0XCIsZS50aXRsZTU9XCJUaXRsZTVcIixlLnF1b3RlPVwiUXVvdGVcIixlLmNhbGxvdXQ9XCJDYWxsb3V0XCIsZS5vbD1cIk9MXCIsZS51bD1cIlVMXCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGU9bz17fSkpfSw3NDc5OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUZXh0U3R5bGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2Uuc21hbGw9XCJTbWFsbFwiLGUucmVndWxhcj1cIlJlZ3VsYXJcIixlLmJvbGQ9XCJCb2xkXCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVRleHRTdHlsZT1vPXt9KSl9LDY4Mzk6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UucmljaFRleHQ9XCJSaWNoVGV4dFwiLGUubXVsdGlSaWNoVGV4dD1cIk11bHRpUmljaFRleHRcIixlLnRleHQ9XCJUZXh0XCIsZS5yaWNoVGV4dEVkaXRvcj1cIlJpY2hUZXh0RWRpdG9yXCIsZS5ib29sZWFuPVwiQm9vbGVhblwiLGUubnVtYmVyPVwiTnVtYmVyXCIsZS5zaW5nbGVTZWxlY3Q9XCJTaW5nbGVTZWxlY3RcIixlLm11bHRpU2VsZWN0PVwiTXVsdGlTZWxlY3RcIixlLmltYWdlPVwiSW1hZ2VcIixlLnRva2VuPVwiVG9rZW5cIixlLnRva2VuVHlwZT1cIlRva2VuVHlwZVwiLGUudG9rZW5Qcm9wZXJ0eT1cIlRva2VuUHJvcGVydHlcIixlLmNvbXBvbmVudD1cIkNvbXBvbmVudFwiLGUuY29tcG9uZW50UHJvcGVydHk9XCJDb21wb25lbnRQcm9wZXJ0eVwiLGUuYXNzZXQ9XCJBc3NldFwiLGUuYXNzZXRQcm9wZXJ0eT1cIkFzc2V0UHJvcGVydHlcIixlLmVtYmVkVVJMPVwiRW1iZWRVUkxcIixlLnVybD1cIlVSTFwiLGUubWFya2Rvd249XCJNYXJrZG93blwiLGUuY29kZT1cIkNvZGVcIixlLmNvZGVTYW5kYm94PVwiQ29kZVNhbmRib3hcIixlLnRhYmxlPVwiVGFibGVcIixlLmRpdmlkZXI9XCJEaXZpZGVyXCIsZS5zdG9yeWJvb2s9XCJTdG9yeWJvb2tcIixlLmNvbG9yPVwiQ29sb3JcIixlLmZpZ21hTm9kZT1cIkZpZ21hTm9kZVwiLGUuZmlnbWFDb21wb25lbnQ9XCJGaWdtYUNvbXBvbmVudFwifShvfHwodC5Eb2NzQmxvY2tJdGVtUHJvcGVydHlUeXBlPW89e30pKX0sODA5NTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmNvbHVtbj1cIkNvbHVtblwiLGUucm93PVwiUm93XCJ9KG98fCh0LkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0VHlwZT1vPXt9KSl9LDcyOTE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja0l0ZW1WYXJpYW50TGF5b3V0V2lkdGg9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuYzE9XCIxXCIsZS5jMj1cIjJcIixlLmMzPVwiM1wiLGUuYzQ9XCI0XCIsZS5jNT1cIjVcIixlLmM2PVwiNlwiLGUuYzc9XCI3XCIsZS5jOD1cIjhcIixlLmM5PVwiOVwiLGUuYzEwPVwiMTBcIixlLmMxMT1cIjExXCIsZS5jMTI9XCIxMlwifShvfHwodC5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFdpZHRoPW89e30pKX0sOTEzMzooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc0Jsb2NrT3B0aW9uQ29sb3I9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZ3JlZW49XCJHcmVlblwiLGUucmVkPVwiUmVkXCIsZS55ZWxsb3c9XCJZZWxsb3dcIixlLmJsdWU9XCJCbHVlXCIsZS5wdXJwbGU9XCJQdXJwbGVcIixlLm9yYW5nZT1cIk9yYW5nZVwiLGUucGluaz1cIlBpbmtcIixlLnRlYWw9XCJUZWFsXCIsZS5ncmV5PVwiR3JleVwiLGUubGlnaHRHcmV5PVwiTGlnaHRHcmV5XCIsZS5jeWFuPVwiQ3lhblwiLGUuZnVjaHNpYT1cIkZ1Y2hzaWFcIn0ob3x8KHQuRG9jc0Jsb2NrT3B0aW9uQ29sb3I9bz17fSkpfSw1OTYzOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tPcHRpb25SZW5kZXJpbmdTdHlsZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5zZWdtZW50ZWRDb250cm9sPVwiU2VnbWVudGVkQ29udHJvbFwiLGUudG9nZ2xlQnV0dG9uPVwiVG9nZ2xlQnV0dG9uXCIsZS5zZWxlY3Q9XCJTZWxlY3RcIixlLmNoZWNrYm94PVwiQ2hlY2tib3hcIn0ob3x8KHQuRG9jc0Jsb2NrT3B0aW9uUmVuZGVyaW5nU3R5bGU9bz17fSkpfSw2NjQ0OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudGl0bGUxPVwiVGl0bGUxXCIsZS50aXRsZTI9XCJUaXRsZTJcIixlLnRpdGxlMz1cIlRpdGxlM1wiLGUudGl0bGU0PVwiVGl0bGU0XCIsZS50aXRsZTU9XCJUaXRsZTVcIixlLnF1b3RlPVwiUXVvdGVcIixlLmNhbGxvdXQ9XCJDYWxsb3V0XCIsZS5kZWZhdWx0PVwiRGVmYXVsdFwifShvfHwodC5Eb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGU9bz17fSkpfSwzMDY6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NCbG9ja1RleHRQcm9wZXJ0eVN0eWxlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnRpdGxlMT1cIlRpdGxlMVwiLGUudGl0bGUyPVwiVGl0bGUyXCIsZS50aXRsZTM9XCJUaXRsZTNcIixlLnRpdGxlND1cIlRpdGxlNFwiLGUudGl0bGU1PVwiVGl0bGU1XCIsZS5kZWZhdWx0PVwiRGVmYXVsdFwiLGUuZGVmYXVsdEJvbGQ9XCJEZWZhdWx0Qm9sZFwiLGUuZGVmYXVsdFNlbWlib2xkPVwiRGVmYXVsdFNlbWlib2xkXCIsZS5zbWFsbD1cIlNtYWxsXCIsZS5zbWFsbEJvbGQ9XCJTbWFsbEJvbGRcIixlLnNtYWxsU2VtaWJvbGQ9XCJTbWFsbFNlbWlib2xkXCIsZS5jdXN0b209XCJDdXN0b21cIn0ob3x8KHQuRG9jc0Jsb2NrVGV4dFByb3BlcnR5U3R5bGU9bz17fSkpfSw0MDY4OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Eb2NzRW50aXR5R3JvdXBCZWhhdmlvcj12b2lkIDAsZnVuY3Rpb24oZSl7ZS5ncm91cD1cIkdyb3VwXCIsZS50YWJzPVwiVGFic1wifShvfHwodC5Eb2NzRW50aXR5R3JvdXBCZWhhdmlvcj1vPXt9KSl9LDEyMzM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3NFbnRpdHlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmdyb3VwPVwiR3JvdXBcIixlLnBhZ2U9XCJQYWdlXCJ9KG98fCh0LkRvY3NFbnRpdHlUeXBlPW89e30pKX0sNzk3MTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jc1NlY3Rpb25UeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnBsYWluPVwiUGxhaW5cIixlLnRhYnM9XCJUYWJzXCJ9KG98fCh0LkRvY3NTZWN0aW9uVHlwZT1vPXt9KSl9LDUxMDI6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lDYWxsb3V0VHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5pbmZvPVwiSW5mb1wiLGUuc3VjY2Vzcz1cIlN1Y2Nlc3NcIixlLndhcm5pbmc9XCJXYXJuaW5nXCIsZS5lcnJvcj1cIkVycm9yXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lDYWxsb3V0VHlwZT1vPXt9KSl9LDIxMjM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lHcm91cEJlaGF2aW9yPXZvaWQgMCxmdW5jdGlvbihlKXtlLmdyb3VwPVwiR3JvdXBcIixlLnRhYnM9XCJUYWJzXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lHcm91cEJlaGF2aW9yPW89e30pKX0sOTg5NjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUhlYWRpbmdUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlW2UuaDE9MV09XCJoMVwiLGVbZS5oMj0yXT1cImgyXCIsZVtlLmgzPTNdPVwiaDNcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUhlYWRpbmdUeXBlPW89e30pKX0sNzM3OTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmdyb3VwPVwiR3JvdXBcIixlLnBhZ2U9XCJQYWdlXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lJdGVtVHlwZT1vPXt9KSl9LDE0MjM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmltYWdlPVwiaW1hZ2VcIixlLmZpZ21hRnJhbWU9XCJmaWdtYUZyYW1lXCJ9KG98fCh0LkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlPW89e30pKX0sMTYwMTooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5vdmVycmlkZT1cIk92ZXJyaWRlXCIsZS5jb21wYXJpc29uPVwiQ29tcGFyaXNvblwifShvfHwodC5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVGhlbWVUeXBlPW89e30pKX0sMTg0NjooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1R5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UudGV4dD1cIlRleHRcIixlLmhlYWRpbmc9XCJIZWFkaW5nXCIsZS5jb2RlPVwiQ29kZVwiLGUudW5vcmRlcmVkTGlzdD1cIlVub3JkZXJlZExpc3RcIixlLm9yZGVyZWRMaXN0PVwiT3JkZXJlZExpc3RcIixlLnF1b3RlPVwiUXVvdGVcIixlLmNhbGxvdXQ9XCJDYWxsb3V0XCIsZS5kaXZpZGVyPVwiRGl2aWRlclwiLGUuaW1hZ2U9XCJJbWFnZVwiLGUudG9rZW49XCJUb2tlblwiLGUudG9rZW5MaXN0PVwiVG9rZW5MaXN0XCIsZS50b2tlbkdyb3VwPVwiVG9rZW5Hcm91cFwiLGUuc2hvcnRjdXRzPVwiU2hvcnRjdXRzXCIsZS5saW5rPVwiTGlua1wiLGUuZmlnbWFFbWJlZD1cIkZpZ21hRW1iZWRcIixlLnlvdXR1YmVFbWJlZD1cIllvdXR1YmVFbWJlZFwiLGUuc3Rvcnlib29rRW1iZWQ9XCJTdG9yeWJvb2tFbWJlZFwiLGUuZ2VuZXJpY0VtYmVkPVwiRW1iZWRcIixlLmZpZ21hRnJhbWVzPVwiRmlnbWFGcmFtZXNcIixlLmN1c3RvbT1cIkN1c3RvbVwiLGUucmVuZGVyQ29kZT1cIlJlbmRlckNvZGVcIixlLmNvbXBvbmVudEFzc2V0cz1cIkNvbXBvbmVudEFzc2V0c1wiLGUuY29sdW1uPVwiQ29sdW1uXCIsZS5jb2x1bW5JdGVtPVwiQ29sdW1uSXRlbVwiLGUudGFicz1cIlRhYnNcIixlLnRhYkl0ZW09XCJUYWJJdGVtXCIsZS50YWJsZT1cIlRhYmxlXCIsZS50YWJsZUNlbGw9XCJUYWJsZUNlbGxcIixlLnRhYmxlUm93PVwiVGFibGVSb3dcIn0ob3x8KHQuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1R5cGU9bz17fSkpfSwxMjU1OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5GcmFtZUFsaWdubWVudD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5mcmFtZUhlaWdodD1cIkZyYW1lSGVpZ2h0XCIsZS5jZW50ZXI9XCJDZW50ZXJcIn0ob3x8KHQuRnJhbWVBbGlnbm1lbnQ9bz17fSkpfSwzNzE4OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5GcmFtZUxheW91dD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5jOD1cIkM4XCIsZS5jNz1cIkM3XCIsZS5jNj1cIkM2XCIsZS5jNT1cIkM1XCIsZS5jND1cIkM0XCIsZS5jMz1cIkMzXCIsZS5jMj1cIkMyXCIsZS5jMT1cIkMxXCIsZS5jMTc1PVwiQzFfNzVcIn0ob3x8KHQuRnJhbWVMYXlvdXQ9bz17fSkpfSwxOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5HcmFkaWVudFR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UubGluZWFyPVwiTGluZWFyXCIsZS5yYWRpYWw9XCJSYWRpYWxcIixlLmFuZ3VsYXI9XCJBbmd1bGFyXCJ9KG98fCh0LkdyYWRpZW50VHlwZT1vPXt9KSl9LDkzNDooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuSWNvblNldD12b2lkIDAsZnVuY3Rpb24oZSl7ZS5jaGVja0NpcmNsZT1cIkNoZWNrQ2lyY2xlXCIsZS5jcm9zc0NpcmNsZT1cIkNyb3NzQ2lyY2xlXCIsZS5hbGVydD1cIkFsZXJ0XCJ9KG98fCh0Lkljb25TZXQ9bz17fSkpfSwyNjc0OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5SaWNoVGV4dFNwYW5BdHRyaWJ1dGVUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmJvbGQ9XCJCb2xkXCIsZS5pdGFsaWM9XCJJdGFsaWNcIixlLmxpbms9XCJMaW5rXCIsZS5zdHJpa2V0aHJvdWdoPVwiU3RyaWtldGhyb3VnaFwiLGUuY29kZT1cIkNvZGVcIn0ob3x8KHQuUmljaFRleHRTcGFuQXR0cmlidXRlVHlwZT1vPXt9KSl9LDkxMjU6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlNoYWRvd1R5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZHJvcD1cIkRyb3BcIixlLmlubmVyPVwiSW5uZXJcIn0ob3x8KHQuU2hhZG93VHlwZT1vPXt9KSl9LDQ2NTI6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlNvdXJjZVR5cGU9dm9pZCAwLGZ1bmN0aW9uKGUpe2UuZmlnbWE9XCJGaWdtYVwiLGUudG9rZW5TdHVkaW89XCJUb2tlblN0dWRpb1wiLGUuZmlnbWFWYXJpYWJsZXNQbHVnaW49XCJGaWdtYVZhcmlhYmxlc1BsdWdpblwifShvfHwodC5Tb3VyY2VUeXBlPW89e30pKX0sOTIyOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5UZXh0Q2FzZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5vcmlnaW5hbD1cIk9yaWdpbmFsXCIsZS51cHBlcj1cIlVwcGVyXCIsZS5sb3dlcj1cIkxvd2VyXCIsZS5jYW1lbD1cIkNhbWVsXCIsZS5zbWFsbENhcHM9XCJTbWFsbENhcHNcIn0ob3x8KHQuVGV4dENhc2U9bz17fSkpfSw3MDQwOihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5UZXh0RGVjb3JhdGlvbj12b2lkIDAsZnVuY3Rpb24oZSl7ZS5vcmlnaW5hbD1cIk5vbmVcIixlLnVuZGVybGluZT1cIlVuZGVybGluZVwiLGUuc3RyaWtldGhyb3VnaD1cIlN0cmlrZXRocm91Z2hcIn0ob3x8KHQuVGV4dERlY29yYXRpb249bz17fSkpfSwzNzg4OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5EVF9UT0tFTl9UWVBFUz10LnRva2VuVHlwZUlzUmVmZXJlbmNhYmxlPXQuUkVGRVJFTkNBQkxFX1RPS0VOX1RZUEVTPXQuUkVQTEFDQUJMRV9UT0tFTl9UWVBFUz10LnRva2VuVHlwZUlzTm9uUHVyZT10LnRva2VuVHlwZUlzUHVyZT10LlBVUkVfVE9LRU5fVFlQRVM9dC5BTExfVE9LRU5fVFlQRVM9dC5NU19ESU1FTlNJT05fVE9LRU5fVFlQRVM9dC5SQVdfRElNRU5TSU9OX1RPS0VOX1RZUEVTPXQuRElNRU5TSU9OX1RPS0VOX1RZUEVTPXQuT1BUSU9OX1RPS0VOX1RZUEVTPXQuU1RSSU5HX1RPS0VOX1RZUEVTPXQuVG9rZW5UeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmNvbG9yPVwiQ29sb3JcIixlLnR5cG9ncmFwaHk9XCJUeXBvZ3JhcGh5XCIsZS5zaGFkb3c9XCJTaGFkb3dcIixlLmJvcmRlcj1cIkJvcmRlclwiLGUuZ3JhZGllbnQ9XCJHcmFkaWVudFwiLGUuYmx1cj1cIkJsdXJcIixlLnJhZGl1cz1cIkJvcmRlclJhZGl1c1wiLGUuYm9yZGVyV2lkdGg9XCJCb3JkZXJXaWR0aFwiLGUuZHVyYXRpb249XCJEdXJhdGlvblwiLGUuZm9udFNpemU9XCJGb250U2l6ZVwiLGUuZGltZW5zaW9uPVwiRGltZW5zaW9uXCIsZS5sZXR0ZXJTcGFjaW5nPVwiTGV0dGVyU3BhY2luZ1wiLGUubGluZUhlaWdodD1cIkxpbmVIZWlnaHRcIixlLm9wYWNpdHk9XCJPcGFjaXR5XCIsZS5wYXJhZ3JhcGhTcGFjaW5nPVwiUGFyYWdyYXBoU3BhY2luZ1wiLGUuc2l6ZT1cIlNpemVcIixlLnNwYWNlPVwiU3BhY2VcIixlLnpJbmRleD1cIlpJbmRleFwiLGUudGV4dERlY29yYXRpb249XCJUZXh0RGVjb3JhdGlvblwiLGUudGV4dENhc2U9XCJUZXh0Q2FzZVwiLGUudmlzaWJpbGl0eT1cIlZpc2liaWxpdHlcIixlLmZvbnRGYW1pbHk9XCJGb250RmFtaWx5XCIsZS5mb250V2VpZ2h0PVwiRm9udFdlaWdodFwiLGUuc3RyaW5nPVwiU3RyaW5nXCIsZS5wcm9kdWN0Q29weT1cIlByb2R1Y3RDb3B5XCJ9KG98fCh0LlRva2VuVHlwZT1vPXt9KSksdC5TVFJJTkdfVE9LRU5fVFlQRVM9W28uc3RyaW5nLG8ucHJvZHVjdENvcHksby5mb250RmFtaWx5LG8uZm9udFdlaWdodF0sdC5PUFRJT05fVE9LRU5fVFlQRVM9W28udGV4dENhc2Usby50ZXh0RGVjb3JhdGlvbixvLnZpc2liaWxpdHldLHQuRElNRU5TSU9OX1RPS0VOX1RZUEVTPVtvLmRpbWVuc2lvbixvLnNpemUsby5zcGFjZSxvLm9wYWNpdHksby5mb250U2l6ZSxvLmxpbmVIZWlnaHQsby5sZXR0ZXJTcGFjaW5nLG8ucGFyYWdyYXBoU3BhY2luZyxvLmJvcmRlcldpZHRoLG8ucmFkaXVzLG8uZHVyYXRpb24sby56SW5kZXhdLHQuUkFXX0RJTUVOU0lPTl9UT0tFTl9UWVBFUz1bby5vcGFjaXR5LG8uekluZGV4XSx0Lk1TX0RJTUVOU0lPTl9UT0tFTl9UWVBFUz1bby5kdXJhdGlvbl0sdC5BTExfVE9LRU5fVFlQRVM9Wy4uLnQuRElNRU5TSU9OX1RPS0VOX1RZUEVTLC4uLnQuU1RSSU5HX1RPS0VOX1RZUEVTLC4uLnQuT1BUSU9OX1RPS0VOX1RZUEVTLG8uY29sb3Isby5ncmFkaWVudCxvLmJvcmRlcixvLnJhZGl1cyxvLnNoYWRvdyxvLnR5cG9ncmFwaHksby5ibHVyXSx0LlBVUkVfVE9LRU5fVFlQRVM9Wy4uLnQuRElNRU5TSU9OX1RPS0VOX1RZUEVTLC4uLnQuU1RSSU5HX1RPS0VOX1RZUEVTLC4uLnQuT1BUSU9OX1RPS0VOX1RZUEVTXSx0LnRva2VuVHlwZUlzUHVyZT1lPT50LlBVUkVfVE9LRU5fVFlQRVMuaW5jbHVkZXMoZSksdC50b2tlblR5cGVJc05vblB1cmU9ZT0+ISgwLHQudG9rZW5UeXBlSXNQdXJlKShlKSx0LlJFUExBQ0FCTEVfVE9LRU5fVFlQRVM9W28uY29sb3IsLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsLi4udC5TVFJJTkdfVE9LRU5fVFlQRVMsLi4udC5PUFRJT05fVE9LRU5fVFlQRVNdLHQuUkVGRVJFTkNBQkxFX1RPS0VOX1RZUEVTPVtvLmNvbG9yLC4uLnQuRElNRU5TSU9OX1RPS0VOX1RZUEVTLG8uZm9udEZhbWlseSxvLmZvbnRXZWlnaHQsby50ZXh0Q2FzZSxvLnRleHREZWNvcmF0aW9uXSx0LnRva2VuVHlwZUlzUmVmZXJlbmNhYmxlPWU9PnQuUkVGRVJFTkNBQkxFX1RPS0VOX1RZUEVTLmluY2x1ZGVzKGUpLHQuRFRfVE9LRU5fVFlQRVM9W28uY29sb3Isby5zaGFkb3csby5ncmFkaWVudCxvLnR5cG9ncmFwaHksby5ib3JkZXIsLi4udC5ESU1FTlNJT05fVE9LRU5fVFlQRVMsby5mb250RmFtaWx5LG8uZm9udFdlaWdodCxvLnN0cmluZywuLi50Lk9QVElPTl9UT0tFTl9UWVBFU119LDg2MDc6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lk1TX1VOSVRTPXQuUFhfVU5JVFM9dC5SQVdfVU5JVFM9dC5MSU5FX0hFSUdIVF9VTklUUz10LlNJWkVfVU5JVFM9dC5Vbml0PXZvaWQgMCxmdW5jdGlvbihlKXtlLnBpeGVscz1cIlBpeGVsc1wiLGUucGVyY2VudD1cIlBlcmNlbnRcIixlLnJlbT1cIlJlbVwiLGUubXM9XCJNc1wiLGUucmF3PVwiUmF3XCJ9KG98fCh0LlVuaXQ9bz17fSkpLHQuU0laRV9VTklUUz1bby5waXhlbHMsby5wZXJjZW50LG8ucmVtXSx0LkxJTkVfSEVJR0hUX1VOSVRTPVtvLnBpeGVscyxvLnBlcmNlbnQsby5yZW0sby5yYXddLHQuUkFXX1VOSVRTPVtvLnJhd10sdC5QWF9VTklUUz1bby5waXhlbHNdLHQuTVNfVU5JVFM9W28ubXNdfSw5NDc4OihlLHQsbyk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmNvbnZlcnRSZW1vdGVUb1VzZXJSb2xlPXQuVXNlclJvbGU9dm9pZCAwO2NvbnN0IHI9byg0Mzc5KTt2YXIgbjshZnVuY3Rpb24oZSl7ZS5vd25lcj1cIk93bmVyXCIsZS5hZG1pbj1cIkFkbWluXCIsZS5jcmVhdG9yPVwiQ3JlYXRvclwiLGUuY29udHJpYnV0b3I9XCJDb250cmlidXRvclwiLGUuYmlsbGluZz1cIkJpbGxpbmdcIixlLnZpZXdlcj1cIlZpZXdlclwifShufHwodC5Vc2VyUm9sZT1uPXt9KSksdC5jb252ZXJ0UmVtb3RlVG9Vc2VyUm9sZT1lPT57c3dpdGNoKGUpe2Nhc2VcIk93bmVyXCI6cmV0dXJuIG4ub3duZXI7Y2FzZVwiQWRtaW5cIjpyZXR1cm4gbi5hZG1pbjtjYXNlXCJDcmVhdG9yXCI6cmV0dXJuIG4uY3JlYXRvcjtjYXNlXCJDb250cmlidXRvclwiOnJldHVybiBuLmNvbnRyaWJ1dG9yO2Nhc2VcIkJpbGxpbmdcIjpyZXR1cm4gbi5iaWxsaW5nO2Nhc2VcIlZpZXdlclwiOnJldHVybiBuLnZpZXdlcjtkZWZhdWx0OnRocm93IHIuU3VwZXJub3ZhRXJyb3IuZnJvbU1lc3NhZ2UoYFVua25vd24gcm9sZTogJHtlfWApfX19LDYxNDE6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlZpc2liaWxpdHlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLnZpc2libGU9XCJWaXNpYmxlXCIsZS5oaWRkZW49XCJIaWRkZW5cIn0ob3x8KHQuVmlzaWJpbGl0eVR5cGU9bz17fSkpfSw2Mjk4OihlLHQpPT57dmFyIG87T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Xb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmJhc2ljPVwiQmFzaWNcIixlLmJlYXJlcj1cIkJlYXJlclwifShvfHwodC5Xb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlPW89e30pKX0sNzk2ODooZSx0KT0+e3ZhciBvO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuV29ya3NwYWNlTlBNUmVnaXN0cnlUeXBlPXZvaWQgMCxmdW5jdGlvbihlKXtlLm5wbUpTPVwiTlBNSlNcIixlLmdpdEh1Yj1cIkdpdEh1YlwiLGUuYXp1cmVEZXZPcHM9XCJBenVyZURldk9wc1wiLGUuYXJ0aWZhY3Rvcnk9XCJBcnRpZmFjdG9yeVwiLGUuY3VzdG9tPVwiQ3VzdG9tXCJ9KG98fCh0LldvcmtzcGFjZU5QTVJlZ2lzdHJ5VHlwZT1vPXt9KSl9LDU1MDM6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbD12b2lkIDAsZnVuY3Rpb24oZSl7ZS55ZWFybHk9XCJ5ZWFybHlcIixlLm1vbnRobHk9XCJtb250aGx5XCJ9KG98fCh0LldvcmtzcGFjZVN1YnNjcmlwdGlvblBsYW5JbnRlcnZhbD1vPXt9KSl9LDQyOTA6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LldvcmtzcGFjZVN1YnNjcmlwdGlvblByb2R1Y3RDb2RlPXZvaWQgMCxmdW5jdGlvbihlKXtlLmZyZWU9XCJmcmVlXCIsZS50ZWFtPVwidGVhbVwiLGUudGVhbVRlc3Q9XCJ0ZWFtX3Rlc3RcIixlLmNvbXBhbnk9XCJjb21wYW55XCIsZS5lbnRlcnByaXNlPVwiZW50ZXJwcmlzZVwifShvfHwodC5Xb3Jrc3BhY2VTdWJzY3JpcHRpb25Qcm9kdWN0Q29kZT1vPXt9KSl9LDM2MDc6KGUsdCk9Pnt2YXIgbztPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LldvcmtzcGFjZVN1YnNjcmlwdGlvblN0YXR1cz12b2lkIDAsZnVuY3Rpb24oZSl7ZS5hY3RpdmU9XCJhY3RpdmVcIixlLmdyYWNlUGVyaW9kPVwiZ3JhY2VQZXJpb2RcIixlLmNhbmNlbGxlZD1cImNhbmNlbGxlZFwiLGUuc3VzcGVuZGVkPVwic3VzcGVuZGVkXCJ9KG98fCh0LldvcmtzcGFjZVN1YnNjcmlwdGlvblN0YXR1cz1vPXt9KSl9LDI4MDI6KGUsdCk9Pnt2YXIgbyxyO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuUHVsc2FyRXhlY3V0b3I9dC5PdXRwdXRGaWxlVHlwZT12b2lkIDAsZnVuY3Rpb24oZSl7ZS5jb3B5UmVtb3RlVXJsPVwiY29weVJlbW90ZVVybFwiLGUudGV4dD1cInRleHRcIixlLmJpbmFyeT1cImJpbmFyeVwifShvfHwodC5PdXRwdXRGaWxlVHlwZT1vPXt9KSksZnVuY3Rpb24oZSl7ZS5zdXBlcm5vdmE9XCJzdXBlcm5vdmFcIixlLmxvY2FsPVwibG9jYWxcIn0ocnx8KHQuUHVsc2FyRXhlY3V0b3I9cj17fSkpfX0sdD17fTtmdW5jdGlvbiBvKHIpe3ZhciBuPXRbcl07aWYodm9pZCAwIT09bilyZXR1cm4gbi5leHBvcnRzO3ZhciBpPXRbcl09e2V4cG9ydHM6e319O3JldHVybiBlW3JdKGksaS5leHBvcnRzLG8pLGkuZXhwb3J0c312YXIgcj17fTsoKCk9Pnt2YXIgZT1yO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuVG9rZW5UeXBlPWUuVGV4dERlY29yYXRpb249ZS5UZXh0Q2FzZT1lLlNoYWRvd1R5cGU9ZS5SaWNoVGV4dFNwYW5BdHRyaWJ1dGVUeXBlPWUuR3JhZGllbnRUeXBlPWUuRnJhbWVMYXlvdXQ9ZS5GcmFtZUFsaWdubWVudD1lLkljb25TZXQ9ZS5Tb3VyY2VUeXBlPWUuRG9jc0ltYWdlUmVmVHlwZT1lLkRvY3NMaW5rUmVmVHlwZT1lLkRvY3NTZWN0aW9uVHlwZT1lLkRvY3NFbnRpdHlUeXBlPWUuRG9jc0VudGl0eUdyb3VwQmVoYXZpb3I9ZS5Eb2NzQmxvY2tUZXh0UHJvcGVydHlTdHlsZT1lLkRvY3NCbG9ja1JpY2hUZXh0UHJvcGVydHlTdHlsZT1lLkRvY3NCbG9ja09wdGlvbkNvbG9yPWUuRG9jc0Jsb2NrT3B0aW9uUmVuZGVyaW5nU3R5bGU9ZS5Eb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFdpZHRoPWUuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRUeXBlPWUuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VHlwZT1lLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVRleHRTdHlsZT1lLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eVJpY2hUZXh0U3R5bGU9ZS5Eb2NzQmxvY2tJdGVtUHJvcGVydHlPcHRpb25SZW5kZXJpbmdTdHlsZT1lLkRvY3NCbG9ja0l0ZW1FbnRpdHlUeXBlPWUuRG9jc0Jsb2NrSW1hZ2VQcm9wZXJ0eUFzcGVjdFJhdGlvPWUuRG9jc0Jsb2NrQmVoYXZpb3JTZWxlY3Rpb25UeXBlPWUuRG9jc0Jsb2NrQmVoYXZpb3JEYXRhVHlwZT1lLkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tTaG9ydGN1dFR5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVGhlbWVUeXBlPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1R5cGU9ZS5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUFzc2V0VHlwZT1lLkRvY3VtZW50YXRpb25MZWdhY3lJdGVtVHlwZT1lLkRvY3VtZW50YXRpb25MZWdhY3lIZWFkaW5nVHlwZT1lLkRvY3VtZW50YXRpb25MZWdhY3lHcm91cEJlaGF2aW9yPWUuRG9jdW1lbnRhdGlvbkxlZ2FjeUNhbGxvdXRUeXBlPWUuQm9yZGVyU3R5bGU9ZS5Cb3JkZXJQb3NpdGlvbj1lLkJsdXJUeXBlPWUuQXNzZXRTY2FsZVR5cGU9ZS5Bc3NldFNjYWxlPWUuQXNzZXRGb3JtYXQ9ZS5BbGlnbm1lbnQ9ZS5BTExfVE9LRU5fVFlQRVM9ZS5BTExfQk9SREVSX1NUWUxFUz1lLkFMTF9CT1JERVJfUE9TSVRJT05TPWUuT1BUSU9OX1RPS0VOX1RZUEVTPWUuU1RSSU5HX1RPS0VOX1RZUEVTPWUuRElNRU5TSU9OX1RPS0VOX1RZUEVTPXZvaWQgMCxlLlB1bHNhckV4ZWN1dG9yPWUuT3V0cHV0RmlsZVR5cGU9ZS5DdXN0b21Eb21haW5TdGF0ZT1lLkN1c3RvbURvbWFpbkVycm9yQ29kZT1lLkltcG9ydFdhcm5pbmdUeXBlPWUuV29ya3NwYWNlTlBNUmVnaXN0cnlUeXBlPWUuV29ya3NwYWNlTlBNUmVnaXN0cnlBdXRoVHlwZT1lLldvcmtzcGFjZVN1YnNjcmlwdGlvblN0YXR1cz1lLldvcmtzcGFjZVN1YnNjcmlwdGlvblByb2R1Y3RDb2RlPWUuV29ya3NwYWNlU3Vic2NyaXB0aW9uUGxhbkludGVydmFsPWUuVmlzaWJpbGl0eVR5cGU9ZS5Vc2VyUm9sZT1lLlVuaXQ9dm9pZCAwO3ZhciB0PW8oMzc4OCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJESU1FTlNJT05fVE9LRU5fVFlQRVNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdC5ESU1FTlNJT05fVE9LRU5fVFlQRVN9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJTVFJJTkdfVE9LRU5fVFlQRVNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdC5TVFJJTkdfVE9LRU5fVFlQRVN9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJPUFRJT05fVE9LRU5fVFlQRVNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdC5PUFRJT05fVE9LRU5fVFlQRVN9fSk7dmFyIG49bygxMTYwKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkFMTF9CT1JERVJfUE9TSVRJT05TXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG4uQUxMX0JPUkRFUl9QT1NJVElPTlN9fSk7dmFyIGk9byg0NTQ2KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkFMTF9CT1JERVJfU1RZTEVTXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuQUxMX0JPUkRFUl9TVFlMRVN9fSk7dmFyIGE9bygzNzg4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkFMTF9UT0tFTl9UWVBFU1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhLkFMTF9UT0tFTl9UWVBFU319KTt2YXIgYz1vKDc0NzYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQWxpZ25tZW50XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuQWxpZ25tZW50fX0pO3ZhciBsPW8oODczOCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJBc3NldEZvcm1hdFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBsLkFzc2V0Rm9ybWF0fX0pO3ZhciB1PW8oOTE1KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkFzc2V0U2NhbGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdS5Bc3NldFNjYWxlfX0pO3ZhciBzPW8oODk5KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkFzc2V0U2NhbGVUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHMuQXNzZXRTY2FsZVR5cGV9fSk7dmFyIGQ9byg2MTkyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkJsdXJUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGQuQmx1clR5cGV9fSk7dmFyIHA9bygxMTYwKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkJvcmRlclBvc2l0aW9uXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHAuQm9yZGVyUG9zaXRpb259fSk7dmFyIHk9byg0NTQ2KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkJvcmRlclN0eWxlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHkuQm9yZGVyU3R5bGV9fSk7dmFyIG09byg1MTAyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lDYWxsb3V0VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBtLkRvY3VtZW50YXRpb25MZWdhY3lDYWxsb3V0VHlwZX19KTt2YXIgVD1vKDIxMjMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3JcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gVC5Eb2N1bWVudGF0aW9uTGVnYWN5R3JvdXBCZWhhdmlvcn19KTt2YXIgdj1vKDk4OTYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jdW1lbnRhdGlvbkxlZ2FjeUhlYWRpbmdUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHYuRG9jdW1lbnRhdGlvbkxlZ2FjeUhlYWRpbmdUeXBlfX0pO3ZhciBmPW8oNzM3OSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5SXRlbVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZi5Eb2N1bWVudGF0aW9uTGVnYWN5SXRlbVR5cGV9fSk7dmFyIGc9bygxNDIzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGcuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VBc3NldFR5cGV9fSk7dmFyIFA9bygxODQ2KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFAuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1R5cGV9fSk7dmFyIGI9bygxNjAxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUaGVtZVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYi5Eb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrVGhlbWVUeXBlfX0pO3ZhciBTPW8oMjY1Nyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFMuRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1Nob3J0Y3V0VHlwZX19KTt2YXIgTz1vKDU2NTEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrQmVoYXZpb3JEYXRhVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBPLkRvY3NCbG9ja0JlaGF2aW9yRGF0YVR5cGV9fSk7dmFyIF89bygzNzMzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja0JlaGF2aW9yU2VsZWN0aW9uVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfLkRvY3NCbG9ja0JlaGF2aW9yU2VsZWN0aW9uVHlwZX19KTt2YXIgRD1vKDg4OTApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSW1hZ2VQcm9wZXJ0eUFzcGVjdFJhdGlvXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEQuRG9jc0Jsb2NrSW1hZ2VQcm9wZXJ0eUFzcGVjdFJhdGlvfX0pO3ZhciBJPW8oOTM3Nyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tJdGVtRW50aXR5VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBJLkRvY3NCbG9ja0l0ZW1FbnRpdHlUeXBlfX0pO3ZhciBFPW8oNTg4Myk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tJdGVtUHJvcGVydHlPcHRpb25SZW5kZXJpbmdTdHlsZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBFLkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eU9wdGlvblJlbmRlcmluZ1N0eWxlfX0pO3ZhciBoPW8oODA2MSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tJdGVtUHJvcGVydHlSaWNoVGV4dFN0eWxlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGguRG9jc0Jsb2NrSXRlbVByb3BlcnR5UmljaFRleHRTdHlsZX19KTt2YXIgaz1vKDc0NzkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbVByb3BlcnR5VGV4dFN0eWxlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGsuRG9jc0Jsb2NrSXRlbVByb3BlcnR5VGV4dFN0eWxlfX0pO3ZhciBOPW8oNjgzOSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tJdGVtUHJvcGVydHlUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE4uRG9jc0Jsb2NrSXRlbVByb3BlcnR5VHlwZX19KTt2YXIgQj1vKDgwOTUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEIuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRUeXBlfX0pO3ZhciBMPW8oNzI5MSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFdpZHRoXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEwuRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRXaWR0aH19KTt2YXIgUj1vKDU5NjMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrT3B0aW9uUmVuZGVyaW5nU3R5bGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUi5Eb2NzQmxvY2tPcHRpb25SZW5kZXJpbmdTdHlsZX19KTt2YXIgaj1vKDkxMzMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrT3B0aW9uQ29sb3JcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gai5Eb2NzQmxvY2tPcHRpb25Db2xvcn19KTt2YXIgQz1vKDY2NDQpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0Jsb2NrUmljaFRleHRQcm9wZXJ0eVN0eWxlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEMuRG9jc0Jsb2NrUmljaFRleHRQcm9wZXJ0eVN0eWxlfX0pO3ZhciBNPW8oMzA2KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NCbG9ja1RleHRQcm9wZXJ0eVN0eWxlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE0uRG9jc0Jsb2NrVGV4dFByb3BlcnR5U3R5bGV9fSk7dmFyIHg9byg0MDY4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NFbnRpdHlHcm91cEJlaGF2aW9yXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHguRG9jc0VudGl0eUdyb3VwQmVoYXZpb3J9fSk7dmFyIEE9bygxMjMzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NFbnRpdHlUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEEuRG9jc0VudGl0eVR5cGV9fSk7dmFyIEY9byg3OTcxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRvY3NTZWN0aW9uVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBGLkRvY3NTZWN0aW9uVHlwZX19KTt2YXIgdz1vKDU2NzMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRG9jc0xpbmtSZWZUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHcuRG9jc0xpbmtSZWZUeXBlfX0pO3ZhciBVPW8oOTkzMik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEb2NzSW1hZ2VSZWZUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFUuRG9jc0ltYWdlUmVmVHlwZX19KTt2YXIgWT1vKDQ2NTIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiU291cmNlVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBZLlNvdXJjZVR5cGV9fSk7dmFyIFc9byg5MzQpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiSWNvblNldFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBXLkljb25TZXR9fSk7dmFyIEc9bygxMjU1KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkZyYW1lQWxpZ25tZW50XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEcuRnJhbWVBbGlnbm1lbnR9fSk7dmFyIEs9bygzNzE4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkZyYW1lTGF5b3V0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEsuRnJhbWVMYXlvdXR9fSk7dmFyIEg9bygxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkdyYWRpZW50VHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBILkdyYWRpZW50VHlwZX19KTt2YXIgVj1vKDI2NzQpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiUmljaFRleHRTcGFuQXR0cmlidXRlVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBWLlJpY2hUZXh0U3BhbkF0dHJpYnV0ZVR5cGV9fSk7dmFyICQ9byg5MTI1KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlNoYWRvd1R5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gJC5TaGFkb3dUeXBlfX0pO3ZhciBxPW8oOTIyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlRleHRDYXNlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHEuVGV4dENhc2V9fSk7dmFyIHo9byg3MDQwKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlRleHREZWNvcmF0aW9uXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHouVGV4dERlY29yYXRpb259fSk7dmFyIEo9bygzNzg4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlRva2VuVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBKLlRva2VuVHlwZX19KTt2YXIgUT1vKDg2MDcpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVW5pdFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBRLlVuaXR9fSk7dmFyIFo9byg5NDc4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlVzZXJSb2xlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFouVXNlclJvbGV9fSk7dmFyIFg9byg2MTQxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlZpc2liaWxpdHlUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFguVmlzaWJpbGl0eVR5cGV9fSk7dmFyIGVlPW8oNTUwMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJXb3Jrc3BhY2VTdWJzY3JpcHRpb25QbGFuSW50ZXJ2YWxcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZWUuV29ya3NwYWNlU3Vic2NyaXB0aW9uUGxhbkludGVydmFsfX0pO3ZhciB0ZT1vKDQyOTApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiV29ya3NwYWNlU3Vic2NyaXB0aW9uUHJvZHVjdENvZGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGUuV29ya3NwYWNlU3Vic2NyaXB0aW9uUHJvZHVjdENvZGV9fSk7dmFyIG9lPW8oMzYwNyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJXb3Jrc3BhY2VTdWJzY3JpcHRpb25TdGF0dXNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb2UuV29ya3NwYWNlU3Vic2NyaXB0aW9uU3RhdHVzfX0pO3ZhciByZT1vKDYyOTgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiV29ya3NwYWNlTlBNUmVnaXN0cnlBdXRoVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByZS5Xb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlfX0pO3ZhciBuZT1vKDc5NjgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiV29ya3NwYWNlTlBNUmVnaXN0cnlUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG5lLldvcmtzcGFjZU5QTVJlZ2lzdHJ5VHlwZX19KTt2YXIgaWU9byg4MDQyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkltcG9ydFdhcm5pbmdUeXBlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGllLkltcG9ydFdhcm5pbmdUeXBlfX0pO3ZhciBhZT1vKDU2OTUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiQ3VzdG9tRG9tYWluRXJyb3JDb2RlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGFlLkN1c3RvbURvbWFpbkVycm9yQ29kZX19KTt2YXIgY2U9byg3NzM3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkN1c3RvbURvbWFpblN0YXRlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGNlLkN1c3RvbURvbWFpblN0YXRlfX0pO3ZhciBsZT1vKDI4MDIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiT3V0cHV0RmlsZVR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbGUuT3V0cHV0RmlsZVR5cGV9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJQdWxzYXJFeGVjdXRvclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBsZS5QdWxzYXJFeGVjdXRvcn19KX0pKCk7dmFyIG49ZXhwb3J0cztmb3IodmFyIGkgaW4gciluW2ldPXJbaV07ci5fX2VzTW9kdWxlJiZPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0pKCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRFRkFVTFRfVE9LRU5fUFJFRklYRVMgPSBleHBvcnRzLkRFRkFVTFRfU1RZTEVfRklMRV9OQU1FUyA9IHZvaWQgMDtcbmV4cG9ydHMuREVGQVVMVF9TVFlMRV9GSUxFX05BTUVTID0ge1xuICAgIENvbG9yOiBcImNvbG9yLmpzb25cIixcbiAgICBUeXBvZ3JhcGh5OiBcInR5cG9ncmFwaHkuanNvblwiLFxuICAgIERpbWVuc2lvbjogXCJkaW1lbnNpb24uanNvblwiLFxuICAgIFNpemU6IFwic2l6ZS5qc29uXCIsXG4gICAgU3BhY2U6IFwic3BhY2UuanNvblwiLFxuICAgIE9wYWNpdHk6IFwib3BhY2l0eS5qc29uXCIsXG4gICAgRm9udFNpemU6IFwiZm9udC1zaXplLmpzb25cIixcbiAgICBMaW5lSGVpZ2h0OiBcImxpbmUtaGVpZ2h0Lmpzb25cIixcbiAgICBMZXR0ZXJTcGFjaW5nOiBcImxldHRlci1zcGFjaW5nLmpzb25cIixcbiAgICBQYXJhZ3JhcGhTcGFjaW5nOiBcInBhcmFncmFwaC1zcGFjaW5nLmpzb25cIixcbiAgICBCb3JkZXJXaWR0aDogXCJib3JkZXItd2lkdGguanNvblwiLFxuICAgIEJvcmRlclJhZGl1czogXCJib3JkZXItcmFkaXVzLmpzb25cIixcbiAgICBEdXJhdGlvbjogXCJkdXJhdGlvbi5qc29uXCIsXG4gICAgWkluZGV4OiBcInotaW5kZXguanNvblwiLFxuICAgIFNoYWRvdzogXCJzaGFkb3cuanNvblwiLFxuICAgIEJvcmRlcjogXCJib3JkZXIuanNvblwiLFxuICAgIEdyYWRpZW50OiBcImdyYWRpZW50Lmpzb25cIixcbiAgICBTdHJpbmc6IFwic3RyaW5nLmpzb25cIixcbiAgICBQcm9kdWN0Q29weTogXCJwcm9kdWN0LWNvcHkuanNvblwiLFxuICAgIEZvbnRGYW1pbHk6IFwiZm9udC1mYW1pbHkuanNvblwiLFxuICAgIEZvbnRXZWlnaHQ6IFwiZm9udC13ZWlnaHQuanNvblwiLFxuICAgIFRleHRDYXNlOiBcInRleHQtY2FzZS5qc29uXCIsXG4gICAgVGV4dERlY29yYXRpb246IFwidGV4dC1kZWNvcmF0aW9uLmpzb25cIixcbiAgICBWaXNpYmlsaXR5OiBcInZpc2liaWxpdHkuanNvblwiLFxuICAgIEJsdXI6IFwiYmx1ci5qc29uXCJcbn07XG5leHBvcnRzLkRFRkFVTFRfVE9LRU5fUFJFRklYRVMgPSB7XG4gICAgQ29sb3I6IFwiY29sb3JcIixcbiAgICBUeXBvZ3JhcGh5OiBcInR5cG9ncmFwaHlcIixcbiAgICBEaW1lbnNpb246IFwiZGltZW5zaW9uXCIsXG4gICAgU2l6ZTogXCJzaXplXCIsXG4gICAgU3BhY2U6IFwic3BhY2VcIixcbiAgICBPcGFjaXR5OiBcIm9wYWNpdHlcIixcbiAgICBGb250U2l6ZTogXCJmb250U2l6ZVwiLFxuICAgIExpbmVIZWlnaHQ6IFwibGluZUhlaWdodFwiLFxuICAgIExldHRlclNwYWNpbmc6IFwibGV0dGVyU3BhY2luZ1wiLFxuICAgIFBhcmFncmFwaFNwYWNpbmc6IFwicGFyYWdyYXBoU3BhY2luZ1wiLFxuICAgIEJvcmRlcldpZHRoOiBcImJvcmRlcldpZHRoXCIsXG4gICAgQm9yZGVyUmFkaXVzOiBcImJvcmRlclJhZGl1c1wiLFxuICAgIER1cmF0aW9uOiBcImR1cmF0aW9uXCIsXG4gICAgWkluZGV4OiBcInpJbmRleFwiLFxuICAgIFNoYWRvdzogXCJzaGFkb3dcIixcbiAgICBCb3JkZXI6IFwiYm9yZGVyXCIsXG4gICAgR3JhZGllbnQ6IFwiZ3JhZGllbnRcIixcbiAgICBTdHJpbmc6IFwic3RyaW5nXCIsXG4gICAgUHJvZHVjdENvcHk6IFwicHJvZHVjdENvcHlcIixcbiAgICBGb250RmFtaWx5OiBcImZvbnRGYW1pbHlcIixcbiAgICBGb250V2VpZ2h0OiBcImZvbnRXZWlnaHRcIixcbiAgICBUZXh0Q2FzZTogXCJ0ZXh0Q2FzZVwiLFxuICAgIFRleHREZWNvcmF0aW9uOiBcInRleHREZWNvcmF0aW9uXCIsXG4gICAgVmlzaWJpbGl0eTogXCJ2aXNpYmlsaXR5XCIsXG4gICAgQmx1cjogXCJibHVyXCJcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VG9rZW5QcmVmaXggPSBnZXRUb2tlblByZWZpeDtcbmV4cG9ydHMudG9rZW5PYmplY3RLZXlOYW1lID0gdG9rZW5PYmplY3RLZXlOYW1lO1xuZXhwb3J0cy5yZXNldFRva2VuTmFtZVRyYWNraW5nID0gcmVzZXRUb2tlbk5hbWVUcmFja2luZztcbmV4cG9ydHMuY29udmVydGVkVG9rZW4gPSBjb252ZXJ0ZWRUb2tlbjtcbmNvbnN0IGV4cG9ydF91dGlsc18xID0gcmVxdWlyZShcIkBzdXBlcm5vdmFpby9leHBvcnQtdXRpbHNcIik7XG5jb25zdCBfXzEgPSByZXF1aXJlKFwiLi5cIik7XG5jb25zdCBkZWZhdWx0c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50cy9kZWZhdWx0c1wiKTtcbmNvbnN0IHZhbHVlX2Zvcm1hdHRlcl8xID0gcmVxdWlyZShcIi4uL3V0aWxzL3ZhbHVlLWZvcm1hdHRlclwiKTtcbmNvbnN0IHRva2VuX2hpZXJhcmNoeV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL3Rva2VuLWhpZXJhcmNoeVwiKTtcbmZ1bmN0aW9uIGdldFRva2VuUHJlZml4KHRva2VuVHlwZSwgZm9yY2VSZXR1cm4gPSBmYWxzZSkge1xuICAgIC8vIFJldHVybiBlbXB0eSBzdHJpbmcgaWYgdG9rZW4gdHlwZSBwcmVmaXhlcyBhcmUgZGlzYWJsZWQgKHVubGVzcyBmb3JjZVJldHVybiBpcyB0cnVlKVxuICAgIGlmICghX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udXNlVG9rZW5UeXBlUHJlZml4ZXMgJiYgIWZvcmNlUmV0dXJuKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmN1c3RvbWl6ZVRva2VuUHJlZml4ZXNcbiAgICAgICAgPyBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlblByZWZpeGVzW3Rva2VuVHlwZV0udHJpbSgpXG4gICAgICAgIDogZGVmYXVsdHNfMS5ERUZBVUxUX1RPS0VOX1BSRUZJWEVTW3Rva2VuVHlwZV07XG59XG5mdW5jdGlvbiB0b2tlbk9iamVjdEtleU5hbWUodG9rZW4sIHRva2VuR3JvdXBzLCBmb3JFeHBvcnQgPSBmYWxzZSwgY29sbGVjdGlvbnMgPSBbXSkge1xuICAgIC8vIEZpbmQgY29sbGVjdGlvbiBpZiBuZWVkZWRcbiAgICBsZXQgY29sbGVjdGlvbk5hbWUgPSBudWxsO1xuICAgIGlmIChfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlbk5hbWVTdHJ1Y3R1cmUgPT09ICdjb2xsZWN0aW9uUGF0aEFuZE5hbWUnICYmIHRva2VuLmNvbGxlY3Rpb25JZCkge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gY29sbGVjdGlvbnMuZmluZChjID0+IGMucGVyc2lzdGVudElkID09PSB0b2tlbi5jb2xsZWN0aW9uSWQpO1xuICAgICAgICBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24/Lm5hbWUgPz8gbnVsbDtcbiAgICB9XG4gICAgLy8gRm9yIG5hbWVPbmx5IHN0cnVjdHVyZSwgZG9uJ3QgcGFzcyB0aGUgcGFyZW50IGdyb3VwXG4gICAgY29uc3QgcGFyZW50R3JvdXAgPSBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlbk5hbWVTdHJ1Y3R1cmUgIT09ICduYW1lT25seScgP1xuICAgICAgICB0b2tlbkdyb3Vwcy5maW5kKChncm91cCkgPT4gZ3JvdXAuaWQgPT09IHRva2VuLnBhcmVudEdyb3VwSWQpIDpcbiAgICAgICAgbnVsbDtcbiAgICAvLyBGb3IgY29sbGVjdGlvbi1iYXNlZCBncm91cGluZywgZG9uJ3QgdXNlIGFueSBwcmVmaXggdG8gYXZvaWQgdGhlIFwiY2l2aWNhXCIgd3JhcHBlclxuICAgIGNvbnN0IHByZWZpeCA9ICcnO1xuICAgIHJldHVybiBleHBvcnRfdXRpbHNfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWVGb3JUb2tlbih0b2tlbiwgX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3R5bGUsIHBhcmVudEdyb3VwID8/IG51bGwsIFtwcmVmaXgsIGNvbGxlY3Rpb25OYW1lXS5maWx0ZXIoQm9vbGVhbikuam9pbignLScpKTtcbn1cbi8vIFVzZSB0aGUgaGllcmFyY2h5LWJhc2VkIG5hbWUgdHJhY2tpbmcgcmVzZXRcbmZ1bmN0aW9uIHJlc2V0VG9rZW5OYW1lVHJhY2tpbmcoKSB7XG4gICAgKDAsIHRva2VuX2hpZXJhcmNoeV8xLnJlc2V0TmFtZVRyYWNraW5nKSgpO1xufVxuZnVuY3Rpb24gY29udmVydGVkVG9rZW4odG9rZW4sIG1hcHBlZFRva2VucywgdG9rZW5Hcm91cHMsIGNvbGxlY3Rpb25zID0gW10pIHtcbiAgICBjb25zdCBuYW1lID0gdG9rZW5PYmplY3RLZXlOYW1lKHRva2VuLCB0b2tlbkdyb3VwcywgZmFsc2UsIGNvbGxlY3Rpb25zKTtcbiAgICBjb25zdCB2YWx1ZSA9IGV4cG9ydF91dGlsc18xLkNTU0hlbHBlci50b2tlblRvQ1NTKHRva2VuLCBtYXBwZWRUb2tlbnMsIHtcbiAgICAgICAgYWxsb3dSZWZlcmVuY2VzOiBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi51c2VSZWZlcmVuY2VzLFxuICAgICAgICBkZWNpbWFsczogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uY29sb3JQcmVjaXNpb24sXG4gICAgICAgIGNvbG9yRm9ybWF0OiBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5jb2xvckZvcm1hdCxcbiAgICAgICAgZm9yY2VSZW1Vbml0OiBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5mb3JjZVJlbVVuaXQsXG4gICAgICAgIHJlbUJhc2U6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnJlbUJhc2UsXG4gICAgICAgIHRva2VuVG9WYXJpYWJsZVJlZjogKHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbk9iamVjdEtleU5hbWUodCwgdG9rZW5Hcm91cHMsIGZhbHNlLCBjb2xsZWN0aW9ucyk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3QgaW5kZW50U3RyaW5nID0gXCIgXCIucmVwZWF0KF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmluZGVudCk7XG4gICAgY29uc3QgZm9ybWF0dGVkVmFsdWUgPSAoMCwgdmFsdWVfZm9ybWF0dGVyXzEuZm9ybWF0VG9rZW5WYWx1ZSkodmFsdWUpO1xuICAgIGlmIChfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5zaG93RGVzY3JpcHRpb25zICYmIHRva2VuLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgIHJldHVybiBgJHtpbmRlbnRTdHJpbmd9Ly8gJHt0b2tlbi5kZXNjcmlwdGlvbi50cmltKCl9XFxuJHtpbmRlbnRTdHJpbmd9JHtuYW1lfTogJHtmb3JtYXR0ZWRWYWx1ZX0sYDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBgJHtpbmRlbnRTdHJpbmd9JHtuYW1lfTogJHtmb3JtYXR0ZWRWYWx1ZX0sYDtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3R5bGVPdXRwdXRGaWxlID0gc3R5bGVPdXRwdXRGaWxlO1xuZXhwb3J0cy5jb21iaW5lZFN0eWxlT3V0cHV0RmlsZSA9IGNvbWJpbmVkU3R5bGVPdXRwdXRGaWxlO1xuY29uc3QgZXhwb3J0X3V0aWxzXzEgPSByZXF1aXJlKFwiQHN1cGVybm92YWlvL2V4cG9ydC11dGlsc1wiKTtcbmNvbnN0IF9fMSA9IHJlcXVpcmUoXCIuLlwiKTtcbmNvbnN0IHRva2VuXzEgPSByZXF1aXJlKFwiLi4vY29udGVudC90b2tlblwiKTtcbmNvbnN0IGRlZmF1bHRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzL2RlZmF1bHRzXCIpO1xuY29uc3QgdG9rZW5faGllcmFyY2h5XzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvdG9rZW4taGllcmFyY2h5XCIpO1xuY29uc3QgZXhwb3J0X3V0aWxzXzIgPSByZXF1aXJlKFwiQHN1cGVybm92YWlvL2V4cG9ydC11dGlsc1wiKTtcbmNvbnN0IGNvbmZpZ18xID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZ1wiKTtcbi8qKlxuICogQ3JlYXRlcyBhIHZhbHVlIG9iamVjdCBmb3IgYSB0b2tlbiwgZWl0aGVyIGFzIGEgc2ltcGxlIHZhbHVlIG9yIHRoZW1lZCB2YWx1ZXNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVG9rZW5WYWx1ZSh2YWx1ZSwgdG9rZW4sIHRoZW1lKSB7XG4gICAgLy8gUmV0dXJuIG9ubHkgdGhlIGNsZWFuIHZhbHVlLCB3aXRob3V0IGFueSBvYmplY3Qgd3JhcHBpbmcuXG4gICAgLy8gVGhpcyBzaW1wbGlmaWVzIHRoZSBvdXRwdXQgdG8gYSBkaXJlY3Qga2V5LXZhbHVlIHBhaXIgYXMgcmVxdWVzdGVkLlxuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bJ1wiXS9nLCBcIlwiKTtcbn1cbi8qKlxuICogQ29yZSB0b2tlbiBwcm9jZXNzaW5nIGZ1bmN0aW9uIHRoYXQgaGFuZGxlcyB0aGUgdHJhbnNmb3JtYXRpb24gb2YgdG9rZW5zIGludG8gYSBzdHJ1Y3R1cmVkIG9iamVjdC5cbiAqIFRoaXMgZnVuY3Rpb24gZW5jYXBzdWxhdGVzIHRoZSBzaGFyZWQgbG9naWMgYmV0d2VlbiBzaW5nbGUtZmlsZSBhbmQgc2VwYXJhdGUtZmlsZSBvdXRwdXRzLlxuICpcbiAqIEZlYXR1cmVzOlxuICogLSBIYW5kbGVzIHRva2VuIG5hbWUgdHJhY2tpbmcgYW5kIHVuaXF1ZW5lc3NcbiAqIC0gUHJvY2Vzc2VzIHRva2VuIHZhbHVlcyBhbmQgcmVmZXJlbmNlc1xuICogLSBNYW5hZ2VzIHRva2VuIHNvcnRpbmdcbiAqIC0gQ3JlYXRlcyBoaWVyYXJjaGljYWwgb2JqZWN0IHN0cnVjdHVyZVxuICogLSBIYW5kbGVzIHRoZW1lLXNwZWNpZmljIHZhbHVlc1xuICogLSBJbmNsdWRlcyB0b2tlbiBkZXNjcmlwdGlvbnMgYW5kIGNvbW1lbnRzXG4gKiAtIEZvcm1hdHMgdmFsdWVzIGFjY29yZGluZyB0byBjb25maWd1cmF0aW9uXG4gKlxuICogQHBhcmFtIHRva2VucyAtIEFycmF5IG9mIHRva2VucyB0byBwcm9jZXNzXG4gKiBAcGFyYW0gdG9rZW5Hcm91cHMgLSBBcnJheSBvZiB0b2tlbiBncm91cHMgZm9yIG1haW50YWluaW5nIGhpZXJhcmNoeVxuICogQHBhcmFtIHRoZW1lIC0gT3B0aW9uYWwgdGhlbWUgY29uZmlndXJhdGlvbiBmb3IgdGhlbWVkIHRva2Vuc1xuICogQHBhcmFtIGNvbGxlY3Rpb25zIC0gQXJyYXkgb2YgZGVzaWduIHN5c3RlbSBjb2xsZWN0aW9ucyBmb3IgY29sbGVjdGlvbi1iYXNlZCBvcmdhbml6YXRpb25cbiAqIEBwYXJhbSBhbGxUb2tlbnMgLSBPcHRpb25hbCBhcnJheSBvZiBhbGwgYXZhaWxhYmxlIHRva2VucyBmb3IgcmVmZXJlbmNlIHJlc29sdXRpb25cbiAqIEByZXR1cm5zIFN0cnVjdHVyZWQgb2JqZWN0IGNvbnRhaW5pbmcgcHJvY2Vzc2VkIHRva2Vucywgb3IgbnVsbCBpZiBubyBvdXRwdXQgc2hvdWxkIGJlIGdlbmVyYXRlZFxuICovXG5mdW5jdGlvbiBwcm9jZXNzVG9rZW5zVG9PYmplY3QodG9rZW5zLCB0b2tlbkdyb3VwcywgdGhlbWUsIGNvbGxlY3Rpb25zID0gW10sIGFsbFRva2Vucykge1xuICAgIC8vIENsZWFyIGFueSBwcmV2aW91c2x5IGNhY2hlZCB0b2tlbiBuYW1lcyB0byBlbnN1cmUgY2xlYW4gZ2VuZXJhdGlvblxuICAgICgwLCB0b2tlbl8xLnJlc2V0VG9rZW5OYW1lVHJhY2tpbmcpKCk7XG4gICAgLy8gU2tpcCBnZW5lcmF0aW5nIGVtcHR5IGZpbGVzIHVubGVzcyBleHBsaWNpdGx5IGNvbmZpZ3VyZWQgdG8gZG8gc29cbiAgICBpZiAoIV9fMS5leHBvcnRDb25maWd1cmF0aW9uLmdlbmVyYXRlRW1wdHlGaWxlcyAmJiB0b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYSBsb29rdXAgbWFwIGZvciBxdWljayB0b2tlbiByZWZlcmVuY2UgcmVzb2x1dGlvbiB1c2luZyBhbGwgdG9rZW5zXG4gICAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgcmVmZXJlbmNlcyB0byB0b2tlbnMgb3V0c2lkZSB0aGUgY3VycmVudCBmaWx0ZXJlZCBzZXQgc3RpbGwgd29ya1xuICAgIGNvbnN0IG1hcHBlZFRva2VucyA9IG5ldyBNYXAoKGFsbFRva2VucyB8fCB0b2tlbnMpLm1hcCgodG9rZW4pID0+IFt0b2tlbi5pZCwgdG9rZW5dKSk7XG4gICAgLy8gU29ydCB0b2tlbnMgaWYgY29uZmlndXJlZFxuICAgIC8vIFRoaXMgY2FuIG1ha2UgaXQgZWFzaWVyIHRvIGZpbmQgdG9rZW5zIGluIHRoZSBnZW5lcmF0ZWQgZmlsZXNcbiAgICBsZXQgc29ydGVkVG9rZW5zID0gWy4uLnRva2Vuc107XG4gICAgaWYgKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuU29ydE9yZGVyID09PSAnYWxwaGFiZXRpY2FsJykge1xuICAgICAgICBzb3J0ZWRUb2tlbnMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmFtZUEgPSAoMCwgdG9rZW5fMS50b2tlbk9iamVjdEtleU5hbWUpKGEsIHRva2VuR3JvdXBzLCB0cnVlLCBjb2xsZWN0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBuYW1lQiA9ICgwLCB0b2tlbl8xLnRva2VuT2JqZWN0S2V5TmFtZSkoYiwgdG9rZW5Hcm91cHMsIHRydWUsIGNvbGxlY3Rpb25zKTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lQS5sb2NhbGVDb21wYXJlKG5hbWVCKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgdGhlIHJvb3Qgb2JqZWN0IHRoYXQgd2lsbCBjb250YWluIGFsbCBwcm9jZXNzZWQgdG9rZW5zXG4gICAgY29uc3QgdG9rZW5PYmplY3QgPSB7fTtcbiAgICAvLyBBZGQgZ2VuZXJhdGVkIGZpbGUgZGlzY2xhaW1lciBpZiBlbmFibGVkXG4gICAgLy8gVGhpcyBoZWxwcyB1c2VycyB1bmRlcnN0YW5kIHRoYXQgdGhlIGZpbGUgaXMgYXV0by1nZW5lcmF0ZWRcbiAgICBpZiAoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uc2hvd0dlbmVyYXRlZEZpbGVEaXNjbGFpbWVyKSB7XG4gICAgICAgIHRva2VuT2JqZWN0Ll9jb21tZW50ID0gX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZGlzY2xhaW1lcjtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBlYWNoIHRva2VuIGFuZCBidWlsZCB0aGUgaGllcmFyY2hpY2FsIHN0cnVjdHVyZVxuICAgIHNvcnRlZFRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcbiAgICAgICAgLy8gR2VuZXJhdGUgdGhlIHRva2VuJ3Mgb2JqZWN0IGtleSBuYW1lIGJhc2VkIG9uIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgY29uc3QgbmFtZSA9ICgwLCB0b2tlbl8xLnRva2VuT2JqZWN0S2V5TmFtZSkodG9rZW4sIHRva2VuR3JvdXBzLCB0cnVlLCBjb2xsZWN0aW9ucyk7XG4gICAgICAgIC8vIENvbnZlcnQgdG9rZW4gdG8gQ1NTLWNvbXBhdGlibGUgdmFsdWUsIGhhbmRsaW5nIHJlZmVyZW5jZXMgYW5kIGZvcm1hdHRpbmdcbiAgICAgICAgY29uc3QgdmFsdWUgPSBleHBvcnRfdXRpbHNfMS5DU1NIZWxwZXIudG9rZW5Ub0NTUyh0b2tlbiwgbWFwcGVkVG9rZW5zLCB7XG4gICAgICAgICAgICBhbGxvd1JlZmVyZW5jZXM6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnVzZVJlZmVyZW5jZXMsXG4gICAgICAgICAgICBkZWNpbWFsczogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uY29sb3JQcmVjaXNpb24sXG4gICAgICAgICAgICBjb2xvckZvcm1hdDogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uY29sb3JGb3JtYXQsXG4gICAgICAgICAgICBmb3JjZVJlbVVuaXQ6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmZvcmNlUmVtVW5pdCxcbiAgICAgICAgICAgIHJlbUJhc2U6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnJlbUJhc2UsXG4gICAgICAgICAgICB0b2tlblRvVmFyaWFibGVSZWY6ICh0KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQnVpbGQgdGhlIHJlZmVyZW5jZSBwYXRoIGJhc2VkIG9uIHRva2VuIHN0cnVjdHVyZSBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gKDAsIHRva2VuXzEuZ2V0VG9rZW5QcmVmaXgpKHQudG9rZW5UeXBlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoU2VnbWVudHMgPSAodC50b2tlblBhdGggfHwgW10pXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoc2VnbWVudCA9PiBzZWdtZW50ICYmIHNlZ21lbnQudHJpbSgpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoc2VnbWVudCA9PiBleHBvcnRfdXRpbHNfMi5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoc2VnbWVudCwgX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3R5bGUpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbk5hbWUgPSAoMCwgdG9rZW5faGllcmFyY2h5XzEucHJvY2Vzc1Rva2VuTmFtZSkodCwgcGF0aFNlZ21lbnRzKTtcbiAgICAgICAgICAgICAgICAvLyBCdWlsZCBzZWdtZW50cyBhcnJheSBiYXNlZCBvbiBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgICAgbGV0IHNlZ21lbnRzID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHByZWZpeCkge1xuICAgICAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHByZWZpeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBkaWZmZXJlbnQgdG9rZW4gbmFtZSBzdHJ1Y3R1cmUgY29uZmlndXJhdGlvbnNcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0cnVjdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbmZpZ18xLlRva2VuTmFtZVN0cnVjdHVyZS5OYW1lT25seTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2godG9rZW5OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbmZpZ18xLlRva2VuTmFtZVN0cnVjdHVyZS5Db2xsZWN0aW9uUGF0aEFuZE5hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmNsdWRlIGNvbGxlY3Rpb24gbmFtZSBpbiB0aGUgcGF0aCBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmNvbGxlY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9ucy5maW5kKGMgPT4gYy5wZXJzaXN0ZW50SWQgPT09IHQuY29sbGVjdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xsZWN0aW9uU2VnbWVudCA9IGV4cG9ydF91dGlsc18yLk5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZShjb2xsZWN0aW9uLm5hbWUsIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaChjb2xsZWN0aW9uU2VnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaCguLi5wYXRoU2VnbWVudHMsIHRva2VuTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBjb25maWdfMS5Ub2tlbk5hbWVTdHJ1Y3R1cmUuUGF0aEFuZE5hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKC4uLnBhdGhTZWdtZW50cywgdG9rZW5OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBZGQgZ2xvYmFsIHByZWZpeCBpZiBjb25maWd1cmVkXG4gICAgICAgICAgICAgICAgaWYgKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmdsb2JhbE5hbWVQcmVmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMudW5zaGlmdChleHBvcnRfdXRpbHNfMi5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZ2xvYmFsTmFtZVByZWZpeCwgX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3R5bGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGB7JHtzZWdtZW50cy5qb2luKCcuJyl9fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBDcmVhdGUgdGhlIGhpZXJhcmNoaWNhbCBvYmplY3Qgc3RydWN0dXJlIGZvciB0aGlzIHRva2VuXG4gICAgICAgIGNvbnN0IHRva2VuUGF0aFdpdGhvdXRDb2xsZWN0aW9uID0gKHRva2VuLnRva2VuUGF0aCB8fCBbXSkuc2xpY2UoMSk7XG4gICAgICAgIGNvbnN0IGhpZXJhcmNoaWNhbE9iamVjdCA9ICgwLCB0b2tlbl9oaWVyYXJjaHlfMS5jcmVhdGVIaWVyYXJjaGljYWxTdHJ1Y3R1cmUpKHRva2VuUGF0aFdpdGhvdXRDb2xsZWN0aW9uLCB0b2tlbi5uYW1lLCBjcmVhdGVUb2tlblZhbHVlKHZhbHVlLCB0b2tlbiwgdGhlbWUpLCB0b2tlbiwgY29sbGVjdGlvbnMsIHsgaW5jbHVkZVR5cGVQcmVmaXg6IGZhbHNlIH0pO1xuICAgICAgICAvLyBNZXJnZSB0aGUgdG9rZW4ncyBvYmplY3Qgc3RydWN0dXJlIGludG8gdGhlIG1haW4gb2JqZWN0XG4gICAgICAgIE9iamVjdC5hc3NpZ24odG9rZW5PYmplY3QsICgwLCB0b2tlbl9oaWVyYXJjaHlfMS5kZWVwTWVyZ2UpKHRva2VuT2JqZWN0LCBoaWVyYXJjaGljYWxPYmplY3QpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdG9rZW5PYmplY3Q7XG59XG4vKipcbiAqIEdyb3VwcyB0b2tlbnMgYnkgdGhlaXIgY29sbGVjdGlvbiBpbnN0ZWFkIG9mIGJ5IHR5cGVcbiAqIFRoaXMgY3JlYXRlcyBhIHN0cnVjdHVyZSBsaWtlOiB7IFwicHJpbWl0aXZlXCI6IHsuLi59LCBcInNlbWFudGljXCI6IHsuLi59LCBcImNvbXBvbmVudHNcIjogey4uLn0gfVxuICovXG5mdW5jdGlvbiBncm91cFRva2Vuc0J5Q29sbGVjdGlvbih0b2tlbnMsIHRva2VuR3JvdXBzLCB0aGVtZSwgY29sbGVjdGlvbnMgPSBbXSwgYWxsVG9rZW5zKSB7XG4gICAgLy8gQ2xlYXIgYW55IHByZXZpb3VzbHkgY2FjaGVkIHRva2VuIG5hbWVzIHRvIGVuc3VyZSBjbGVhbiBnZW5lcmF0aW9uXG4gICAgKDAsIHRva2VuXzEucmVzZXRUb2tlbk5hbWVUcmFja2luZykoKTtcbiAgICAvLyBTa2lwIGdlbmVyYXRpbmcgZW1wdHkgZmlsZXMgdW5sZXNzIGV4cGxpY2l0bHkgY29uZmlndXJlZCB0byBkbyBzb1xuICAgIGlmICghX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZ2VuZXJhdGVFbXB0eUZpbGVzICYmIHRva2Vucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIGxvb2t1cCBtYXAgZm9yIHF1aWNrIHRva2VuIHJlZmVyZW5jZSByZXNvbHV0aW9uIHVzaW5nIGFsbCB0b2tlbnNcbiAgICBjb25zdCBtYXBwZWRUb2tlbnMgPSBuZXcgTWFwKChhbGxUb2tlbnMgfHwgdG9rZW5zKS5tYXAoKHRva2VuKSA9PiBbdG9rZW4uaWQsIHRva2VuXSkpO1xuICAgIC8vIFNvcnQgdG9rZW5zIGlmIGNvbmZpZ3VyZWRcbiAgICBsZXQgc29ydGVkVG9rZW5zID0gWy4uLnRva2Vuc107XG4gICAgaWYgKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuU29ydE9yZGVyID09PSAnYWxwaGFiZXRpY2FsJykge1xuICAgICAgICBzb3J0ZWRUb2tlbnMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmFtZUEgPSAoMCwgdG9rZW5fMS50b2tlbk9iamVjdEtleU5hbWUpKGEsIHRva2VuR3JvdXBzLCB0cnVlLCBjb2xsZWN0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBuYW1lQiA9ICgwLCB0b2tlbl8xLnRva2VuT2JqZWN0S2V5TmFtZSkoYiwgdG9rZW5Hcm91cHMsIHRydWUsIGNvbGxlY3Rpb25zKTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lQS5sb2NhbGVDb21wYXJlKG5hbWVCKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgdGhlIHJvb3Qgb2JqZWN0IHdpdGggY29sbGVjdGlvbi1iYXNlZCBzdHJ1Y3R1cmVcbiAgICBjb25zdCB0b2tlbk9iamVjdCA9IHt9O1xuICAgIC8vIEFkZCBnZW5lcmF0ZWQgZmlsZSBkaXNjbGFpbWVyIGlmIGVuYWJsZWRcbiAgICBpZiAoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uc2hvd0dlbmVyYXRlZEZpbGVEaXNjbGFpbWVyKSB7XG4gICAgICAgIHRva2VuT2JqZWN0Ll9jb21tZW50ID0gX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZGlzY2xhaW1lcjtcbiAgICB9XG4gICAgLy8gQWRkIGEgdGltZXN0YW1wIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXNcbiAgICB0b2tlbk9iamVjdC5fbGFzdFVwZGF0ZWQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgLy8gRGVidWc6IExvZyBjb2xsZWN0aW9uIGluZm9ybWF0aW9uXG4gICAgY29uc29sZS5sb2coJ0NvbGxlY3Rpb25zOicsIGNvbGxlY3Rpb25zLm1hcChjID0+ICh7IGlkOiBjLnBlcnNpc3RlbnRJZCwgbmFtZTogYy5uYW1lIH0pKSk7XG4gICAgLy8gR3JvdXAgdG9rZW5zIGJ5IGNvbGxlY3Rpb25cbiAgICBjb25zdCB0b2tlbnNCeUNvbGxlY3Rpb24gPSBuZXcgTWFwKCk7XG4gICAgc29ydGVkVG9rZW5zLmZvckVhY2godG9rZW4gPT4ge1xuICAgICAgICBsZXQgY29sbGVjdGlvbk5hbWUgPSAncHJpbWl0aXZlJzsgLy8gZGVmYXVsdCBjb2xsZWN0aW9uXG4gICAgICAgIC8vIEV4dHJhY3QgY29sbGVjdGlvbiBuYW1lIGZyb20gdGhlIHRva2VuJ3MgcGF0aCBvciBjb2xsZWN0aW9uIGluZm9ybWF0aW9uXG4gICAgICAgIGlmICh0b2tlbi50b2tlblBhdGggJiYgdG9rZW4udG9rZW5QYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgZmlyc3Qgc2VnbWVudCBvZiB0aGUgdG9rZW4gcGF0aCBhcyB0aGUgY29sbGVjdGlvbiBuYW1lXG4gICAgICAgICAgICBjb2xsZWN0aW9uTmFtZSA9IHRva2VuLnRva2VuUGF0aFswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRva2VuLmNvbGxlY3Rpb25JZCkge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2sgdG8gY29sbGVjdGlvbiBJRCBpZiBubyBwYXRoXG4gICAgICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gY29sbGVjdGlvbnMuZmluZChjID0+IGMucGVyc2lzdGVudElkID09PSB0b2tlbi5jb2xsZWN0aW9uSWQpO1xuICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24ubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdG9rZW5zQnlDb2xsZWN0aW9uLmhhcyhjb2xsZWN0aW9uTmFtZSkpIHtcbiAgICAgICAgICAgIHRva2Vuc0J5Q29sbGVjdGlvbi5zZXQoY29sbGVjdGlvbk5hbWUsIFtdKTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbnNCeUNvbGxlY3Rpb24uZ2V0KGNvbGxlY3Rpb25OYW1lKS5wdXNoKHRva2VuKTtcbiAgICB9KTtcbiAgICAvLyBQcm9jZXNzIGVhY2ggY29sbGVjdGlvbiBncm91cCBhbmQgYWRkIGRpcmVjdGx5IHRvIHRoZSByb290IG9iamVjdFxuICAgIHRva2Vuc0J5Q29sbGVjdGlvbi5mb3JFYWNoKChjb2xsZWN0aW9uVG9rZW5zLCBjb2xsZWN0aW9uTmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uT2JqZWN0ID0ge307XG4gICAgICAgIC8vIFByb2Nlc3MgZWFjaCB0b2tlbiBpbiB0aGlzIGNvbGxlY3Rpb25cbiAgICAgICAgY29sbGVjdGlvblRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIHRoZSB0b2tlbidzIG9iamVjdCBrZXkgbmFtZSBiYXNlZCBvbiBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gKDAsIHRva2VuXzEudG9rZW5PYmplY3RLZXlOYW1lKSh0b2tlbiwgdG9rZW5Hcm91cHMsIHRydWUsIGNvbGxlY3Rpb25zKTtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdG9rZW4gdG8gQ1NTLWNvbXBhdGlibGUgdmFsdWUsIGhhbmRsaW5nIHJlZmVyZW5jZXMgYW5kIGZvcm1hdHRpbmdcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZXhwb3J0X3V0aWxzXzEuQ1NTSGVscGVyLnRva2VuVG9DU1ModG9rZW4sIG1hcHBlZFRva2Vucywge1xuICAgICAgICAgICAgICAgIGFsbG93UmVmZXJlbmNlczogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udXNlUmVmZXJlbmNlcyxcbiAgICAgICAgICAgICAgICBkZWNpbWFsczogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uY29sb3JQcmVjaXNpb24sXG4gICAgICAgICAgICAgICAgY29sb3JGb3JtYXQ6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmNvbG9yRm9ybWF0LFxuICAgICAgICAgICAgICAgIGZvcmNlUmVtVW5pdDogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZm9yY2VSZW1Vbml0LFxuICAgICAgICAgICAgICAgIHJlbUJhc2U6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnJlbUJhc2UsXG4gICAgICAgICAgICAgICAgdG9rZW5Ub1ZhcmlhYmxlUmVmOiAodCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBCdWlsZCB0aGUgcmVmZXJlbmNlIHBhdGggYmFzZWQgb24gdG9rZW4gc3RydWN0dXJlIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gKDAsIHRva2VuXzEuZ2V0VG9rZW5QcmVmaXgpKHQudG9rZW5UeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aFNlZ21lbnRzID0gKHQudG9rZW5QYXRoIHx8IFtdKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihzZWdtZW50ID0+IHNlZ21lbnQgJiYgc2VnbWVudC50cmltKCkubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoc2VnbWVudCA9PiBleHBvcnRfdXRpbHNfMi5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoc2VnbWVudCwgX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3R5bGUpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5OYW1lID0gKDAsIHRva2VuX2hpZXJhcmNoeV8xLnByb2Nlc3NUb2tlbk5hbWUpKHQsIHBhdGhTZWdtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJ1aWxkIHNlZ21lbnRzIGFycmF5IGJhc2VkIG9uIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlZ21lbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2gocHJlZml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgZGlmZmVyZW50IHRva2VuIG5hbWUgc3RydWN0dXJlIGNvbmZpZ3VyYXRpb25zXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3RydWN0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbmZpZ18xLlRva2VuTmFtZVN0cnVjdHVyZS5OYW1lT25seTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHRva2VuTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbmZpZ18xLlRva2VuTmFtZVN0cnVjdHVyZS5Db2xsZWN0aW9uUGF0aEFuZE5hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5jbHVkZSBjb2xsZWN0aW9uIG5hbWUgaW4gdGhlIHBhdGggaWYgYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuY29sbGVjdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9ucy5maW5kKGMgPT4gYy5wZXJzaXN0ZW50SWQgPT09IHQuY29sbGVjdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb25TZWdtZW50ID0gZXhwb3J0X3V0aWxzXzIuTmFtaW5nSGVscGVyLmNvZGVTYWZlVmFyaWFibGVOYW1lKGNvbGxlY3Rpb24ubmFtZSwgX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaChjb2xsZWN0aW9uU2VnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaCguLi5wYXRoU2VnbWVudHMsIHRva2VuTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbmZpZ18xLlRva2VuTmFtZVN0cnVjdHVyZS5QYXRoQW5kTmFtZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKC4uLnBhdGhTZWdtZW50cywgdG9rZW5OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgZ2xvYmFsIHByZWZpeCBpZiBjb25maWd1cmVkXG4gICAgICAgICAgICAgICAgICAgIGlmIChfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5nbG9iYWxOYW1lUHJlZml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50cy51bnNoaWZ0KGV4cG9ydF91dGlsc18yLk5hbWluZ0hlbHBlci5jb2RlU2FmZVZhcmlhYmxlTmFtZShfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5nbG9iYWxOYW1lUHJlZml4LCBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlbk5hbWVTdHlsZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgeyR7c2VnbWVudHMuam9pbignLicpfX1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBoaWVyYXJjaGljYWwgb2JqZWN0IHN0cnVjdHVyZSBmb3IgdGhpcyB0b2tlblxuICAgICAgICAgICAgY29uc3QgdG9rZW5QYXRoV2l0aG91dENvbGxlY3Rpb24gPSAodG9rZW4udG9rZW5QYXRoIHx8IFtdKS5zbGljZSgxKTtcbiAgICAgICAgICAgIGNvbnN0IGhpZXJhcmNoaWNhbE9iamVjdCA9ICgwLCB0b2tlbl9oaWVyYXJjaHlfMS5jcmVhdGVIaWVyYXJjaGljYWxTdHJ1Y3R1cmUpKHRva2VuUGF0aFdpdGhvdXRDb2xsZWN0aW9uLCB0b2tlbi5uYW1lLCBjcmVhdGVUb2tlblZhbHVlKHZhbHVlLCB0b2tlbiwgdGhlbWUpLCB0b2tlbiwgY29sbGVjdGlvbnMsIHsgaW5jbHVkZVR5cGVQcmVmaXg6IGZhbHNlIH0pO1xuICAgICAgICAgICAgLy8gTWVyZ2UgdGhlIHRva2VuJ3Mgb2JqZWN0IHN0cnVjdHVyZSBpbnRvIHRoZSBjb2xsZWN0aW9uIG9iamVjdFxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjb2xsZWN0aW9uT2JqZWN0LCAoMCwgdG9rZW5faGllcmFyY2h5XzEuZGVlcE1lcmdlKShjb2xsZWN0aW9uT2JqZWN0LCBoaWVyYXJjaGljYWxPYmplY3QpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFkZCB0aGlzIGNvbGxlY3Rpb24gZGlyZWN0bHkgdG8gdGhlIHJvb3Qgb2JqZWN0XG4gICAgICAgIHRva2VuT2JqZWN0W2NvbGxlY3Rpb25OYW1lXSA9IGNvbGxlY3Rpb25PYmplY3Q7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRva2VuT2JqZWN0O1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzdHlsZSBmaWxlIGZvciBhIHNwZWNpZmljIHRva2VuIHR5cGUgKGNvbG9yLmpzb24sIHR5cG9ncmFwaHkuanNvbiwgZXRjLikuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiBmaWxlU3RydWN0dXJlIGlzIHNldCB0byAnc2VwYXJhdGVCeVR5cGUnLlxuICpcbiAqIEZlYXR1cmVzOlxuICogLSBHZW5lcmF0ZXMgc2VwYXJhdGUgZmlsZXMgZm9yIGVhY2ggdG9rZW4gdHlwZVxuICogLSBIYW5kbGVzIHRva2VuIGZpbHRlcmluZyBieSB0eXBlXG4gKiAtIFN1cHBvcnRzIHRoZW1pbmdcbiAqIC0gSW5jbHVkZXMgdG9rZW4gZGVzY3JpcHRpb25zIGFzIGNvbW1lbnRzXG4gKiAtIEZvcm1hdHMgdmFsdWVzIGFjY29yZGluZyB0byBjb25maWd1cmF0aW9uXG4gKlxuICogQHBhcmFtIHR5cGUgLSBUaGUgdHlwZSBvZiB0b2tlbnMgdG8gZ2VuZXJhdGUgKENvbG9yLCBUeXBvZ3JhcGh5LCBldGMuKVxuICogQHBhcmFtIHRva2VucyAtIEFycmF5IG9mIGFsbCB0b2tlbnNcbiAqIEBwYXJhbSB0b2tlbkdyb3VwcyAtIEFycmF5IG9mIHRva2VuIGdyb3VwcyBmb3IgbmFtZSBnZW5lcmF0aW9uXG4gKiBAcGFyYW0gdGhlbWVQYXRoIC0gUGF0aCBmb3IgdGhlbWVkIHRva2VucyAoZW1wdHkgZm9yIGJhc2UgdG9rZW5zKVxuICogQHBhcmFtIHRoZW1lIC0gVGhlbWUgY29uZmlndXJhdGlvbiB3aGVuIGdlbmVyYXRpbmcgdGhlbWVkIHRva2Vuc1xuICogQHBhcmFtIGNvbGxlY3Rpb25zIC0gQXJyYXkgb2YgZGVzaWduIHN5c3RlbSBjb2xsZWN0aW9uc1xuICogQHJldHVybnMgT3V0cHV0VGV4dEZpbGUgd2l0aCB0aGUgZ2VuZXJhdGVkIGNvbnRlbnQgb3IgbnVsbCBpZiBubyB0b2tlbnMgZXhpc3RcbiAqL1xuZnVuY3Rpb24gc3R5bGVPdXRwdXRGaWxlKHR5cGUsIHRva2VucywgdG9rZW5Hcm91cHMsIHRoZW1lUGF0aCA9ICcnLCB0aGVtZSwgY29sbGVjdGlvbnMgPSBbXSkge1xuICAgIC8vIFNraXAgZ2VuZXJhdGluZyBiYXNlIHRva2VuIGZpbGVzIHVubGVzczpcbiAgICAvLyAtIEJhc2UgdmFsdWVzIGFyZSBleHBsaWNpdGx5IGVuYWJsZWQgdmlhIGV4cG9ydEJhc2VWYWx1ZXMsIG9yXG4gICAgLy8gLSBXZSdyZSBnZW5lcmF0aW5nIHRoZW1lZCBmaWxlcyAodGhlbWVQYXRoIGlzIHByZXNlbnQpLCBvclxuICAgIC8vIC0gV2UncmUgdXNpbmcgbmVzdGVkIHRoZW1lcyBmb3JtYXRcbiAgICBpZiAoIV9fMS5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXMgJiYgIXRoZW1lUGF0aCAmJlxuICAgICAgICBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRUaGVtZXNBcyAhPT0gY29uZmlnXzEuVGhlbWVFeHBvcnRTdHlsZS5OZXN0ZWRUaGVtZXMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIEZpbHRlciB0byBvbmx5IGluY2x1ZGUgdG9rZW5zIG9mIHRoZSBzcGVjaWZpZWQgdHlwZSAoY29sb3IsIHNpemUsIGV0YylcbiAgICBsZXQgdG9rZW5zT2ZUeXBlID0gdG9rZW5zLmZpbHRlcigodG9rZW4pID0+IHRva2VuLnRva2VuVHlwZSA9PT0gdHlwZSk7XG4gICAgLy8gRm9yIHRoZW1lZCB0b2tlbiBmaWxlczpcbiAgICAvLyAtIEZpbHRlciB0byBvbmx5IGluY2x1ZGUgdG9rZW5zIHRoYXQgYXJlIG92ZXJyaWRkZW4gaW4gdGhpcyB0aGVtZVxuICAgIC8vIC0gU2tpcCBnZW5lcmF0aW5nIHRoZSBmaWxlIGlmIG5vIHRva2VucyBhcmUgdGhlbWVkICh3aGVuIGNvbmZpZ3VyZWQpXG4gICAgaWYgKHRoZW1lUGF0aCAmJiB0aGVtZSAmJiBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRPbmx5VGhlbWVkVG9rZW5zKSB7XG4gICAgICAgIHRva2Vuc09mVHlwZSA9IGV4cG9ydF91dGlsc18xLlRoZW1lSGVscGVyLmZpbHRlclRoZW1lZFRva2Vucyh0b2tlbnNPZlR5cGUsIHRoZW1lKTtcbiAgICAgICAgaWYgKHRva2Vuc09mVHlwZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgdG9rZW5zIGludG8gYSBzdHJ1Y3R1cmVkIG9iamVjdFxuICAgIC8vIFBhc3MgdGhlIGZ1bGwgdG9rZW5zIGFycmF5IGZvciByZWZlcmVuY2UgcmVzb2x1dGlvblxuICAgIGNvbnN0IHRva2VuT2JqZWN0ID0gcHJvY2Vzc1Rva2Vuc1RvT2JqZWN0KHRva2Vuc09mVHlwZSwgdG9rZW5Hcm91cHMsIHRoZW1lLCBjb2xsZWN0aW9ucywgdG9rZW5zKTtcbiAgICBpZiAoIXRva2VuT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBHZW5lcmF0ZSB0aGUgZmluYWwgSlNPTiBjb250ZW50IHdpdGggcHJvcGVyIGluZGVudGF0aW9uXG4gICAgY29uc3QgY29udGVudCA9IEpTT04uc3RyaW5naWZ5KHRva2VuT2JqZWN0LCBudWxsLCBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5pbmRlbnQpO1xuICAgIC8vIENyZWF0ZSBhbmQgcmV0dXJuIHRoZSBvdXRwdXQgZmlsZSB3aXRoIGFwcHJvcHJpYXRlIHBhdGggYW5kIG5hbWVcbiAgICByZXR1cm4gZXhwb3J0X3V0aWxzXzEuRmlsZUhlbHBlci5jcmVhdGVUZXh0RmlsZSh7XG4gICAgICAgIHJlbGF0aXZlUGF0aDogdGhlbWVQYXRoID8gYC4vJHt0aGVtZVBhdGh9YCA6IF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmJhc2VTdHlsZUZpbGVQYXRoLFxuICAgICAgICBmaWxlTmFtZTogX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uY3VzdG9taXplU3R5bGVGaWxlTmFtZXNcbiAgICAgICAgICAgID8gZXhwb3J0X3V0aWxzXzEuRmlsZU5hbWVIZWxwZXIuZW5zdXJlRmlsZUV4dGVuc2lvbihfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5zdHlsZUZpbGVOYW1lc1t0eXBlXSwgXCIuanNvblwiKVxuICAgICAgICAgICAgOiBkZWZhdWx0c18xLkRFRkFVTFRfU1RZTEVfRklMRV9OQU1FU1t0eXBlXSxcbiAgICAgICAgY29udGVudDogY29udGVudFxuICAgIH0pO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgdGhlIGNvbnRlbnQgb2YgdGhlIGV4cG9ydGVkIHRva2VuIG9iamVjdC5cbiAqIFRoaXMgb2JqZWN0IHByb3ZpZGVzIGEgdHlwZS1zYWZlIHdheSB0byBhY2Nlc3MgdG9rZW4gdmFsdWVzIHRocm91Z2ggdGhlaXIgZ2VuZXJhdGVkIG5hbWVzLlxuICpcbiAqIEZlYXR1cmVzOlxuICogLSBNYWludGFpbnMgdG9rZW4gZ3JvdXBpbmcgc3RydWN0dXJlXG4gKiAtIEluY2x1ZGVzIHRva2VuIGRlc2NyaXB0aW9ucyBhcyBKU0RvYyBjb21tZW50c1xuICogLSBTdXBwb3J0cyBhbHBoYWJldGljYWwgc29ydGluZyB3aGVuIGNvbmZpZ3VyZWRcbiAqIC0gUHJvcGVybHkgaW5kZW50cyBhY2NvcmRpbmcgdG8gY29uZmlndXJhdGlvblxuICpcbiAqIEBwYXJhbSB0b2tlbnMgLSBBcnJheSBvZiB0b2tlbnMgdG8gaW5jbHVkZSBpbiB0aGUgb2JqZWN0XG4gKiBAcGFyYW0gdG9rZW5Hcm91cHMgLSBBcnJheSBvZiB0b2tlbiBncm91cHMgZm9yIG1haW50YWluaW5nIGhpZXJhcmNoeVxuICogQHJldHVybnMgRm9ybWF0dGVkIHN0cmluZyBjb250YWluaW5nIHRoZSBvYmplY3QncyBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlVG9rZW5PYmplY3QodG9rZW5zLCB0b2tlbkdyb3Vwcykge1xuICAgIGNvbnN0IGluZGVudFN0cmluZyA9IGV4cG9ydF91dGlsc18xLkdlbmVyYWxIZWxwZXIuaW5kZW50KF9fMS5leHBvcnRDb25maWd1cmF0aW9uLmluZGVudCk7XG4gICAgLy8gQ3JlYXRlIGEgY29weSBvZiB0b2tlbnMgYXJyYXkgZm9yIHNvcnRpbmdcbiAgICBsZXQgc29ydGVkVG9rZW5zID0gWy4uLnRva2Vuc107XG4gICAgLy8gU29ydCB0b2tlbnMgYWxwaGFiZXRpY2FsbHkgaWYgY29uZmlndXJlZFxuICAgIC8vIFRoaXMgY2FuIG1ha2UgaXQgZWFzaWVyIHRvIGZpbmQgdG9rZW5zIGluIHRoZSBnZW5lcmF0ZWQgZmlsZXNcbiAgICBpZiAoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5Tb3J0T3JkZXIgPT09ICdhbHBoYWJldGljYWwnKSB7XG4gICAgICAgIHNvcnRlZFRva2Vucy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lQSA9ICgwLCB0b2tlbl8xLnRva2VuT2JqZWN0S2V5TmFtZSkoYSwgdG9rZW5Hcm91cHMsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgbmFtZUIgPSAoMCwgdG9rZW5fMS50b2tlbk9iamVjdEtleU5hbWUpKGIsIHRva2VuR3JvdXBzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lQS5sb2NhbGVDb21wYXJlKG5hbWVCKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEdlbmVyYXRlIHRoZSBvYmplY3QgcHJvcGVydGllcywgaW5jbHVkaW5nIGRlc2NyaXB0aW9ucyBhcyBKU0RvYyBjb21tZW50c1xuICAgIHJldHVybiBzb3J0ZWRUb2tlbnMubWFwKHRva2VuID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9ICgwLCB0b2tlbl8xLnRva2VuT2JqZWN0S2V5TmFtZSkodG9rZW4sIHRva2VuR3JvdXBzLCB0cnVlKTtcbiAgICAgICAgaWYgKHRva2VuLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7aW5kZW50U3RyaW5nfS8qKiAke3Rva2VuLmRlc2NyaXB0aW9uLnRyaW0oKX0gKi9cXG4ke2luZGVudFN0cmluZ30ke25hbWV9LGA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke2luZGVudFN0cmluZ30ke25hbWV9LGA7XG4gICAgfSkuam9pbignXFxuJyk7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHNpbmdsZSBjb21iaW5lZCBKU09OIGZpbGUgY29udGFpbmluZyBhbGwgdG9rZW4gdHlwZXMuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiBmaWxlU3RydWN0dXJlIGlzIHNldCB0byAnc2luZ2xlRmlsZScuXG4gKlxuICogRmVhdHVyZXM6XG4gKiAtIENvbWJpbmVzIGFsbCB0b2tlbiB0eXBlcyBpbnRvIGEgc2luZ2xlIGZpbGVcbiAqIC0gTWFpbnRhaW5zIHRva2VuIHR5cGUgZ3JvdXBpbmcgaW4gdGhlIG91dHB1dFxuICogLSBTdXBwb3J0cyB0aGVtaW5nXG4gKiAtIEluY2x1ZGVzIHRva2VuIGRlc2NyaXB0aW9uc1xuICogLSBQbGFjZXMgZmlsZXMgZGlyZWN0bHkgaW4gcm9vdCB3aXRoIHRoZW1lLWJhc2VkIG5hbWVzXG4gKlxuICogT3V0cHV0IHN0cnVjdHVyZSBleGFtcGxlczpcbiAqIC0gTm8gdGhlbWVzOiB0b2tlbnMuanNvblxuICogLSBTZXBhcmF0ZSB0aGVtZSBmaWxlczogdG9rZW5zLmpzb24sIHRva2Vucy5saWdodC5qc29uLCB0b2tlbnMuZGFyay5qc29uXG4gKiAtIE1lcmdlZCB0aGVtZXM6IHRva2Vucy5qc29uLCB0b2tlbnMudGhlbWVkLmpzb25cbiAqIC0gTmVzdGVkIHRoZW1lczogdG9rZW5zLmpzb24gKHdpdGggYWxsIHRoZW1lcyBuZXN0ZWQgaW5zaWRlKVxuICpcbiAqIEBwYXJhbSB0b2tlbnMgLSBBcnJheSBvZiBhbGwgdG9rZW5zXG4gKiBAcGFyYW0gdG9rZW5Hcm91cHMgLSBBcnJheSBvZiB0b2tlbiBncm91cHMgZm9yIGhpZXJhcmNoeVxuICogQHBhcmFtIHRoZW1lUGF0aCAtIE9wdGlvbmFsIHRoZW1lIHBhdGggZm9yIHRoZW1lZCBmaWxlc1xuICogQHBhcmFtIHRoZW1lIC0gT3B0aW9uYWwgdGhlbWUgY29uZmlndXJhdGlvblxuICogQHBhcmFtIGNvbGxlY3Rpb25zIC0gQXJyYXkgb2YgZGVzaWduIHN5c3RlbSBjb2xsZWN0aW9uc1xuICogQHJldHVybnMgT3V0cHV0VGV4dEZpbGUgd2l0aCB0aGUgY29tYmluZWQgY29udGVudCBvciBudWxsIGlmIG5vIG91dHB1dCBzaG91bGQgYmUgZ2VuZXJhdGVkXG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVkU3R5bGVPdXRwdXRGaWxlKHRva2VucywgdG9rZW5Hcm91cHMsIHRoZW1lUGF0aCA9ICcnLCB0aGVtZSwgY29sbGVjdGlvbnMgPSBbXSkge1xuICAgIC8vIFNraXAgZ2VuZXJhdGluZyBiYXNlIHRva2VuIGZpbGVzIHVubGVzczpcbiAgICAvLyAtIEJhc2UgdmFsdWVzIGFyZSBleHBsaWNpdGx5IGVuYWJsZWQgdmlhIGV4cG9ydEJhc2VWYWx1ZXMsIG9yXG4gICAgLy8gLSBXZSdyZSBnZW5lcmF0aW5nIHRoZW1lZCBmaWxlcyAodGhlbWVQYXRoIGlzIHByZXNlbnQpLCBvclxuICAgIC8vIC0gV2UncmUgdXNpbmcgbmVzdGVkIHRoZW1lcyBmb3JtYXRcbiAgICBpZiAoIV9fMS5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXMgJiYgIXRoZW1lUGF0aCAmJlxuICAgICAgICBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRUaGVtZXNBcyAhPT0gY29uZmlnXzEuVGhlbWVFeHBvcnRTdHlsZS5OZXN0ZWRUaGVtZXMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIFN0b3JlIG9yaWdpbmFsIHRva2VucyBmb3IgcmVmZXJlbmNlIHJlc29sdXRpb25cbiAgICBjb25zdCBvcmlnaW5hbFRva2VucyA9IFsuLi50b2tlbnNdO1xuICAgIC8vIEZvciB0aGVtZWQgdG9rZW4gZmlsZXM6XG4gICAgLy8gLSBGaWx0ZXIgdG8gb25seSBpbmNsdWRlIHRva2VucyB0aGF0IGFyZSBvdmVycmlkZGVuIGluIHRoaXMgdGhlbWVcbiAgICAvLyAtIFNraXAgZ2VuZXJhdGluZyB0aGUgZmlsZSBpZiBubyB0b2tlbnMgYXJlIHRoZW1lZCAod2hlbiBjb25maWd1cmVkKVxuICAgIGlmICh0aGVtZVBhdGggJiYgdGhlbWUgJiYgX18xLmV4cG9ydENvbmZpZ3VyYXRpb24uZXhwb3J0T25seVRoZW1lZFRva2Vucykge1xuICAgICAgICB0b2tlbnMgPSBleHBvcnRfdXRpbHNfMS5UaGVtZUhlbHBlci5maWx0ZXJUaGVtZWRUb2tlbnModG9rZW5zLCB0aGVtZSk7XG4gICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFsbCB0b2tlbnMgaW50byBhIGNvbGxlY3Rpb24tYmFzZWQgc3RydWN0dXJlZCBvYmplY3RcbiAgICAvLyBQYXNzIHRoZSBvcmlnaW5hbCB0b2tlbnMgYXJyYXkgZm9yIHJlZmVyZW5jZSByZXNvbHV0aW9uXG4gICAgY29uc3QgdG9rZW5PYmplY3QgPSBncm91cFRva2Vuc0J5Q29sbGVjdGlvbih0b2tlbnMsIHRva2VuR3JvdXBzLCB0aGVtZSwgY29sbGVjdGlvbnMsIG9yaWdpbmFsVG9rZW5zKTtcbiAgICBpZiAoIXRva2VuT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBHZW5lcmF0ZSB0aGUgZmluYWwgSlNPTiBjb250ZW50IHdpdGggcHJvcGVyIGluZGVudGF0aW9uXG4gICAgY29uc3QgY29udGVudCA9IEpTT04uc3RyaW5naWZ5KHRva2VuT2JqZWN0LCBudWxsLCBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi5pbmRlbnQpO1xuICAgIC8vIEZvciBzaW5nbGUgZmlsZSBtb2RlLCB0aGVtZWQgZmlsZXMgZ28gZGlyZWN0bHkgaW4gcm9vdCB3aXRoIHRoZW1lLWJhc2VkIG5hbWVzXG4gICAgY29uc3QgZmlsZU5hbWUgPSB0aGVtZVBhdGggPyBgdG9rZW5zLiR7dGhlbWVQYXRofS5qc29uYCA6ICd0b2tlbnMuanNvbic7XG4gICAgY29uc3QgcmVsYXRpdmVQYXRoID0gJy4vJzsgLy8gUHV0IGZpbGVzIGRpcmVjdGx5IGluIHJvb3QgZm9sZGVyXG4gICAgLy8gQ3JlYXRlIGFuZCByZXR1cm4gdGhlIG91dHB1dCBmaWxlXG4gICAgcmV0dXJuIGV4cG9ydF91dGlsc18xLkZpbGVIZWxwZXIuY3JlYXRlVGV4dEZpbGUoe1xuICAgICAgICByZWxhdGl2ZVBhdGg6IHJlbGF0aXZlUGF0aCxcbiAgICAgICAgZmlsZU5hbWU6IGZpbGVOYW1lLFxuICAgICAgICBjb250ZW50OiBjb250ZW50XG4gICAgfSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHNka19leHBvcnRlcnNfMSA9IHJlcXVpcmUoXCJAc3VwZXJub3ZhaW8vc2RrLWV4cG9ydGVyc1wiKTtcbmNvbnN0IGNvbmZpZ18xID0gcmVxdWlyZShcIi4uL2NvbmZpZ1wiKTtcbmNvbnN0IHN0eWxlX2ZpbGVfMSA9IHJlcXVpcmUoXCIuL2ZpbGVzL3N0eWxlLWZpbGVcIik7XG5jb25zdCBleHBvcnRfdXRpbHNfMSA9IHJlcXVpcmUoXCJAc3VwZXJub3ZhaW8vZXhwb3J0LXV0aWxzXCIpO1xuY29uc3QgdG9rZW5faGllcmFyY2h5XzEgPSByZXF1aXJlKFwiLi91dGlscy90b2tlbi1oaWVyYXJjaHlcIik7XG4vKiogRXhwb3J0ZXIgY29uZmlndXJhdGlvbiBmcm9tIHRoZSByZXNvbHZlZCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gYW5kIHVzZXIgb3ZlcnJpZGVzICovXG5leHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24gPSBQdWxzYXIuZXhwb3J0Q29uZmlnKCk7XG4vKipcbiAqIEZpbHRlcnMgb3V0IG51bGwgdmFsdWVzIGZyb20gYW4gYXJyYXkgb2Ygb3V0cHV0IGZpbGVzXG4gKiBAcGFyYW0gZmlsZXMgQXJyYXkgb2Ygb3V0cHV0IGZpbGVzIHRoYXQgbWF5IGNvbnRhaW4gbnVsbCB2YWx1ZXNcbiAqIEByZXR1cm5zIEFycmF5IG9mIG5vbi1udWxsIG91dHB1dCBmaWxlc1xuICovXG5mdW5jdGlvbiBwcm9jZXNzT3V0cHV0RmlsZXMoZmlsZXMpIHtcbiAgICByZXR1cm4gZmlsZXMuZmlsdGVyKChmaWxlKSA9PiBmaWxlICE9PSBudWxsKTtcbn1cbi8qKlxuICogTWFpbiBleHBvcnQgZnVuY3Rpb24gdGhhdCBnZW5lcmF0ZXMgQ1NTIGZpbGVzIGZyb20gZGVzaWduIHRva2Vuc1xuICpcbiAqIFRoaXMgZnVuY3Rpb24gaGFuZGxlczpcbiAqIC0gRmV0Y2hpbmcgdG9rZW5zIGFuZCB0b2tlbiBncm91cHMgZnJvbSB0aGUgZGVzaWduIHN5c3RlbVxuICogLSBGaWx0ZXJpbmcgdG9rZW5zIGJ5IGJyYW5kIGlmIHNwZWNpZmllZFxuICogLSBQcm9jZXNzaW5nIHRoZW1lcyBpbiBkaWZmZXJlbnQgbW9kZXMgKGRpcmVjdCwgc2VwYXJhdGUgZmlsZXMsIG9yIGNvbWJpbmVkKVxuICogLSBHZW5lcmF0aW5nIHN0eWxlIGZpbGVzIGZvciBlYWNoIHRva2VuIHR5cGVcbiAqXG4gKiBAcGFyYW0gc2RrIC0gU3VwZXJub3ZhIFNESyBpbnN0YW5jZVxuICogQHBhcmFtIGNvbnRleHQgLSBFeHBvcnQgY29udGV4dCBjb250YWluaW5nIGRlc2lnbiBzeXN0ZW0gaW5mb3JtYXRpb25cbiAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGFuIGFycmF5IG9mIG91dHB1dCBmaWxlc1xuICovXG5QdWxzYXIuZXhwb3J0KGFzeW5jIChzZGssIGNvbnRleHQpID0+IHtcbiAgICAvLyBGZXRjaCBkYXRhIGZyb20gZGVzaWduIHN5c3RlbSB0aGF0IGlzIGN1cnJlbnRseSBiZWluZyBleHBvcnRlZFxuICAgIGNvbnN0IHJlbW90ZVZlcnNpb25JZGVudGlmaWVyID0ge1xuICAgICAgICBkZXNpZ25TeXN0ZW1JZDogY29udGV4dC5kc0lkLFxuICAgICAgICB2ZXJzaW9uSWQ6IGNvbnRleHQudmVyc2lvbklkLFxuICAgIH07XG4gICAgLy8gRmV0Y2ggdG9rZW5zLCBncm91cHMgYW5kIGNvbGxlY3Rpb25zXG4gICAgbGV0IHRva2VucyA9IGF3YWl0IHNkay50b2tlbnMuZ2V0VG9rZW5zKHJlbW90ZVZlcnNpb25JZGVudGlmaWVyKTtcbiAgICBsZXQgdG9rZW5Hcm91cHMgPSBhd2FpdCBzZGsudG9rZW5zLmdldFRva2VuR3JvdXBzKHJlbW90ZVZlcnNpb25JZGVudGlmaWVyKTtcbiAgICBsZXQgdG9rZW5Db2xsZWN0aW9ucyA9IGF3YWl0IHNkay50b2tlbnMuZ2V0VG9rZW5Db2xsZWN0aW9ucyhyZW1vdGVWZXJzaW9uSWRlbnRpZmllcik7XG4gICAgLy8gRmlsdGVyIGJ5IGJyYW5kIGlmIHNwZWNpZmllZFxuICAgIGlmIChjb250ZXh0LmJyYW5kSWQpIHtcbiAgICAgICAgY29uc3QgYnJhbmRzID0gYXdhaXQgc2RrLmJyYW5kcy5nZXRCcmFuZHMocmVtb3RlVmVyc2lvbklkZW50aWZpZXIpO1xuICAgICAgICBjb25zdCBicmFuZCA9IGJyYW5kcy5maW5kKChicmFuZCkgPT4gYnJhbmQuaWQgPT09IGNvbnRleHQuYnJhbmRJZCB8fCBicmFuZC5pZEluVmVyc2lvbiA9PT0gY29udGV4dC5icmFuZElkKTtcbiAgICAgICAgaWYgKCFicmFuZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBicmFuZCAke2NvbnRleHQuYnJhbmRJZH0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW5zID0gdG9rZW5zLmZpbHRlcigodG9rZW4pID0+IHRva2VuLmJyYW5kSWQgPT09IGJyYW5kLmlkKTtcbiAgICAgICAgdG9rZW5Hcm91cHMgPSB0b2tlbkdyb3Vwcy5maWx0ZXIoKHRva2VuR3JvdXApID0+IHRva2VuR3JvdXAuYnJhbmRJZCA9PT0gYnJhbmQuaWQpO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIHRoZW1lcyBpZiBzcGVjaWZpZWRcbiAgICBpZiAoY29udGV4dC50aGVtZUlkcyAmJiBjb250ZXh0LnRoZW1lSWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgdGhlbWVzID0gYXdhaXQgc2RrLnRva2Vucy5nZXRUb2tlblRoZW1lcyhyZW1vdGVWZXJzaW9uSWRlbnRpZmllcik7XG4gICAgICAgIGNvbnN0IHRoZW1lc1RvQXBwbHkgPSBjb250ZXh0LnRoZW1lSWRzLm1hcCgodGhlbWVJZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGhlbWUgPSB0aGVtZXMuZmluZCgodGhlbWUpID0+IHRoZW1lLmlkID09PSB0aGVtZUlkIHx8IHRoZW1lLmlkSW5WZXJzaW9uID09PSB0aGVtZUlkKTtcbiAgICAgICAgICAgIGlmICghdGhlbWUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBmaW5kIHRoZW1lICR7dGhlbWVJZH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGVtZTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFByb2Nlc3MgdGhlbWVzIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBleHBvcnQgc3R5bGVcbiAgICAgICAgc3dpdGNoIChleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZXhwb3J0VGhlbWVzQXMpIHtcbiAgICAgICAgICAgIGNhc2UgY29uZmlnXzEuVGhlbWVFeHBvcnRTdHlsZS5OZXN0ZWRUaGVtZXM6XG4gICAgICAgICAgICAgICAgaWYgKGV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbi5maWxlU3RydWN0dXJlID09PSBjb25maWdfMS5GaWxlU3RydWN0dXJlLlNpbmdsZUZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIHNpbmdsZSBmaWxlIHN0cnVjdHVyZSwgd2UgZ2VuZXJhdGUgb25lIGNvbWJpbmVkIGZpbGUgdGhhdCBjb250YWlucyBhbGwgdG9rZW4gdHlwZXNcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZUZpbGUgPSAoMCwgc3R5bGVfZmlsZV8xLmNvbWJpbmVkU3R5bGVPdXRwdXRGaWxlKSh0b2tlbnMsIHRva2VuR3JvdXBzLCAnJywgdW5kZWZpbmVkLCB0b2tlbkNvbGxlY3Rpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NPdXRwdXRGaWxlcyhbYmFzZUZpbGVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgb25lIGZpbGUgcGVyIHRva2VuIHR5cGUgd2l0aCBhbGwgdGhlbWVzIG5lc3RlZCBpbnNpZGUgZWFjaCB0b2tlblxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlT2JqZWN0RmlsZXMgPSBPYmplY3QudmFsdWVzKHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRmlyc3QsIGNyZWF0ZSBhIGZpbGUgd2l0aCBiYXNlIHZhbHVlcyBpZiBlbmFibGVkXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VGaWxlID0gZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKDAsIHN0eWxlX2ZpbGVfMS5zdHlsZU91dHB1dEZpbGUpKHR5cGUsIHRva2VucywgdG9rZW5Hcm91cHMsICcnLCB1bmRlZmluZWQsIHRva2VuQ29sbGVjdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZW4gY3JlYXRlIGZpbGVzIGZvciBlYWNoIHRoZW1lXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lRmlsZXMgPSB0aGVtZXNUb0FwcGx5Lm1hcCgodGhlbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lZFRva2VucyA9IHNkay50b2tlbnMuY29tcHV0ZVRva2Vuc0J5QXBwbHlpbmdUaGVtZXModG9rZW5zLCB0b2tlbnMsIFt0aGVtZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzcyBmYWxzZSBmb3IgZXhwb3J0QmFzZVZhbHVlcyB0byBwcmV2ZW50IGluY2x1ZGluZyBiYXNlIHZhbHVlcyBpbiB0aGVtZSBmaWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxFeHBvcnRCYXNlVmFsdWVzID0gZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZXhwb3J0QmFzZVZhbHVlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9ICgwLCBzdHlsZV9maWxlXzEuc3R5bGVPdXRwdXRGaWxlKSh0eXBlLCB0aGVtZWRUb2tlbnMsIHRva2VuR3JvdXBzLCAnJywgdGhlbWUsIHRva2VuQ29sbGVjdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXMgPSBvcmlnaW5hbEV4cG9ydEJhc2VWYWx1ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1lcmdlIGFsbCBmaWxlcywgc3RhcnRpbmcgd2l0aCB0aGUgYmFzZSBmaWxlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbYmFzZUZpbGUsIC4uLnRoZW1lRmlsZXNdLnJlZHVjZSgobWVyZ2VkLCBmaWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWVyZ2VkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVyZ2UgdGhlIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZENvbnRlbnQgPSAoMCwgdG9rZW5faGllcmFyY2h5XzEuZGVlcE1lcmdlKShKU09OLnBhcnNlKG1lcmdlZC5jb250ZW50KSwgSlNPTi5wYXJzZShmaWxlLmNvbnRlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiBhIG5ldyBmaWxlIHdpdGggbWVyZ2VkIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBKU09OLnN0cmluZ2lmeShtZXJnZWRDb250ZW50LCBudWxsLCBleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uaW5kZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NPdXRwdXRGaWxlcyh2YWx1ZU9iamVjdEZpbGVzKTtcbiAgICAgICAgICAgIGNhc2UgY29uZmlnXzEuVGhlbWVFeHBvcnRTdHlsZS5TZXBhcmF0ZUZpbGVzOlxuICAgICAgICAgICAgICAgIGlmIChleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZmlsZVN0cnVjdHVyZSA9PT0gY29uZmlnXzEuRmlsZVN0cnVjdHVyZS5TaW5nbGVGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIG9uZSBjb21iaW5lZCBmaWxlIHBlciB0aGVtZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGVtZUZpbGVzID0gdGhlbWVzVG9BcHBseS5tYXAoKHRoZW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGVtZWRUb2tlbnMgPSBzZGsudG9rZW5zLmNvbXB1dGVUb2tlbnNCeUFwcGx5aW5nVGhlbWVzKHRva2VucywgdG9rZW5zLCBbdGhlbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lUGF0aCA9IGV4cG9ydF91dGlsc18xLlRoZW1lSGVscGVyLmdldFRoZW1lSWRlbnRpZmllcih0aGVtZSwgZXhwb3J0X3V0aWxzXzEuU3RyaW5nQ2FzZS5jYW1lbENhc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBzdHlsZV9maWxlXzEuY29tYmluZWRTdHlsZU91dHB1dEZpbGUpKHRoZW1lZFRva2VucywgdG9rZW5Hcm91cHMsIHRoZW1lUGF0aCwgdGhlbWUsIHRva2VuQ29sbGVjdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZUZpbGUgPSBleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZXhwb3J0QmFzZVZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoMCwgc3R5bGVfZmlsZV8xLmNvbWJpbmVkU3R5bGVPdXRwdXRGaWxlKSh0b2tlbnMsIHRva2VuR3JvdXBzLCAnJywgdW5kZWZpbmVkLCB0b2tlbkNvbGxlY3Rpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc091dHB1dEZpbGVzKFtiYXNlRmlsZSwgLi4udGhlbWVGaWxlc10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBzZXBhcmF0ZSBmaWxlcyBmb3IgZWFjaCB0aGVtZSBhbmQgdG9rZW4gdHlwZVxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZXMgYSBkaXJlY3Rvcnkgc3RydWN0dXJlIGxpa2U6XG4gICAgICAgICAgICAgICAgLy8gYmFzZS9cbiAgICAgICAgICAgICAgICAvLyAgIOKUnOKUgOKUgCBjb2xvci5qc29uXG4gICAgICAgICAgICAgICAgLy8gICDilJTilIDilIAgdHlwb2dyYXBoeS5qc29uXG4gICAgICAgICAgICAgICAgLy8gbGlnaHQvXG4gICAgICAgICAgICAgICAgLy8gICDilJzilIDilIAgY29sb3IuanNvblxuICAgICAgICAgICAgICAgIC8vICAg4pSU4pSA4pSAIHR5cG9ncmFwaHkuanNvblxuICAgICAgICAgICAgICAgIC8vIGRhcmsvXG4gICAgICAgICAgICAgICAgLy8gICDilJzilIDilIAgY29sb3IuanNvblxuICAgICAgICAgICAgICAgIC8vICAg4pSU4pSA4pSAIHR5cG9ncmFwaHkuanNvblxuICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lRmlsZXMgPSB0aGVtZXNUb0FwcGx5LmZsYXRNYXAoKHRoZW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lZFRva2VucyA9IHNkay50b2tlbnMuY29tcHV0ZVRva2Vuc0J5QXBwbHlpbmdUaGVtZXModG9rZW5zLCB0b2tlbnMsIFt0aGVtZV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGVtZVBhdGggPSBleHBvcnRfdXRpbHNfMS5UaGVtZUhlbHBlci5nZXRUaGVtZUlkZW50aWZpZXIodGhlbWUsIGV4cG9ydF91dGlsc18xLlN0cmluZ0Nhc2UuY2FtZWxDYXNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoc2RrX2V4cG9ydGVyc18xLlRva2VuVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHR5cGUpID0+ICgwLCBzdHlsZV9maWxlXzEuc3R5bGVPdXRwdXRGaWxlKSh0eXBlLCB0aGVtZWRUb2tlbnMsIHRva2VuR3JvdXBzLCB0aGVtZVBhdGgsIHRoZW1lLCB0b2tlbkNvbGxlY3Rpb25zKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZUZpbGVzID0gZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgPyBPYmplY3QudmFsdWVzKHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKCh0eXBlKSA9PiAoMCwgc3R5bGVfZmlsZV8xLnN0eWxlT3V0cHV0RmlsZSkodHlwZSwgdG9rZW5zLCB0b2tlbkdyb3VwcywgJycsIHVuZGVmaW5lZCwgdG9rZW5Db2xsZWN0aW9ucykpXG4gICAgICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NPdXRwdXRGaWxlcyhbXG4gICAgICAgICAgICAgICAgICAgIC4uLmJhc2VGaWxlcyxcbiAgICAgICAgICAgICAgICAgICAgLi4udGhlbWVGaWxlc1xuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgY2FzZSBjb25maWdfMS5UaGVtZUV4cG9ydFN0eWxlLk1lcmdlZFRoZW1lOlxuICAgICAgICAgICAgICAgIGlmIChleHBvcnRzLmV4cG9ydENvbmZpZ3VyYXRpb24uZmlsZVN0cnVjdHVyZSA9PT0gY29uZmlnXzEuRmlsZVN0cnVjdHVyZS5TaW5nbGVGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VGaWxlID0gZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmV4cG9ydEJhc2VWYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKDAsIHN0eWxlX2ZpbGVfMS5jb21iaW5lZFN0eWxlT3V0cHV0RmlsZSkodG9rZW5zLCB0b2tlbkdyb3VwcywgJycsIHVuZGVmaW5lZCwgdG9rZW5Db2xsZWN0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhlbWVkVG9rZW5zID0gc2RrLnRva2Vucy5jb21wdXRlVG9rZW5zQnlBcHBseWluZ1RoZW1lcyh0b2tlbnMsIHRva2VucywgdGhlbWVzVG9BcHBseSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZFRoZW1lRmlsZSA9ICgwLCBzdHlsZV9maWxlXzEuY29tYmluZWRTdHlsZU91dHB1dEZpbGUpKHRoZW1lZFRva2VucywgdG9rZW5Hcm91cHMsICd0aGVtZWQnLCB0aGVtZXNUb0FwcGx5WzBdLCB0b2tlbkNvbGxlY3Rpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NPdXRwdXRGaWxlcyhbYmFzZUZpbGUsIG1lcmdlZFRoZW1lRmlsZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBvbmUgZmlsZSBwZXIgdG9rZW4gdHlwZSB3aXRoIGFsbCB0aGVtZXMgYXBwbGllZCB0b2dldGhlclxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCB3aGVuIHRoZW1lcyBzaG91bGQgYmUgbWVyZ2VkIGluIGEgc3BlY2lmaWMgb3JkZXJcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGVzIGEgZGlyZWN0b3J5IHN0cnVjdHVyZSBsaWtlOlxuICAgICAgICAgICAgICAgIC8vIGJhc2UvICAgICAgICAgICAgICAoaWYgZXhwb3J0QmFzZVZhbHVlcyBpcyB0cnVlKVxuICAgICAgICAgICAgICAgIC8vICAg4pSc4pSA4pSAIGNvbG9yLmpzb25cbiAgICAgICAgICAgICAgICAvLyAgIOKUlOKUgOKUgCB0eXBvZ3JhcGh5Lmpzb25cbiAgICAgICAgICAgICAgICAvLyB0aGVtZWQvXG4gICAgICAgICAgICAgICAgLy8gICDilJzilIDilIAgY29sb3IuanNvbiAgIChjb250YWlucyB2YWx1ZXMgYWZ0ZXIgYXBwbHlpbmcgYWxsIHRoZW1lcylcbiAgICAgICAgICAgICAgICAvLyAgIOKUlOKUgOKUgCB0eXBvZ3JhcGh5Lmpzb25cbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlVG9rZW5GaWxlcyA9IGV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRCYXNlVmFsdWVzXG4gICAgICAgICAgICAgICAgICAgID8gT2JqZWN0LnZhbHVlcyhzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgodHlwZSkgPT4gKDAsIHN0eWxlX2ZpbGVfMS5zdHlsZU91dHB1dEZpbGUpKHR5cGUsIHRva2VucywgdG9rZW5Hcm91cHMsICcnLCB1bmRlZmluZWQsIHRva2VuQ29sbGVjdGlvbnMpKVxuICAgICAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lZFRva2VucyA9IHNkay50b2tlbnMuY29tcHV0ZVRva2Vuc0J5QXBwbHlpbmdUaGVtZXModG9rZW5zLCB0b2tlbnMsIHRoZW1lc1RvQXBwbHkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZFRoZW1lRmlsZXMgPSBPYmplY3QudmFsdWVzKHNka19leHBvcnRlcnNfMS5Ub2tlblR5cGUpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHR5cGUpID0+ICgwLCBzdHlsZV9maWxlXzEuc3R5bGVPdXRwdXRGaWxlKSh0eXBlLCB0aGVtZWRUb2tlbnMsIHRva2VuR3JvdXBzLCAndGhlbWVkJywgdGhlbWVzVG9BcHBseVswXSwgdG9rZW5Db2xsZWN0aW9ucykpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZEZpbGVzID0gW1xuICAgICAgICAgICAgICAgICAgICAuLi5iYXNlVG9rZW5GaWxlcyxcbiAgICAgICAgICAgICAgICAgICAgLi4ubWVyZ2VkVGhlbWVGaWxlc1xuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NPdXRwdXRGaWxlcyhtZXJnZWRGaWxlcyk7XG4gICAgICAgICAgICBjYXNlIGNvbmZpZ18xLlRoZW1lRXhwb3J0U3R5bGUuQXBwbHlEaXJlY3RseTpcbiAgICAgICAgICAgICAgICAvLyBBcHBseSB0aGVtZSB2YWx1ZXMgZGlyZWN0bHkgdG8gdG9rZW5zLCByZXBsYWNpbmcgYmFzZSB2YWx1ZXNcbiAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZXMgb25lIHNldCBvZiBmaWxlcyBhdCByb290IGxldmVsOlxuICAgICAgICAgICAgICAgIC8vIOKUnOKUgOKUgCBjb2xvci5qc29uICAgICAoY29udGFpbnMgdGhlbWVkIHZhbHVlcylcbiAgICAgICAgICAgICAgICAvLyDilJzilIDilIAgdHlwb2dyYXBoeS5qc29uXG4gICAgICAgICAgICAgICAgLy8g4pSU4pSA4pSAIC4uLlxuICAgICAgICAgICAgICAgIHRva2VucyA9IHNkay50b2tlbnMuY29tcHV0ZVRva2Vuc0J5QXBwbHlpbmdUaGVtZXModG9rZW5zLCB0b2tlbnMsIHRoZW1lc1RvQXBwbHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIERlZmF1bHQgY2FzZTogR2VuZXJhdGUgZmlsZXMgd2l0aG91dCB0aGVtZXNcbiAgICBpZiAoZXhwb3J0cy5leHBvcnRDb25maWd1cmF0aW9uLmZpbGVTdHJ1Y3R1cmUgPT09IGNvbmZpZ18xLkZpbGVTdHJ1Y3R1cmUuU2luZ2xlRmlsZSkge1xuICAgICAgICBjb25zdCBkZWZhdWx0RmlsZSA9IGV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRCYXNlVmFsdWVzXG4gICAgICAgICAgICA/ICgwLCBzdHlsZV9maWxlXzEuY29tYmluZWRTdHlsZU91dHB1dEZpbGUpKHRva2VucywgdG9rZW5Hcm91cHMsICcnLCB1bmRlZmluZWQsIHRva2VuQ29sbGVjdGlvbnMpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHJldHVybiBwcm9jZXNzT3V0cHV0RmlsZXMoW2RlZmF1bHRGaWxlXSk7XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRGaWxlcyA9IGV4cG9ydHMuZXhwb3J0Q29uZmlndXJhdGlvbi5leHBvcnRCYXNlVmFsdWVzXG4gICAgICAgID8gT2JqZWN0LnZhbHVlcyhzZGtfZXhwb3J0ZXJzXzEuVG9rZW5UeXBlKVxuICAgICAgICAgICAgLm1hcCgodHlwZSkgPT4gKDAsIHN0eWxlX2ZpbGVfMS5zdHlsZU91dHB1dEZpbGUpKHR5cGUsIHRva2VucywgdG9rZW5Hcm91cHMsICcnLCB1bmRlZmluZWQsIHRva2VuQ29sbGVjdGlvbnMpKVxuICAgICAgICA6IFtdO1xuICAgIHJldHVybiBwcm9jZXNzT3V0cHV0RmlsZXMoZGVmYXVsdEZpbGVzKTtcbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlc2V0TmFtZVRyYWNraW5nID0gcmVzZXROYW1lVHJhY2tpbmc7XG5leHBvcnRzLnByb2Nlc3NUb2tlbk5hbWUgPSBwcm9jZXNzVG9rZW5OYW1lO1xuZXhwb3J0cy5jcmVhdGVIaWVyYXJjaGljYWxTdHJ1Y3R1cmUgPSBjcmVhdGVIaWVyYXJjaGljYWxTdHJ1Y3R1cmU7XG5leHBvcnRzLmRlZXBNZXJnZSA9IGRlZXBNZXJnZTtcbmNvbnN0IGV4cG9ydF91dGlsc18xID0gcmVxdWlyZShcIkBzdXBlcm5vdmFpby9leHBvcnQtdXRpbHNcIik7XG5jb25zdCBfXzEgPSByZXF1aXJlKFwiLi5cIik7XG5jb25zdCB0b2tlbl8xID0gcmVxdWlyZShcIi4uL2NvbnRlbnQvdG9rZW5cIik7XG4vLyBDcmVhdGUgYSBzaW5nbGUgaW5zdGFuY2Ugb2YgdGhlIHRyYWNrZXIgZm9yIGNvbnNpc3RlbnQgbmFtZSBnZW5lcmF0aW9uXG5jb25zdCB0b2tlbk5hbWVUcmFja2VyID0gbmV3IGV4cG9ydF91dGlsc18xLlRva2VuTmFtZVRyYWNrZXIoKTtcbi8qKlxuICogUmVzZXQgdGhlIG5hbWUgdHJhY2tpbmcgYmV0d2VlbiBmaWxlIGdlbmVyYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHJlc2V0TmFtZVRyYWNraW5nKCkge1xuICAgIHRva2VuTmFtZVRyYWNrZXIucmVzZXQoKTtcbn1cbi8qKlxuICogUHJvY2Vzc2VzIGEgdG9rZW4gbmFtZSBhY2NvcmRpbmcgdG8gb3VyIHJ1bGVzIHVzaW5nIFRva2VuTmFtZVRyYWNrZXJcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc1Rva2VuTmFtZSh0b2tlbiwgcGF0aCA9IFtdLCBjb2xsZWN0aW9ucyA9IFtdKSB7XG4gICAgLy8gR2V0IG5hbWUgZnJvbSBUb2tlbk5hbWVUcmFja2VyXG4gICAgbGV0IHRva2VuTmFtZSA9IHRva2VuTmFtZVRyYWNrZXIuZ2V0U2ltcGxlVG9rZW5OYW1lKHRva2VuLCBfXzEuZXhwb3J0Q29uZmlndXJhdGlvbi50b2tlbk5hbWVTdHlsZSwgZmFsc2UsIHBhdGgpO1xuICAgIC8vIFJlbW92ZSBsZWFkaW5nIHVuZGVyc2NvcmUgZnJvbSBhbnkgdG9rZW4gbmFtZVxuICAgIGlmICh0b2tlbk5hbWUuc3RhcnRzV2l0aCgnXycpKSB7XG4gICAgICAgIHRva2VuTmFtZSA9IHRva2VuTmFtZS5zbGljZSgxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuTmFtZTtcbn1cbi8qKlxuICogQ29udmVydHMgYSB0b2tlbidzIGZ1bGwgcGF0aCBhbmQgbmFtZSBpbnRvIGEgaGllcmFyY2hpY2FsIG9iamVjdCBzdHJ1Y3R1cmVcbiAqIEZpcnN0IGxldmVsIGlzIGFsd2F5cyB0aGUgdHlwZSBwcmVmaXggKGUuZy4gJ2NvbG9yJylcbiAqIE1pZGRsZSBsZXZlbHMgY29tZSBmcm9tIHBhdGggc2VnbWVudHNcbiAqIExhc3QgbGV2ZWwgaXMgdGhlIHRva2VuIG5hbWVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSGllcmFyY2hpY2FsU3RydWN0dXJlKHBhdGgsIG5hbWUsIHZhbHVlLCB0b2tlbiwgY29sbGVjdGlvbnMgPSBbXSwgb3B0aW9ucyA9IHsgaW5jbHVkZVR5cGVQcmVmaXg6IHRydWUgfSkge1xuICAgIC8vIEdldCBjb2xsZWN0aW9uIG5hbWUgaWYgbmVlZGVkIGZvciBjb2xsZWN0aW9uLWJhc2VkIHRva2VuIG9yZ2FuaXphdGlvblxuICAgIGxldCBjb2xsZWN0aW9uU2VnbWVudCA9IG51bGw7XG4gICAgaWYgKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0cnVjdHVyZSA9PT0gJ2NvbGxlY3Rpb25QYXRoQW5kTmFtZScgJiYgdG9rZW4uY29sbGVjdGlvbklkKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9ucy5maW5kKGMgPT4gYy5wZXJzaXN0ZW50SWQgPT09IHRva2VuLmNvbGxlY3Rpb25JZCk7XG4gICAgICAgIGNvbGxlY3Rpb25TZWdtZW50ID0gY29sbGVjdGlvbj8ubmFtZSA/PyBudWxsO1xuICAgIH1cbiAgICAvLyBCdWlsZCB0aGUgaW5pdGlhbCBzZWdtZW50cyBhcnJheVxuICAgIGNvbnN0IHNlZ21lbnRzID0gW107XG4gICAgLy8gQWRkIHR5cGUgcHJlZml4IGlmIGVuYWJsZWRcbiAgICBpZiAob3B0aW9ucy5pbmNsdWRlVHlwZVByZWZpeCkge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBleHBvcnRfdXRpbHNfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoKDAsIHRva2VuXzEuZ2V0VG9rZW5QcmVmaXgpKHRva2VuLnRva2VuVHlwZSksIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0eWxlKTtcbiAgICAgICAgaWYgKHByZWZpeClcbiAgICAgICAgICAgIHNlZ21lbnRzLnB1c2gocHJlZml4KTtcbiAgICB9XG4gICAgLy8gQWRkIGNvbGxlY3Rpb24gdG8gdGhlIG91dHB1dCBwYXRoIGlmIHByZXNlbnRcbiAgICBpZiAoY29sbGVjdGlvblNlZ21lbnQpIHtcbiAgICAgICAgc2VnbWVudHMucHVzaChleHBvcnRfdXRpbHNfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoY29sbGVjdGlvblNlZ21lbnQsIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0eWxlKSk7XG4gICAgfVxuICAgIC8vIENyZWF0ZSBwYXRoIHNlZ21lbnRzIGFycmF5IGZvciBuYW1lIHVuaXF1ZW5lc3MgY2hlY2tpbmdcbiAgICAvLyBXZSBpbmNsdWRlIHRoZSBjb2xsZWN0aW9uIG5hbWUgaGVyZSBzbyB0b2tlbnMgd2l0aCB0aGUgc2FtZSBwYXRoIGluIGRpZmZlcmVudCBjb2xsZWN0aW9uc1xuICAgIC8vIGRvbid0IGdldCB0cmVhdGVkIGFzIGR1cGxpY2F0ZXNcbiAgICBjb25zdCBwYXRoU2VnbWVudHMgPSBbXTtcbiAgICAvLyBDb2xsZWN0aW9uIG5hbWUgKGlmIGFueSkgYmVjb21lcyBwYXJ0IG9mIHRoZSB1bmlxdWVuZXNzIGNoZWNrXG4gICAgaWYgKGNvbGxlY3Rpb25TZWdtZW50KSB7XG4gICAgICAgIHBhdGhTZWdtZW50cy5wdXNoKGNvbGxlY3Rpb25TZWdtZW50KTtcbiAgICB9XG4gICAgLy8gUmVndWxhciBwYXRoIHNlZ21lbnRzIGFyZSBpbmNsdWRlZCB1bmxlc3MgbmFtZU9ubHkgc3RydWN0dXJlIGlzIHNlbGVjdGVkXG4gICAgaWYgKF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0cnVjdHVyZSAhPT0gJ25hbWVPbmx5Jykge1xuICAgICAgICBjb25zdCBmaWx0ZXJlZFBhdGggPSAocGF0aCB8fCBbXSlcbiAgICAgICAgICAgIC5maWx0ZXIoc2VnbWVudCA9PiBzZWdtZW50ICYmIHNlZ21lbnQudHJpbSgpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAubWFwKHNlZ21lbnQgPT4gZXhwb3J0X3V0aWxzXzEuTmFtaW5nSGVscGVyLmNvZGVTYWZlVmFyaWFibGVOYW1lKHNlZ21lbnQsIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0eWxlKSk7XG4gICAgICAgIHBhdGhTZWdtZW50cy5wdXNoKC4uLmZpbHRlcmVkUGF0aCk7XG4gICAgfVxuICAgIC8vIEFkZCBwYXRoIHNlZ21lbnRzIHRvIHRoZSBvdXRwdXQgc3RydWN0dXJlXG4gICAgLy8gV2UgZG9uJ3QgaW5jbHVkZSBjb2xsZWN0aW9uIGhlcmUgc2luY2UgaXQgd2FzIGFscmVhZHkgYWRkZWQgYWJvdmVcbiAgICBpZiAoX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3RydWN0dXJlICE9PSAnbmFtZU9ubHknKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkUGF0aCA9IChwYXRoIHx8IFtdKVxuICAgICAgICAgICAgLmZpbHRlcihzZWdtZW50ID0+IHNlZ21lbnQgJiYgc2VnbWVudC50cmltKCkubGVuZ3RoID4gMClcbiAgICAgICAgICAgIC5tYXAoc2VnbWVudCA9PiBleHBvcnRfdXRpbHNfMS5OYW1pbmdIZWxwZXIuY29kZVNhZmVWYXJpYWJsZU5hbWUoc2VnbWVudCwgX18xLmV4cG9ydENvbmZpZ3VyYXRpb24udG9rZW5OYW1lU3R5bGUpKTtcbiAgICAgICAgc2VnbWVudHMucHVzaCguLi5maWx0ZXJlZFBhdGgpO1xuICAgIH1cbiAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSB0b2tlbiBuYW1lIHRoYXQgY29uc2lkZXJzIHRoZSBjb2xsZWN0aW9uIGNvbnRleHRcbiAgICAvLyBUaGlzIGVuc3VyZXMgd2Ugb25seSBhZGQgbnVtYmVyaW5nIChfMSwgXzIpIHdoZW4gdGhlcmUgYXJlIGFjdHVhbCBjb25mbGljdHNcbiAgICAvLyB3aXRoaW4gdGhlIHNhbWUgY29sbGVjdGlvbiBwYXRoXG4gICAgY29uc3QgdG9rZW5OYW1lID0gdG9rZW5OYW1lVHJhY2tlci5nZXRTaW1wbGVUb2tlbk5hbWUodG9rZW4sIF9fMS5leHBvcnRDb25maWd1cmF0aW9uLnRva2VuTmFtZVN0eWxlLCBmYWxzZSwgcGF0aFNlZ21lbnRzKTtcbiAgICAvLyBBZGQgdGhlIHVuaXF1ZSB0b2tlbiBuYW1lIGFzIHRoZSBmaW5hbCBzZWdtZW50LCByZW1vdmluZyBhbnkgbGVhZGluZyB1bmRlcnNjb3JlXG4gICAgc2VnbWVudHMucHVzaCh0b2tlbk5hbWUucmVwbGFjZSgvXl8vLCAnJykpO1xuICAgIC8vIEJ1aWxkIHRoZSBuZXN0ZWQgb2JqZWN0IHN0cnVjdHVyZSBmcm9tIHRoZSBzZWdtZW50c1xuICAgIHJldHVybiBzZWdtZW50cy5yZWR1Y2VSaWdodCgobmVzdGVkVmFsdWUsIHNlZ21lbnQpID0+ICh7XG4gICAgICAgIFtzZWdtZW50XTogbmVzdGVkVmFsdWVcbiAgICB9KSwgdmFsdWUpO1xufVxuLyoqXG4gKiBEZWVwbHkgbWVyZ2VzIG9iamVjdHMgdG9nZXRoZXIsIGVuc3VyaW5nIGRlc2NyaXB0aW9ucyBhcHBlYXIgYWZ0ZXIgYWxsIG90aGVyIHByb3BlcnRpZXNcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGhhbmRsZXMgYSBzcGVjaWFsIGNhc2UgZm9yIHRva2VuIGRlc2NyaXB0aW9uczpcbiAqIDEuIEV4dHJhY3RzIGRlc2NyaXB0aW9ucyBmcm9tIGJvdGggb2JqZWN0cyBiZWluZyBtZXJnZWRcbiAqIDIuIFJlbW92ZXMgdGhlbSB0ZW1wb3JhcmlseSB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWluZyBtZXJnZWQgaW4gdGhlIG1pZGRsZVxuICogMy4gTWVyZ2VzIGFsbCBvdGhlciBwcm9wZXJ0aWVzICh0aGVtZXMsIHZhbHVlcywgZXRjLilcbiAqIDQuIEFkZHMgdGhlIGRlc2NyaXB0aW9uIGJhY2sgYXQgdGhlIHZlcnkgZW5kXG4gKlxuICogVGhpcyBlbnN1cmVzIHRoZSBvdXRwdXQgZm9ybWF0IGlzIGNvbnNpc3RlbnQ6XG4gKiB7XG4gKiAgIGJhc2U6IHsgdmFsdWU6IFwiLi4uXCIgfSxcbiAqICAgdGhlbWUtbGlnaHQ6IHsgdmFsdWU6IFwiLi4uXCIgfSxcbiAqICAgdGhlbWUtZGFyazogeyB2YWx1ZTogXCIuLi5cIiB9LFxuICogICBkZXNjcmlwdGlvbjogXCIuLi5cIiAgLy8gQWx3YXlzIGxhc3RcbiAqIH1cbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IFRhcmdldCBvYmplY3QgdG8gbWVyZ2UgaW50b1xuICogQHBhcmFtIHNvdXJjZSBTb3VyY2Ugb2JqZWN0IHRvIG1lcmdlIGZyb21cbiAqIEByZXR1cm5zIE1lcmdlZCBvYmplY3Qgd2l0aCBkZXNjcmlwdGlvbiBhdCB0aGUgZW5kXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICghdGFyZ2V0KVxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIGlmICghc291cmNlKVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIGNvbnN0IG91dHB1dCA9IHsgLi4udGFyZ2V0IH07XG4gICAgLy8gR2V0IGRlc2NyaXB0aW9uIGZyb20gZWl0aGVyIG9iamVjdCAoaWYgaXQgZXhpc3RzKVxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gc291cmNlLmRlc2NyaXB0aW9uIHx8IHRhcmdldC5kZXNjcmlwdGlvbjtcbiAgICBkZWxldGUgb3V0cHV0LmRlc2NyaXB0aW9uO1xuICAgIGRlbGV0ZSBzb3VyY2UuZGVzY3JpcHRpb247XG4gICAgLy8gTWVyZ2UgZXZlcnl0aGluZyBleGNlcHQgZGVzY3JpcHRpb25cbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKHNvdXJjZVtrZXldICYmIHR5cGVvZiBzb3VyY2Vba2V5XSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoc291cmNlW2tleV0pKSB7XG4gICAgICAgICAgICBpZiAoIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRba2V5XSA9IGRlZXBNZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEFkZCBkZXNjcmlwdGlvbiBiYWNrIGF0IHRoZSBlbmQgaWYgaXQgZXhpc3RzXG4gICAgaWYgKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIG91dHB1dC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZvcm1hdFRva2VuVmFsdWUgPSBmb3JtYXRUb2tlblZhbHVlO1xuLyoqXG4gKiBGb3JtYXRzIGEgdmFsdWUgZm9yIFN0eWxlIERpY3Rpb25hcnkgSlNPTiBvdXRwdXRcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggYSB2YWx1ZSBwcm9wZXJ0eSBhcyByZXF1aXJlZCBieSBTdHlsZSBEaWN0aW9uYXJ5XG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFRva2VuVmFsdWUodmFsdWUpIHtcbiAgICAvLyBSZW1vdmUgYW55IHRlbXBsYXRlIGxpdGVyYWwgc3ludGF4XG4gICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJyR7JykgJiYgdmFsdWUuZW5kc1dpdGgoJ30nKSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDIsIC0xKTtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIHF1b3RlcyBhcm91bmQgdmFsdWVzXG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bJ1wiXS9nLCAnJyk7XG4gICAgLy8gUmV0dXJuIHRoZSB2YWx1ZSBwcm9wZXJ0eSBvYmplY3RcbiAgICByZXR1cm4gYHsgXCJ2YWx1ZVwiOiBcIiR7dmFsdWV9XCIgfWA7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2luZGV4LnRzXCIpO1xuIl0sIm5hbWVzIjpbIkNvbG9yRm9ybWF0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTdHJpbmdDYXNlIiwiQ1NTSGVscGVyIiwic2RrX2V4cG9ydGVyc18xIiwiVG9rZW5IZWxwZXJfMSIsIkNvbG9ySGVscGVyXzEiLCJ0b2tlblRvQ1NTIiwidG9rZW4iLCJhbGxUb2tlbnMiLCJvcHRpb25zIiwiY3NzVmFsdWUiLCJ0b2tlblR5cGUiLCJUb2tlblR5cGUiLCJjb2xvciIsInRoaXMiLCJjb2xvclRva2VuVmFsdWVUb0NTUyIsImJvcmRlciIsImJvcmRlclRva2VuVmFsdWVUb0NTUyIsImdyYWRpZW50IiwiZ3JhZGllbnRUb2tlblZhbHVlVG9DU1MiLCJkaW1lbnNpb24iLCJzaXplIiwic3BhY2UiLCJvcGFjaXR5IiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwibGV0dGVyU3BhY2luZyIsInBhcmFncmFwaFNwYWNpbmciLCJib3JkZXJXaWR0aCIsInJhZGl1cyIsImR1cmF0aW9uIiwiekluZGV4IiwiZGltZW5zaW9uVG9rZW5WYWx1ZVRvQ1NTIiwic2hhZG93Iiwic2hhZG93VG9rZW5WYWx1ZVRvQ1NTIiwiZm9udFdlaWdodCIsImZvbnRXZWlnaHRUb2tlblZhbHVlVG9DU1MiLCJmb250RmFtaWx5IiwicHJvZHVjdENvcHkiLCJzdHJpbmciLCJzdHJpbmdUb2tlblZhbHVlVG9DU1MiLCJ0ZXh0Q2FzZSIsInRleHREZWNvcmF0aW9uIiwidmlzaWJpbGl0eSIsIm9wdGlvblRva2VuVmFsdWVUb0NTUyIsImJsdXIiLCJibHVyVG9rZW5WYWx1ZVRvQ1NTIiwidHlwb2dyYXBoeSIsInR5cG9ncmFwaHlUb2tlblZhbHVlVG9DU1MiLCJVbnJlYWNoYWJsZUNhc2VFcnJvciIsInZhbHVlVHJhbnNmb3JtZXIiLCJ0cmFuc2Zvcm1lZFZhbHVlIiwidW5kZWZpbmVkIiwiQ29sb3JIZWxwZXIiLCJmb3JtYXR0ZWRDb2xvck9yVmFyaWFibGVOYW1lIiwicmVmZXJlbmNlIiwic3VyZU9wdGlvbmFsUmVmZXJlbmNlIiwicmVmZXJlbmNlZFRva2VuSWQiLCJhbGxvd1JlZmVyZW5jZXMiLCJ0b2tlblRvVmFyaWFibGVSZWYiLCJkYXRhIiwid2lkdGgiLCJib3JkZXJTdHlsZVRvQ1NTIiwic3R5bGUiLCJib3JkZXJQb3NpdGlvblRvQ1NTIiwicG9zaXRpb24iLCJncmFkaWVudHMiLCJtYXAiLCJncmFkaWVudExheWVyVG9DU1MiLCJqb2luIiwiZGVsdGFYIiwicm91bmRUb0RlY2ltYWxzIiwidG8iLCJ4IiwiZGVjaW1hbHMiLCJmcm9tIiwiZGVsdGFZIiwieSIsImRlZyIsIk1hdGgiLCJhdGFuMiIsIlBJIiwiZ2V0QW5nbGUiLCJncmFkaWVudFR5cGUiLCJ0eXBlIiwiR3JhZGllbnRUeXBlIiwibGluZWFyIiwicmFkaWFsIiwiYW5ndWxhciIsInN0b3BzIiwic3RvcCIsImZvcmNlUmVtVW5pdCIsInVuaXQiLCJVbml0IiwicGl4ZWxzIiwicmVtQmFzZSIsInJlbVZhbHVlIiwibWVhc3VyZSIsInVuaXRUb0NTUyIsInNoYWRvd3MiLCJsYXllciIsInNoYWRvd0xheWVyVG9DU1MiLCJjb252ZXJ0VG9SZW0iLCJweCIsIlNoYWRvd1R5cGUiLCJpbm5lciIsInNwcmVhZCIsIm5vcm1hbGl6ZVRleHRXZWlnaHQiLCJ0ZXh0Iiwid2VpZ2h0Iiwibm9ybWFsaXplZFRleHQiLCJ0b0xvd2VyQ2FzZSIsInRyaW0iLCJudW1lcmljV2VpZ2h0IiwicGFyc2VJbnQiLCJpc05hTiIsIm9wdGlvbiIsInRleHRDYXNlVG9DU1MiLCJ0ZXh0RGVjb3JhdGlvblRvQ1NTIiwiZm9udEZhbWlseVJlZmVyZW5jZSIsImZvbnRXZWlnaHRSZWZlcmVuY2UiLCJkZWNvcmF0aW9uUmVmZXJlbmNlIiwiY2FzZVJlZmVyZW5jZSIsIlRleHREZWNvcmF0aW9uIiwib3JpZ2luYWwiLCJUZXh0Q2FzZSIsImNhcHMiLCJzbWFsbENhcHMiLCJmcmFnbWVudFNpemUiLCJib3JkZXJTdHlsZSIsIkJvcmRlclN0eWxlIiwiZGFzaGVkIiwiZG90dGVkIiwic29saWQiLCJncm9vdmUiLCJib3JkZXJQb3NpdGlvbiIsIkJvcmRlclBvc2l0aW9uIiwiY2VudGVyIiwiaW5zaWRlIiwib3V0c2lkZSIsInBlcmNlbnQiLCJyZW0iLCJyYXciLCJtcyIsInVwcGVyIiwibG93ZXIiLCJjYW1lbCIsInVuZGVybGluZSIsInN0cmlrZXRocm91Z2giLCJDb2xvckZvcm1hdF8xIiwiZnVsbFJlZmVyZW5jZU5hbWUiLCJjb2xvclJlZmVyZW5jZU5hbWUiLCJvcGFjaXR5UmVmZXJlbmNlTmFtZSIsImZ1bGxUb2tlbiIsImNvbG9yVG9rZW4iLCJvcGFjaXR5VG9rZW4iLCJmb3JtYXR0ZWRDb2xvciIsImNvbG9yRm9ybWF0IiwicmdiIiwicmdiYSIsInNtYXJ0UmdiYSIsImNvbG9yVG9SZ2IiLCJub3JtYWxpemVkSW50Q29sb3IiLCJmb3JtYXQiLCJoZXg2IiwiaGV4OCIsImhhc2hIZXg2IiwiaGFzaEhleDgiLCJzbWFydEhleCIsInNtYXJ0SGFzaEhleCIsImNvbG9yVG9IZXgiLCJoc2wiLCJoc2xhIiwic21hcnRIc2xhIiwiY29sb3JUb0hzbCIsIm5vcm1hbGl6ZWRGcmFjdGlvbmFsQ29sb3IiLCJzbWFydFVJQ29sb3IiLCJjb2xvclRvVUlDb2xvciIsIm9rbGNoIiwib2tsY2hhIiwic21hcnRPa2xjaCIsImNvbG9yVG9Pa2xjaCIsImFscGhhIiwiY29sb3JSZWZSZXBsYWNlIiwib3BhY2l0eVJlZlJlcGxhY2UiLCJyZXN1bHRpbmdSZ2IiLCJyIiwiZyIsImIiLCJyZXN1bHRpbmdIZXgiLCJwSGV4Iiwicm91bmQiLCJtYXgiLCJtaW4iLCJyZXN1bHRpbmdIc2wiLCJoIiwicyIsImwiLCJkZWx0YSIsInJlc3VsdGluZ1VJQ29sb3IiLCJmb3JjZVRyYWlsaW5nWmVybyIsIm11bHRpcGxpZXIiLCJwb3ciLCJyb3VuZGVkIiwiTnVtYmVyIiwidG9GaXhlZCIsInBhcnNlRmxvYXQiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiYyIsInJnYlRvT2tsY2giLCJsciIsInNSR0J0b0xpbmVhciIsImxnIiwibGIiLCJ6IiwibG1zX2wiLCJsbXNfbSIsImxtc19zIiwibHAiLCJjYnJ0IiwibXAiLCJzcCIsIkwiLCJsYWJfYSIsImxhYl9iIiwiQyIsInNxcnQiLCJGaWxlSGVscGVyIiwiY3JlYXRlQ29weVJlbW90ZUZpbGUiLCJyZWxhdGl2ZVBhdGgiLCJmaWxlTmFtZSIsInVybCIsInBhdGgiLCJuYW1lIiwiT3V0cHV0RmlsZVR5cGUiLCJjb3B5UmVtb3RlVXJsIiwiY3JlYXRlVGV4dEZpbGUiLCJjb250ZW50IiwiY3JlYXRlQmluYXJ5RmlsZSIsImJpbmFyeSIsIkZpbGVOYW1lSGVscGVyIiwiZW5zdXJlRmlsZUV4dGVuc2lvbiIsImV4dGVuc2lvbiIsIm5vcm1hbGl6ZWRFeHRlbnNpb24iLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJyZXBsYWNlRmlsZUV4dGVuc2lvbiIsIm9sZEV4dCIsIm5ld0V4dCIsIm5vcm1hbGl6ZWRPbGRFeHQiLCJub3JtYWxpemVkTmV3RXh0IiwicmVwbGFjZSIsIlJlZ0V4cCIsImdldERlZmF1bHRTdHlsZUZpbGVOYW1lIiwiQ29sb3IiLCJUeXBvZ3JhcGh5IiwiRGltZW5zaW9uIiwiU2l6ZSIsIlNwYWNlIiwiT3BhY2l0eSIsIkZvbnRTaXplIiwiTGluZUhlaWdodCIsIkxldHRlclNwYWNpbmciLCJQYXJhZ3JhcGhTcGFjaW5nIiwiQm9yZGVyV2lkdGgiLCJCb3JkZXJSYWRpdXMiLCJEdXJhdGlvbiIsIlpJbmRleCIsIlNoYWRvdyIsIkJvcmRlciIsIkdyYWRpZW50IiwiU3RyaW5nIiwiUHJvZHVjdENvcHkiLCJGb250RmFtaWx5IiwiRm9udFdlaWdodCIsIlZpc2liaWxpdHkiLCJCbHVyIiwiR2VuZXJhbEhlbHBlciIsImluZGVudCIsInNwYWNlcyIsInJlcGVhdCIsImFkZERpc2NsYWltZXIiLCJkaXNjbGFpbWVyIiwiTmFtaW5nSGVscGVyIiwiU3RyaW5nQ2FzZV8xIiwiY2hhbmdlX2Nhc2VfMSIsImFwcGx5RmluZFJlcGxhY2UiLCJmaW5kUmVwbGFjZSIsInNvcnRlZFBhdHRlcm5zIiwiZW50cmllcyIsInNvcnQiLCJhIiwibGVuZ3RoIiwicmVzdWx0IiwiZmluZCIsImVzY2FwZWRGaW5kIiwicGF0dGVybiIsImNvZGVTYWZlVmFyaWFibGVOYW1lRm9yVG9rZW4iLCJwYXJlbnQiLCJwcmVmaXgiLCJyZW1vdmVEdXBsaWNhdGVGcmFnbWVudHMiLCJmcmFnbWVudHMiLCJwdXNoIiwiaXNSb290IiwidG9rZW5OYW1lUGFydHMiLCJzcGxpdCIsInNsaWNlIiwicGF0aEFuZE5hbWUiLCJmaWx0ZXIiLCJmIiwidW5zaGlmdCIsImNvZGVTYWZlVmFyaWFibGVOYW1lIiwic2VudGVuY2UiLCJyZXBsYWNlQWxsIiwibm9ybWFsaXplZEZyYWdtZW50cyIsImtlYmFiQ2FzZSIsImZyYWdtZW50IiwiaW5kZXgiLCJjYW1lbENhc2UiLCJjYXBpdGFsQ2FzZSIsImNvbnN0YW50Q2FzZSIsImRvdENhc2UiLCJ0cmFpbkNhc2UiLCJub0Nhc2UiLCJwYXNjYWxDYXNlIiwicGF0aENhc2UiLCJzZW50ZW5jZUNhc2UiLCJzbmFrZUNhc2UiLCJmbGF0Q2FzZSIsIm1hdGNoIiwibmFtZUFzQ1NTVmFyUmVmZXJlbmNlIiwibmFtZUFzQ1NTVmFyRGVjbGFyYXRpb24iLCJUaGVtZUhlbHBlciIsIk5hbWluZ0hlbHBlcl8xIiwiaGFzVGhlbWVkVG9rZW5zIiwidG9rZW5zIiwidGhlbWUiLCJ0b2tlbnNPZlR5cGUiLCJvdmVycmlkZGVuVG9rZW5JZHMiLCJTZXQiLCJvdmVycmlkZGVuVG9rZW5zIiwidCIsImlkIiwic29tZSIsImhhcyIsImZpbHRlclRoZW1lZFRva2VucyIsImdldFRoZW1lSWRlbnRpZmllciIsInN0cmluZ0Nhc2UiLCJpZGVudGlmaWVyIiwiY29kZU5hbWUiLCJnZXRUaGVtZU5hbWUiLCJyZWZlcmVuY2VJZCIsImdldCIsIkVycm9yIiwiVG9rZW5OYW1lVHJhY2tlciIsImNvbnN0cnVjdG9yIiwidG9rZW5OYW1lTWFwIiwiTWFwIiwibmFtZVRvVG9rZW5NYXAiLCJoaWVyYXJjaHlOYW1lTWFwIiwicmVzZXQiLCJjbGVhciIsImdldFNpbXBsZVRva2VuTmFtZSIsImZvckV4cG9ydCIsImhpZXJhcmNoeUZ1bGxLZXkiLCJzZXQiLCJ0b2tlbnNBdExldmVsIiwiYWRkIiwiZ2V0VG9rZW5OYW1lIiwidG9rZW5Hcm91cHMiLCJncm91cCIsInBhcmVudEdyb3VwSWQiLCJjb3VudGVyIiwiV3JpdGVUb2tlblByb3BTdG9yZSIsInNkayIsInRhcmdldCIsInRva2VuUHJvcGVydHlXcml0ZU1hcCIsInN0b3JlVmFsdWVGb3JUb2tlblByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwidG9rZW5NYXAiLCJiYXRjaFVwZGF0ZVN0b3JlZFRva2VuUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCJnZXRUb2tlblByb3BlcnRpZXMiLCJwcm9wZXJ0eSIsInByb3AiLCJjcmVhdGVUb2tlblByb3BlcnR5IiwiY29sdW1uV2lkdGgiLCJkZXNjcmlwdGlvbiIsInBheWxvYWQiLCJBcnJheSIsInZhbHVlVG9Xcml0ZSIsImRlZmluaXRpb25JZCIsInRhcmdldEVsZW1lbnRJZCIsImJ1bGtPcGVyYXRpb25zIiwidXBkYXRlRWxlbWVudFByb3BlcnRpZXMiLCJ3cml0ZVRva2VuUHJvcGVydGllcyIsInZhbHVlR2VuZXJhdG9yIiwidHJpbW1lZFByb3BlcnR5TmFtZSIsIl9fY3JlYXRlQmluZGluZyIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJfX2V4cG9ydFN0YXIiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZSIsIkRvY3NCbG9ja1RleHRQcm9wZXJ0eVN0eWxlIiwidGl0bGUxIiwidGl0bGUyIiwidGl0bGUzIiwidGl0bGU0IiwidGl0bGU1IiwiZGVmYXVsdCIsImRlZmF1bHRCb2xkIiwiZGVmYXVsdFNlbWlib2xkIiwic21hbGwiLCJzbWFsbEJvbGQiLCJzbWFsbFNlbWlib2xkIiwiY3VzdG9tIiwiQXNzZXRTY2FsZVR5cGUiLCJhc3BlY3RGaWxsIiwiYXNwZWN0Rml0IiwiQXNzZXRTY2FsZSIsIngxIiwieDIiLCJ4MyIsIng0IiwiSWNvblNldCIsImNoZWNrQ2lyY2xlIiwiY3Jvc3NDaXJjbGUiLCJhbGVydCIsIkFMTF9CT1JERVJfUE9TSVRJT05TIiwiRG9jc0VudGl0eVR5cGUiLCJwYWdlIiwiRnJhbWVBbGlnbm1lbnQiLCJmcmFtZUhlaWdodCIsIkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQXNzZXRUeXBlIiwiaW1hZ2UiLCJmaWdtYUZyYW1lIiwiRG9jdW1lbnRhdGlvbkxlZ2FjeVBhZ2VCbG9ja1RoZW1lVHlwZSIsIm92ZXJyaWRlIiwiY29tcGFyaXNvbiIsIkRvY3VtZW50YXRpb25MZWdhY3lQYWdlQmxvY2tUeXBlIiwiaGVhZGluZyIsImNvZGUiLCJ1bm9yZGVyZWRMaXN0Iiwib3JkZXJlZExpc3QiLCJxdW90ZSIsImNhbGxvdXQiLCJkaXZpZGVyIiwidG9rZW5MaXN0IiwidG9rZW5Hcm91cCIsInNob3J0Y3V0cyIsImxpbmsiLCJmaWdtYUVtYmVkIiwieW91dHViZUVtYmVkIiwic3Rvcnlib29rRW1iZWQiLCJnZW5lcmljRW1iZWQiLCJmaWdtYUZyYW1lcyIsInJlbmRlckNvZGUiLCJjb21wb25lbnRBc3NldHMiLCJjb2x1bW4iLCJjb2x1bW5JdGVtIiwidGFicyIsInRhYkl0ZW0iLCJ0YWJsZSIsInRhYmxlQ2VsbCIsInRhYmxlUm93IiwiRG9jdW1lbnRhdGlvbkxlZ2FjeUdyb3VwQmVoYXZpb3IiLCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXQiLCJEb2N1bWVudGF0aW9uTGVnYWN5UGFnZUJsb2NrU2hvcnRjdXRUeXBlIiwiZXh0ZXJuYWwiLCJpbnRlcm5hbCIsInRpdGxlIiwic2hvcnRjdXRUaXRsZUZyb21Nb2RlbCIsInNob3J0Y3V0RGVzY3JpcHRpb25Gcm9tTW9kZWwiLCJwcmV2aWV3VXJsIiwic2hvcnRjdXRQcmV2aWV3VXJsRnJvbU1vZGVsIiwiZG9jdW1lbnRhdGlvbkl0ZW1QcmV2aWV3IiwidmFsaWQiLCJkb2N1bWVudGF0aW9uSXRlbUlkIiwiaW50ZXJuYWxJZCIsImV4dGVybmFsVXJsIiwibiIsImkiLCJ1cmxQcmV2aWV3IiwiYXNzZXRVcmwiLCJhc3NldCIsInRodW1ibmFpbFVybCIsIlJpY2hUZXh0U3BhbkF0dHJpYnV0ZVR5cGUiLCJib2xkIiwiaXRhbGljIiwiUHVsc2FyRXhlY3V0b3IiLCJzdXBlcm5vdmEiLCJsb2NhbCIsIldvcmtzcGFjZVN1YnNjcmlwdGlvblN0YXR1cyIsImFjdGl2ZSIsImdyYWNlUGVyaW9kIiwiY2FuY2VsbGVkIiwic3VzcGVuZGVkIiwiRnJhbWVMYXlvdXQiLCJjOCIsImM3IiwiYzYiLCJjNSIsImM0IiwiYzMiLCJjMiIsImMxIiwiYzE3NSIsIkRvY3NCbG9ja0JlaGF2aW9yU2VsZWN0aW9uVHlwZSIsImVudGl0eSIsImVudGl0eUFuZEdyb3VwIiwiRFRfVE9LRU5fVFlQRVMiLCJ0b2tlblR5cGVJc1JlZmVyZW5jYWJsZSIsIlJFRkVSRU5DQUJMRV9UT0tFTl9UWVBFUyIsIlJFUExBQ0FCTEVfVE9LRU5fVFlQRVMiLCJ0b2tlblR5cGVJc05vblB1cmUiLCJ0b2tlblR5cGVJc1B1cmUiLCJQVVJFX1RPS0VOX1RZUEVTIiwiQUxMX1RPS0VOX1RZUEVTIiwiTVNfRElNRU5TSU9OX1RPS0VOX1RZUEVTIiwiUkFXX0RJTUVOU0lPTl9UT0tFTl9UWVBFUyIsIkRJTUVOU0lPTl9UT0tFTl9UWVBFUyIsIk9QVElPTl9UT0tFTl9UWVBFUyIsIlNUUklOR19UT0tFTl9UWVBFUyIsImluY2x1ZGVzIiwiRG9jc0VudGl0eUdyb3VwQmVoYXZpb3IiLCJXb3Jrc3BhY2VTdWJzY3JpcHRpb25Qcm9kdWN0Q29kZSIsImZyZWUiLCJ0ZWFtIiwidGVhbVRlc3QiLCJjb21wYW55IiwiZW50ZXJwcmlzZSIsIlN1cGVybm92YUVycm9yIiwic3VwZXIiLCJzdGF0dXMiLCJmb3JtRXJyb3JzIiwicmVxdWVzdElkIiwic2VydmVyVGltZSIsImZyb21OZXR3b3JrUmVzcG9uc2UiLCJtZXNzYWdlIiwiZXJyb3JDb2RlIiwicmVhc29uIiwibGFiZWwiLCJmcm9tTm9OZXR3b3JrUmVzcG9uc2UiLCJEYXRlIiwidG9JU09TdHJpbmciLCJmcm9tQ29kZSIsImZyb21NZXNzYWdlIiwiaXNGaWVsZEVycm9yZWQiLCJrZXkiLCJlcnJvckZvckZpZWxkIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0YWNrIiwidG9IdW1hblJlYWRhYmxlIiwiQUxMX0JPUkRFUl9TVFlMRVMiLCJTb3VyY2VUeXBlIiwiZmlnbWEiLCJ0b2tlblN0dWRpbyIsImZpZ21hVmFyaWFibGVzUGx1Z2luIiwiRG9jdW1lbnRhdGlvbkxlZ2FjeUNhbGxvdXRUeXBlIiwiaW5mbyIsInN1Y2Nlc3MiLCJ3YXJuaW5nIiwiZXJyb3IiLCJXb3Jrc3BhY2VTdWJzY3JpcHRpb25QbGFuSW50ZXJ2YWwiLCJ5ZWFybHkiLCJtb250aGx5IiwiRG9jc0Jsb2NrQmVoYXZpb3JEYXRhVHlwZSIsIml0ZW0iLCJjb21wb25lbnQiLCJmaWdtYU5vZGUiLCJmaWdtYUNvbXBvbmVudCIsImRvY3VtZW50YXRpb25JdGVtIiwicGFnZUhlYWRpbmciLCJwYWdlSGVhZGluZ0lkIiwibGlua0F0dHJpYnV0ZVRvRG9jc0xpbmsiLCJkb2NzTGlua1RvTGlua0F0dHJpYnV0ZXMiLCJkb2NzTGlua1RvVXJsIiwiRG9jc0xpbmtSZWZUeXBlIiwiaHJlZiIsIm9wZW5Jbk5ld1RhYiIsIkN1c3RvbURvbWFpbkVycm9yQ29kZSIsImdlbmVyYWxFcnJvciIsImRuc05vdENvbmZpZ3VyZWQiLCJtYWludGVuYW5jZSIsIkRvY3NCbG9ja0l0ZW1Qcm9wZXJ0eU9wdGlvblJlbmRlcmluZ1N0eWxlIiwic2VnbWVudGVkQ29udHJvbCIsInRvZ2dsZUJ1dHRvbiIsInNlbGVjdCIsImNoZWNrYm94IiwiRG9jc0Jsb2NrT3B0aW9uUmVuZGVyaW5nU3R5bGUiLCJWaXNpYmlsaXR5VHlwZSIsInZpc2libGUiLCJoaWRkZW4iLCJCbHVyVHlwZSIsImJhY2tncm91bmQiLCJXb3Jrc3BhY2VOUE1SZWdpc3RyeUF1dGhUeXBlIiwiYmFzaWMiLCJiZWFyZXIiLCJEb2NzQmxvY2tSaWNoVGV4dFByb3BlcnR5U3R5bGUiLCJEb2NzQmxvY2tJdGVtUHJvcGVydHlUeXBlIiwicmljaFRleHQiLCJtdWx0aVJpY2hUZXh0IiwicmljaFRleHRFZGl0b3IiLCJib29sZWFuIiwibnVtYmVyIiwic2luZ2xlU2VsZWN0IiwibXVsdGlTZWxlY3QiLCJ0b2tlblByb3BlcnR5IiwiY29tcG9uZW50UHJvcGVydHkiLCJhc3NldFByb3BlcnR5IiwiZW1iZWRVUkwiLCJtYXJrZG93biIsImNvZGVTYW5kYm94Iiwic3Rvcnlib29rIiwiRG9jc0Jsb2NrSXRlbVZhcmlhbnRMYXlvdXRXaWR0aCIsImM5IiwiYzEwIiwiYzExIiwiYzEyIiwiRG9jdW1lbnRhdGlvbkxlZ2FjeUl0ZW1UeXBlIiwiVGV4dEFsaWdubWVudCIsIkFsaWdubWVudCIsImxlZnQiLCJzdHJldGNoIiwicmlnaHQiLCJEb2NzQmxvY2tJdGVtUHJvcGVydHlUZXh0U3R5bGUiLCJyZWd1bGFyIiwiQ3VzdG9tRG9tYWluU3RhdGUiLCJpbml0aWFsIiwiZG9tYWluU2V0dXBJblByb2dyZXNzIiwiZG9tYWluU2V0dXBGYWlsZWQiLCJkb21haW5TZXR1cHNTdWNjZXMiLCJzc2xTZXR1cEluUHJvZ3Jlc3MiLCJzc2xTZXR1cEZhaWxlZCIsInNzbFNldHVwU3VjY2VzcyIsIldvcmtzcGFjZU5QTVJlZ2lzdHJ5VHlwZSIsIm5wbUpTIiwiZ2l0SHViIiwiYXp1cmVEZXZPcHMiLCJhcnRpZmFjdG9yeSIsIkRvY3NTZWN0aW9uVHlwZSIsInBsYWluIiwiSW1wb3J0V2FybmluZ1R5cGUiLCJVbnN1cHBvcnRlZEZpbGwiLCJVbnN1cHBvcnRlZFN0cm9rZSIsIlVuc3VwcG9ydGVkRWZmZWN0IiwiU3R5bGVOb3RBcHBsaWVkIiwiTm9QdWJsaXNoZWRTdHlsZXMiLCJOb1B1Ymxpc2hlZENvbXBvbmVudHMiLCJOb1B1Ymxpc2hlZEFzc2V0cyIsIk5vVmVyc2lvbkZvdW5kIiwiQ29tcG9uZW50SGFzTm9UaHVtYm5haWwiLCJEdXBsaWNhdGVJbXBvcnRlZFN0eWxlSWQiLCJEdXBsaWNhdGVJbXBvcnRlZFN0eWxlUGF0aCIsIk5vUHVibGlzaGVkRWxlbWVudHMiLCJOb1VucHVibGlzaGVkU3R5bGVzIiwiRG9jc0Jsb2NrSXRlbVByb3BlcnR5UmljaFRleHRTdHlsZSIsIm9sIiwidWwiLCJEb2NzQmxvY2tJdGVtVmFyaWFudExheW91dFR5cGUiLCJyb3ciLCJNU19VTklUUyIsIlBYX1VOSVRTIiwiUkFXX1VOSVRTIiwiTElORV9IRUlHSFRfVU5JVFMiLCJTSVpFX1VOSVRTIiwiQXNzZXRGb3JtYXQiLCJwbmciLCJwZGYiLCJzdmciLCJEb2NzQmxvY2tJbWFnZVByb3BlcnR5QXNwZWN0UmF0aW8iLCJhdXRvIiwic3F1YXJlIiwibGFuZHNjYXBlIiwicG9ydHJhaXQiLCJ3aWRlIiwiZHJvcCIsIkRvY3NCbG9ja09wdGlvbkNvbG9yIiwiZ3JlZW4iLCJyZWQiLCJ5ZWxsb3ciLCJibHVlIiwicHVycGxlIiwib3JhbmdlIiwicGluayIsInRlYWwiLCJncmV5IiwibGlnaHRHcmV5IiwiY3lhbiIsImZ1Y2hzaWEiLCJEb2NzQmxvY2tJdGVtRW50aXR5VHlwZSIsImFzc2V0R3JvdXAiLCJjb21wb25lbnRHcm91cCIsImNvbnZlcnRSZW1vdGVUb1VzZXJSb2xlIiwiVXNlclJvbGUiLCJvd25lciIsImFkbWluIiwiY3JlYXRvciIsImNvbnRyaWJ1dG9yIiwiYmlsbGluZyIsInZpZXdlciIsIkRvY3VtZW50YXRpb25MZWdhY3lIZWFkaW5nVHlwZSIsImgxIiwiaDIiLCJoMyIsImRvY3NJbWFnZVJlZlRvVXJsIiwiRG9jc0ltYWdlUmVmVHlwZSIsInJlc291cmNlIiwic291cmNlSWQiLCJmcmFtZVJlZmVyZW5jZUlkIiwicmVzb3VyY2VzIiwiZ2V0RmlnbWFGcmFtZUhvc3RlZFVybCIsImRlc2lnblN5c3RlbUlkIiwiZHNJZCIsInZlcnNpb25JZCIsInUiLCJkIiwiVCIsInYiLCJQIiwiUyIsIk8iLCJfIiwiRCIsIkkiLCJFIiwiTiIsIkIiLCJSIiwiaiIsIk0iLCJBIiwiRiIsInciLCJVIiwiWSIsIlciLCJHIiwiSyIsIkgiLCJWIiwiJCIsInEiLCJKIiwiUSIsIloiLCJYIiwiZWUiLCJ0ZSIsIm9lIiwicmUiLCJuZSIsImllIiwiYWUiLCJjZSIsImxlIiwiU1BMSVRfTE9XRVJfVVBQRVJfUkUiLCJTUExJVF9VUFBFUl9VUFBFUl9SRSIsIlNQTElUX1NFUEFSQVRFX05VTUJFUl9SRSIsIkRFRkFVTFRfU1RSSVBfUkVHRVhQIiwiU1BMSVRfUkVQTEFDRV9WQUxVRSIsIkRFRkFVTFRfUFJFRklYX1NVRkZJWF9DSEFSQUNURVJTIiwic3RhcnQiLCJlbmQiLCJjaGFyQXQiLCJzcGxpdFNlcGFyYXRlTnVtYmVycyIsIndvcmRzIiwid29yZCIsImV4ZWMiLCJvZmZzZXQiLCJzcGxpY2UiLCJpbnB1dCIsInN1ZmZpeCIsInNwbGl0UHJlZml4U3VmZml4IiwibG93ZXJGYWN0b3J5IiwibG9jYWxlIiwiZGVsaW1pdGVyIiwidXBwZXJGYWN0b3J5IiwidHJhbnNmb3JtIiwibWVyZ2VBbWJpZ3VvdXNDaGFyYWN0ZXJzIiwiY2FwaXRhbENhc2VUcmFuc2Zvcm1GYWN0b3J5IiwicGFzY2FsQ2FzZVRyYW5zZm9ybUZhY3RvcnkiLCJwYXNjYWxTbmFrZUNhc2UiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsInRvVXBwZXJDYXNlIiwidG9Mb2NhbGVVcHBlckNhc2UiLCJjaGFyMCIsInNwbGl0Rm4iLCJzZXBhcmF0ZU51bWJlcnMiLCJwcmVmaXhDaGFyYWN0ZXJzIiwic3VmZml4Q2hhcmFjdGVycyIsInByZWZpeEluZGV4Iiwic3VmZml4SW5kZXgiLCJjaGFyIiwiVGhlbWVFeHBvcnRTdHlsZSIsIkZpbGVTdHJ1Y3R1cmUiLCJUb2tlblNvcnRPcmRlciIsIlRva2VuTmFtZVN0cnVjdHVyZSIsIkRFRkFVTFRfVE9LRU5fUFJFRklYRVMiLCJERUZBVUxUX1NUWUxFX0ZJTEVfTkFNRVMiLCJnZXRUb2tlblByZWZpeCIsImZvcmNlUmV0dXJuIiwiX18xIiwiZXhwb3J0Q29uZmlndXJhdGlvbiIsInVzZVRva2VuVHlwZVByZWZpeGVzIiwiY3VzdG9taXplVG9rZW5QcmVmaXhlcyIsInRva2VuUHJlZml4ZXMiLCJkZWZhdWx0c18xIiwidG9rZW5PYmplY3RLZXlOYW1lIiwicmVzZXRUb2tlbk5hbWVUcmFja2luZyIsInRva2VuX2hpZXJhcmNoeV8xIiwicmVzZXROYW1lVHJhY2tpbmciLCJjb252ZXJ0ZWRUb2tlbiIsIm1hcHBlZFRva2VucyIsImNvbGxlY3Rpb25zIiwiZXhwb3J0X3V0aWxzXzEiLCJ1c2VSZWZlcmVuY2VzIiwiY29sb3JQcmVjaXNpb24iLCJpbmRlbnRTdHJpbmciLCJmb3JtYXR0ZWRWYWx1ZSIsInZhbHVlX2Zvcm1hdHRlcl8xIiwiZm9ybWF0VG9rZW5WYWx1ZSIsInNob3dEZXNjcmlwdGlvbnMiLCJjb2xsZWN0aW9uTmFtZSIsInRva2VuTmFtZVN0cnVjdHVyZSIsImNvbGxlY3Rpb25JZCIsImNvbGxlY3Rpb24iLCJwZXJzaXN0ZW50SWQiLCJwYXJlbnRHcm91cCIsInRva2VuTmFtZVN0eWxlIiwiQm9vbGVhbiIsInN0eWxlT3V0cHV0RmlsZSIsInRoZW1lUGF0aCIsImV4cG9ydEJhc2VWYWx1ZXMiLCJleHBvcnRUaGVtZXNBcyIsImNvbmZpZ18xIiwiTmVzdGVkVGhlbWVzIiwiZXhwb3J0T25seVRoZW1lZFRva2VucyIsInRva2VuT2JqZWN0IiwidG9rZW5fMSIsImdlbmVyYXRlRW1wdHlGaWxlcyIsInNvcnRlZFRva2VucyIsInRva2VuU29ydE9yZGVyIiwibmFtZUEiLCJuYW1lQiIsImxvY2FsZUNvbXBhcmUiLCJzaG93R2VuZXJhdGVkRmlsZURpc2NsYWltZXIiLCJfY29tbWVudCIsImZvckVhY2giLCJwYXRoU2VnbWVudHMiLCJ0b2tlblBhdGgiLCJzZWdtZW50IiwiZXhwb3J0X3V0aWxzXzIiLCJ0b2tlbk5hbWUiLCJwcm9jZXNzVG9rZW5OYW1lIiwic2VnbWVudHMiLCJOYW1lT25seSIsIkNvbGxlY3Rpb25QYXRoQW5kTmFtZSIsImNvbGxlY3Rpb25TZWdtZW50IiwiUGF0aEFuZE5hbWUiLCJnbG9iYWxOYW1lUHJlZml4IiwidG9rZW5QYXRoV2l0aG91dENvbGxlY3Rpb24iLCJoaWVyYXJjaGljYWxPYmplY3QiLCJjcmVhdGVIaWVyYXJjaGljYWxTdHJ1Y3R1cmUiLCJjcmVhdGVUb2tlblZhbHVlIiwiaW5jbHVkZVR5cGVQcmVmaXgiLCJhc3NpZ24iLCJkZWVwTWVyZ2UiLCJwcm9jZXNzVG9rZW5zVG9PYmplY3QiLCJiYXNlU3R5bGVGaWxlUGF0aCIsImN1c3RvbWl6ZVN0eWxlRmlsZU5hbWVzIiwic3R5bGVGaWxlTmFtZXMiLCJjb21iaW5lZFN0eWxlT3V0cHV0RmlsZSIsIm9yaWdpbmFsVG9rZW5zIiwiX2xhc3RVcGRhdGVkIiwiY29uc29sZSIsImxvZyIsInRva2Vuc0J5Q29sbGVjdGlvbiIsImNvbGxlY3Rpb25Ub2tlbnMiLCJjb2xsZWN0aW9uT2JqZWN0IiwiZ3JvdXBUb2tlbnNCeUNvbGxlY3Rpb24iLCJzdHlsZV9maWxlXzEiLCJwcm9jZXNzT3V0cHV0RmlsZXMiLCJmaWxlcyIsImZpbGUiLCJQdWxzYXIiLCJleHBvcnRDb25maWciLCJleHBvcnQiLCJhc3luYyIsImNvbnRleHQiLCJyZW1vdGVWZXJzaW9uSWRlbnRpZmllciIsImdldFRva2VucyIsImdldFRva2VuR3JvdXBzIiwidG9rZW5Db2xsZWN0aW9ucyIsImdldFRva2VuQ29sbGVjdGlvbnMiLCJicmFuZElkIiwiYnJhbmQiLCJicmFuZHMiLCJnZXRCcmFuZHMiLCJpZEluVmVyc2lvbiIsInRoZW1lSWRzIiwidGhlbWVzIiwiZ2V0VG9rZW5UaGVtZXMiLCJ0aGVtZXNUb0FwcGx5IiwidGhlbWVJZCIsImZpbGVTdHJ1Y3R1cmUiLCJTaW5nbGVGaWxlIiwidmFsdWVPYmplY3RGaWxlcyIsInZhbHVlcyIsImJhc2VGaWxlIiwidGhlbWVGaWxlcyIsInRoZW1lZFRva2VucyIsImNvbXB1dGVUb2tlbnNCeUFwcGx5aW5nVGhlbWVzIiwib3JpZ2luYWxFeHBvcnRCYXNlVmFsdWVzIiwicmVkdWNlIiwibWVyZ2VkIiwibWVyZ2VkQ29udGVudCIsInBhcnNlIiwiU2VwYXJhdGVGaWxlcyIsImZsYXRNYXAiLCJNZXJnZWRUaGVtZSIsImJhc2VUb2tlbkZpbGVzIiwiQXBwbHlEaXJlY3RseSIsInRva2VuTmFtZVRyYWNrZXIiLCJmaWx0ZXJlZFBhdGgiLCJyZWR1Y2VSaWdodCIsIm5lc3RlZFZhbHVlIiwic291cmNlIiwib3V0cHV0Iiwia2V5cyIsImlzQXJyYXkiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIm9iaiIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIl0sInNvdXJjZVJvb3QiOiIifQ==